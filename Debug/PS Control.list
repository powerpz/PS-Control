
PS Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d94  08007d94  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d9c  08007d9c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000d18  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d28  20000d28  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d9d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003318  00000000  00000000  00034ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  000380f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d50  00000000  00000000  00038f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002295e  00000000  00000000  00039ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144cb  00000000  00000000  0005c63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c903f  00000000  00000000  00070b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139b48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bd0  00000000  00000000  00139b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d54 	.word	0x08007d54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007d54 	.word	0x08007d54

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468e      	mov	lr, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14d      	bne.n	800090e <__udivmoddi4+0xaa>
 8000872:	428a      	cmp	r2, r1
 8000874:	4694      	mov	ip, r2
 8000876:	d969      	bls.n	800094c <__udivmoddi4+0xe8>
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	b152      	cbz	r2, 8000894 <__udivmoddi4+0x30>
 800087e:	fa01 f302 	lsl.w	r3, r1, r2
 8000882:	f1c2 0120 	rsb	r1, r2, #32
 8000886:	fa20 f101 	lsr.w	r1, r0, r1
 800088a:	fa0c fc02 	lsl.w	ip, ip, r2
 800088e:	ea41 0e03 	orr.w	lr, r1, r3
 8000892:	4094      	lsls	r4, r2
 8000894:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000898:	0c21      	lsrs	r1, r4, #16
 800089a:	fbbe f6f8 	udiv	r6, lr, r8
 800089e:	fa1f f78c 	uxth.w	r7, ip
 80008a2:	fb08 e316 	mls	r3, r8, r6, lr
 80008a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008aa:	fb06 f107 	mul.w	r1, r6, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 811f 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 811c 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 f707 	mul.w	r7, r0, r7
 80008dc:	42a7      	cmp	r7, r4
 80008de:	d90a      	bls.n	80008f6 <__udivmoddi4+0x92>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	f080 810a 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	f240 8107 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa4>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000912:	2d00      	cmp	r5, #0
 8000914:	f000 80ef 	beq.w	8000af6 <__udivmoddi4+0x292>
 8000918:	2600      	movs	r6, #0
 800091a:	e9c5 0100 	strd	r0, r1, [r5]
 800091e:	4630      	mov	r0, r6
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f683 	clz	r6, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	428b      	cmp	r3, r1
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb61 0303 	sbc.w	r3, r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	469e      	mov	lr, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e0      	beq.n	8000908 <__udivmoddi4+0xa4>
 8000946:	e9c5 4e00 	strd	r4, lr, [r5]
 800094a:	e7dd      	b.n	8000908 <__udivmoddi4+0xa4>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8092 	bne.w	8000a7e <__udivmoddi4+0x21a>
 800095a:	eba1 010c 	sub.w	r1, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2601      	movs	r6, #1
 8000968:	0c20      	lsrs	r0, r4, #16
 800096a:	fbb1 f3f7 	udiv	r3, r1, r7
 800096e:	fb07 1113 	mls	r1, r7, r3, r1
 8000972:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	4288      	cmp	r0, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	4288      	cmp	r0, r1
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1110 	mls	r1, r7, r0, r1
 800099c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4608      	mov	r0, r1
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79c      	b.n	80008fe <__udivmoddi4+0x9a>
 80009c4:	f1c6 0720 	rsb	r7, r6, #32
 80009c8:	40b3      	lsls	r3, r6
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa01 f306 	lsl.w	r3, r1, r6
 80009da:	431c      	orrs	r4, r3
 80009dc:	40f9      	lsrs	r1, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f306 	lsl.w	r3, r0, r6
 80009e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 1118 	mls	r1, r9, r8, r1
 80009f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	4288      	cmp	r0, r1
 80009fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0101 	adds.w	r1, ip, r1
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4461      	add	r1, ip
 8000a1c:	1a09      	subs	r1, r1, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a24:	fb09 1110 	mls	r1, r9, r0, r1
 8000a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	458e      	cmp	lr, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0101 	adds.w	r1, ip, r1
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	458e      	cmp	lr, r1
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4461      	add	r1, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba1 010e 	sub.w	r1, r1, lr
 8000a52:	42a1      	cmp	r1, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15d      	cbz	r5, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb61 010e 	sbc.w	r1, r1, lr
 8000a66:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a6e:	40f1      	lsrs	r1, r6
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c5 7100 	strd	r7, r1, [r5]
 8000a76:	2600      	movs	r6, #0
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	f1c2 0320 	rsb	r3, r2, #32
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa0:	0c0b      	lsrs	r3, r1, #16
 8000aa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	429e      	cmp	r6, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	b289      	uxth	r1, r1
 8000ac8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000acc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3e02      	subs	r6, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e705      	b.n	8000908 <__udivmoddi4+0xa4>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e3      	b.n	80008c8 <__udivmoddi4+0x64>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6f8      	b.n	80008f6 <__udivmoddi4+0x92>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4646      	mov	r6, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4461      	add	r1, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <AD5676R_init>:
* Description		: Init DAC settings.
* Input			: None
* Output		: None
* Return		: Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t AD5676R_init(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	status_t result = SEN_SUCCESS;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	71fb      	strb	r3, [r7, #7]

    // Reset Sequence
    //HAL_GPIO_WritePin(AD5676_HW_RESET_GPIO_PORT, AD5676_HW_RESET_GPIO_PIN, GPIO_PIN_SET);

    // Keep always high in init to not update the dacs automatically
    HAL_GPIO_WritePin(AD5676_LDAC_GPIO_PORT, AD5676_LDAC_PIN, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2101      	movs	r1, #1
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <AD5676R_init+0x30>)
 8000b48:	f004 fcba 	bl	80054c0 <HAL_GPIO_WritePin>

    // Set low during send data
    HAL_GPIO_WritePin(AD5676_SYNC_GPIO_PORT, AD5676_SYNC_PIN, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <AD5676R_init+0x34>)
 8000b52:	f004 fcb5 	bl	80054c0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f004 f92a 	bl	8004db0 <HAL_Delay>
    //HAL_GPIO_WritePin(AD5676_HW_RESET_GPIO_PORT, AD5676_HW_RESET_GPIO_PIN, GPIO_PIN_SET);

    return result;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020000 	.word	0x40020000

08000b70 <AD5676R_write>:
* Description		: SPI interface for writing data to DAC
* Input			: command, address, value
* Output		: None
* Return		: Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t AD5676R_write(uint8_t cmd, uint8_t addr, uint16_t val){
 8000b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b74:	b087      	sub	sp, #28
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	71bb      	strb	r3, [r7, #6]
 8000b80:	4613      	mov	r3, r2
 8000b82:	80bb      	strh	r3, [r7, #4]
 8000b84:	466b      	mov	r3, sp
 8000b86:	461e      	mov	r6, r3

	status_t result = SEN_SUCCESS;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	75fb      	strb	r3, [r7, #23]

	uint8_t msgLength = 3;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	75bb      	strb	r3, [r7, #22]
	uint8_t sendBuffer[msgLength];
 8000b90:	7db9      	ldrb	r1, [r7, #22]
 8000b92:	460b      	mov	r3, r1
 8000b94:	3b01      	subs	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	b2cb      	uxtb	r3, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4698      	mov	r8, r3
 8000b9e:	4691      	mov	r9, r2
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bb4:	b2cb      	uxtb	r3, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	461c      	mov	r4, r3
 8000bba:	4615      	mov	r5, r2
 8000bbc:	f04f 0200 	mov.w	r2, #0
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	00eb      	lsls	r3, r5, #3
 8000bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bca:	00e2      	lsls	r2, r4, #3
 8000bcc:	460b      	mov	r3, r1
 8000bce:	3307      	adds	r3, #7
 8000bd0:	08db      	lsrs	r3, r3, #3
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	ebad 0d03 	sub.w	sp, sp, r3
 8000bd8:	466b      	mov	r3, sp
 8000bda:	3300      	adds	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
	sendBuffer[0] = AD5676_OPERATION(addr,cmd);
 8000bde:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	b25a      	sxtb	r2, r3
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	701a      	strb	r2, [r3, #0]
	sendBuffer[1] = (val >> 8) & 0x00FF; /* MSB */
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	705a      	strb	r2, [r3, #1]
	sendBuffer[2] =  val & 0x00FF; /* LSB */
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	709a      	strb	r2, [r3, #2]


  //  HAL_GPIO_WritePin(AD5676_SYNC_GPIO_PORT, AD5676_SYNC_PIN, GPIO_PIN_SET);
  //  Delay_us(10);
    HAL_GPIO_WritePin(AD5676_SYNC_GPIO_PORT, AD5676_SYNC_PIN, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4810      	ldr	r0, [pc, #64]	; (8000c54 <AD5676R_write+0xe4>)
 8000c12:	f004 fc55 	bl	80054c0 <HAL_GPIO_WritePin>
	Delay_us(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f002 fbf6 	bl	8003408 <Delay_us>

    if(HAL_SPI_Transmit(&hspi1, sendBuffer, msgLength,100) != HAL_OK)
 8000c1c:	7dbb      	ldrb	r3, [r7, #22]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	2364      	movs	r3, #100	; 0x64
 8000c22:	68f9      	ldr	r1, [r7, #12]
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <AD5676R_write+0xe8>)
 8000c26:	f005 faa2 	bl	800616e <HAL_SPI_Transmit>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <AD5676R_write+0xc4>
    {
    	result = SEN_ERROR;
 8000c30:	2300      	movs	r3, #0
 8000c32:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(AD5676_SYNC_GPIO_PORT, AD5676_SYNC_PIN, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2110      	movs	r1, #16
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <AD5676R_write+0xe4>)
 8000c3a:	f004 fc41 	bl	80054c0 <HAL_GPIO_WritePin>
	Delay_us(100);
 8000c3e:	2064      	movs	r0, #100	; 0x64
 8000c40:	f002 fbe2 	bl	8003408 <Delay_us>

    return result;
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	46b5      	mov	sp, r6
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c52:	bf00      	nop
 8000c54:	40020000 	.word	0x40020000
 8000c58:	200006d0 	.word	0x200006d0

08000c5c <AD5676_Update_DAC_Channel_N>:
* 						is indipendent than LDAC
* Input			: DAC channel (0..7), data (12 bit(left justif.)/16 bit)
* Output		: None
* Return		: Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t AD5676_Update_DAC_Channel_N (uint8_t reg, uint16_t data){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	80bb      	strh	r3, [r7, #4]

	status_t result = SEN_SUCCESS;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]

	result = AD5676R_write(AD5676_CMD_WRITE_UPDATE,reg, data);
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	4619      	mov	r1, r3
 8000c76:	2003      	movs	r0, #3
 8000c78:	f7ff ff7a 	bl	8000b70 <AD5676R_write>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	73fb      	strb	r3, [r7, #15]

	return result;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <CTR_identif>:
//debug
uint8_t testNum;
uint8_t debControl;
uint16_t i;

void CTR_identif(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

	prtEN_PS_Global(0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <CTR_identif+0x3c>)
 8000c98:	f004 fc12 	bl	80054c0 <HAL_GPIO_WritePin>
	prtOutput1_ModulosOff(0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	480a      	ldr	r0, [pc, #40]	; (8000ccc <CTR_identif+0x40>)
 8000ca2:	f004 fc0d 	bl	80054c0 <HAL_GPIO_WritePin>
	prtOutput2_ModulosOff(0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2108      	movs	r1, #8
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <CTR_identif+0x44>)
 8000cac:	f004 fc08 	bl	80054c0 <HAL_GPIO_WritePin>

#ifdef SOLO_2_FUENTES
    identif.IdFuente1 = UX6;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <CTR_identif+0x48>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	705a      	strb	r2, [r3, #1]
    identif.IdFuente2 = NONE;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <CTR_identif+0x48>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	709a      	strb	r2, [r3, #2]
    

        identif.IdPCB = PCB1;		// Excelsys, PCB 1, only Exelsys is using !!! iii
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <CTR_identif+0x48>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
        identif.IdPCB = NOT_DEFINED;
        LED_Configure(LED1, 0xFF, 100, 100, 0); //Yellow LED infinite blink
    }
#endif

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	2000002c 	.word	0x2000002c

08000cd8 <alarmsControl_init>:

void alarmsControl_init(void) {
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
    fuentesStatus.u8MotorFan = 0;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <alarmsControl_init+0x68>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	705a      	strb	r2, [r3, #1]
    MemoryMap.var.cabecera_fw.board_alarms.bit_field.RS584_Error = 0;
 8000ce2:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <alarmsControl_init+0x6c>)
 8000ce4:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000ce8:	f36f 0300 	bfc	r3, #0, #1
 8000cec:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
    MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente1TempFail = 0;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <alarmsControl_init+0x6c>)
 8000cf2:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000cf6:	f36f 03c3 	bfc	r3, #3, #1
 8000cfa:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
    MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente2TempFail = 0;
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <alarmsControl_init+0x6c>)
 8000d00:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000d04:	f36f 1304 	bfc	r3, #4, #1
 8000d08:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
    MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente1FanFail = 0;
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <alarmsControl_init+0x6c>)
 8000d0e:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000d12:	f36f 1345 	bfc	r3, #5, #1
 8000d16:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
    MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente2FanFail = 0;
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <alarmsControl_init+0x6c>)
 8000d1c:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000d20:	f36f 1386 	bfc	r3, #6, #1
 8000d24:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
    MemoryMap.var.cabecera_fw.board_alarms.bit_field.AlarmaExterna = 0;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <alarmsControl_init+0x6c>)
 8000d2a:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000d2e:	f36f 13c7 	bfc	r3, #7, #1
 8000d32:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20000030 	.word	0x20000030
 8000d44:	20000234 	.word	0x20000234

08000d48 <alarmsControl_motor>:

void alarmsControl_motor(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t u8Error = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	71bb      	strb	r3, [r7, #6]

prtDL1(1);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	488c      	ldr	r0, [pc, #560]	; (8000f88 <alarmsControl_motor+0x240>)
 8000d58:	f004 fbb2 	bl	80054c0 <HAL_GPIO_WritePin>
    //We see if from main they send us to lower or raise the alarm signal
    if ((MemoryMap.var.fuentes.alarma == FNT_MAIN_ALARM_OFF)||(MemoryMap.var.fuentes.alarma == FNT_MAIN_ALARM_NONE)) {
 8000d5c:	4b8b      	ldr	r3, [pc, #556]	; (8000f8c <alarmsControl_motor+0x244>)
 8000d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d004      	beq.n	8000d70 <alarmsControl_motor+0x28>
 8000d66:	4b89      	ldr	r3, [pc, #548]	; (8000f8c <alarmsControl_motor+0x244>)
 8000d68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10d      	bne.n	8000d8c <alarmsControl_motor+0x44>
        //We only deactivate the alarm if we no longer see the alarms that have lowered the signal
#ifdef SOLO_2_FUENTES
        if ((prtInput1_AC_fail == 0) && (prtInput1_TempFail == 0)) {
			//Deactivate alarm line
            //MemoryMap.var.cabecera_fw.board_alarms.bit_field.AlarmaExterna = 0;
            prtAlarmaOut(0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d76:	4886      	ldr	r0, [pc, #536]	; (8000f90 <alarmsControl_motor+0x248>)
 8000d78:	f004 fba2 	bl	80054c0 <HAL_GPIO_WritePin>
        }
        if (prtAlarmaIn == 0) {
            MemoryMap.var.cabecera_fw.board_alarms.bit_field.AlarmaExterna = 0;
 8000d7c:	4a83      	ldr	r2, [pc, #524]	; (8000f8c <alarmsControl_motor+0x244>)
 8000d7e:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000d82:	f36f 13c7 	bfc	r3, #7, #1
 8000d86:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
        if (prtAlarmaIn == 0) {
 8000d8a:	e032      	b.n	8000df2 <alarmsControl_motor+0xaa>
        if (identif.IdPCB == PCB2) {
			//Deactivate alarm line
        	prtAlarmaOut(0);
        }
#endif
    } else if (MemoryMap.var.fuentes.alarma == FNT_MAIN_ALARM_ON) {
 8000d8c:	4b7f      	ldr	r3, [pc, #508]	; (8000f8c <alarmsControl_motor+0x244>)
 8000d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d12d      	bne.n	8000df2 <alarmsControl_motor+0xaa>
        //activate alarm line
    	prtAlarmaOut(1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	487c      	ldr	r0, [pc, #496]	; (8000f90 <alarmsControl_motor+0x248>)
 8000d9e:	f004 fb8f 	bl	80054c0 <HAL_GPIO_WritePin>
        for (i = 0; i < FNT_NUM_FNTS_ADJUST; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	e00a      	b.n	8000dbe <alarmsControl_motor+0x76>
        {
            MemoryMap.var.fuentes.aVoltagePercent[i].fvalue = 0;
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	4a78      	ldr	r2, [pc, #480]	; (8000f8c <alarmsControl_motor+0x244>)
 8000dac:	3312      	adds	r3, #18
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
        for (i = 0; i < FNT_NUM_FNTS_ADJUST; i++)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d9f1      	bls.n	8000da8 <alarmsControl_motor+0x60>
        }
        for (i = 0; i < FNT_NUM_MODULES; i++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	e008      	b.n	8000ddc <alarmsControl_motor+0x94>
        {
            MemoryMap.var.fuentes.aModulos_ON_OFF[i] = 0;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4a6f      	ldr	r2, [pc, #444]	; (8000f8c <alarmsControl_motor+0x244>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        for (i = 0; i < FNT_NUM_MODULES; i++)
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d9f3      	bls.n	8000dca <alarmsControl_motor+0x82>
        }
        if(identif.IdPCB == PCB2)
 8000de2:	4b6c      	ldr	r3, [pc, #432]	; (8000f94 <alarmsControl_motor+0x24c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d103      	bne.n	8000df2 <alarmsControl_motor+0xaa>
        {
            /* if it's PCB2 I don't turn off the digital source */
            MemoryMap.var.fuentes.aModulos_ON_OFF[1] = 1;
 8000dea:	4b68      	ldr	r3, [pc, #416]	; (8000f8c <alarmsControl_motor+0x244>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if (prtInput1_AC_fail == 1) {
            MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente1ACFail = 1;
    }
    else
    {
        MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente1ACFail = 0;
 8000df2:	4a66      	ldr	r2, [pc, #408]	; (8000f8c <alarmsControl_motor+0x244>)
 8000df4:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000df8:	f36f 0341 	bfc	r3, #1, #1
 8000dfc:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
    if (prtInput1_TempFail == 1) {
            MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente1TempFail = 1;
    }
    else
    {
        MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente1TempFail = 0;
 8000e00:	4a62      	ldr	r2, [pc, #392]	; (8000f8c <alarmsControl_motor+0x244>)
 8000e02:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000e06:	f36f 03c3 	bfc	r3, #3, #1
 8000e0a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
    }
    //debControl = prtAlarmaOut;

    //TempFail1
    for (i = 0; i < FNT_NUM_TEMP_FAIL; i++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	e013      	b.n	8000e3c <alarmsControl_motor+0xf4>
        fuentesStatus.atempFail1[i] = prtInput1_TempFail;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	4a60      	ldr	r2, [pc, #384]	; (8000f98 <alarmsControl_motor+0x250>)
 8000e18:	4413      	add	r3, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	709a      	strb	r2, [r3, #2]
        if (fuentesStatus.atempFail1[i] == 1) {
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4a5d      	ldr	r2, [pc, #372]	; (8000f98 <alarmsControl_motor+0x250>)
 8000e22:	4413      	add	r3, r2
 8000e24:	789b      	ldrb	r3, [r3, #2]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <alarmsControl_motor+0xe8>
            //If we see the alarm signal FNT_NUM_TEMP_FAIL consecutive times, we give as alarm
            u8Error = 1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	71bb      	strb	r3, [r7, #6]
 8000e2e:	e002      	b.n	8000e36 <alarmsControl_motor+0xee>

        } else {
            u8Error = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	71bb      	strb	r3, [r7, #6]
            break;
 8000e34:	e005      	b.n	8000e42 <alarmsControl_motor+0xfa>
    for (i = 0; i < FNT_NUM_TEMP_FAIL; i++) {
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	d9e8      	bls.n	8000e14 <alarmsControl_motor+0xcc>
        }
    }
    if (u8Error == 1) {
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d10c      	bne.n	8000e62 <alarmsControl_motor+0x11a>
        //activate alarm line
    	prtAlarmaOut(1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4e:	4850      	ldr	r0, [pc, #320]	; (8000f90 <alarmsControl_motor+0x248>)
 8000e50:	f004 fb36 	bl	80054c0 <HAL_GPIO_WritePin>
        //We notify by protocol that there has been an alarm
        MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente1TempFail = 1;
 8000e54:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <alarmsControl_motor+0x244>)
 8000e56:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
        //Activate alarm flag
        //  fuentesStatus.tempFail1 = 1;
    }

    //TempFail2
    u8Error = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < FNT_NUM_TEMP_FAIL; i++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e013      	b.n	8000e94 <alarmsControl_motor+0x14c>
        fuentesStatus.atempFail2[i] = prtInput2_TempFail;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a4a      	ldr	r2, [pc, #296]	; (8000f98 <alarmsControl_motor+0x250>)
 8000e70:	4413      	add	r3, r2
 8000e72:	2200      	movs	r2, #0
 8000e74:	71da      	strb	r2, [r3, #7]
        if (fuentesStatus.atempFail2[i] == 1) {
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4a47      	ldr	r2, [pc, #284]	; (8000f98 <alarmsControl_motor+0x250>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	79db      	ldrb	r3, [r3, #7]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d102      	bne.n	8000e88 <alarmsControl_motor+0x140>
            //If we see the alarm signal FNT_NUM_TEMP_FAIL consecutive times, we give as alarm
            u8Error = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71bb      	strb	r3, [r7, #6]
 8000e86:	e002      	b.n	8000e8e <alarmsControl_motor+0x146>

        } else {
            u8Error = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	71bb      	strb	r3, [r7, #6]
            break;
 8000e8c:	e005      	b.n	8000e9a <alarmsControl_motor+0x152>
    for (i = 0; i < FNT_NUM_TEMP_FAIL; i++) {
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	3301      	adds	r3, #1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d9e8      	bls.n	8000e6c <alarmsControl_motor+0x124>
        }
    }
    if (u8Error == 1) {
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d106      	bne.n	8000eae <alarmsControl_motor+0x166>
        //We notify by protocol that there has been an alarm
        MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente2TempFail = 1;
 8000ea0:	4a3a      	ldr	r2, [pc, #232]	; (8000f8c <alarmsControl_motor+0x244>)
 8000ea2:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
        //Activate alarm flag
        // fuentesStatus.tempFail2 = 1;
    }

    //FanFail1/2
    switch (fuentesStatus.u8MotorFan) {
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <alarmsControl_motor+0x250>)
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d02d      	beq.n	8000f12 <alarmsControl_motor+0x1ca>
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	dc5d      	bgt.n	8000f76 <alarmsControl_motor+0x22e>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <alarmsControl_motor+0x17c>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d012      	beq.n	8000ee8 <alarmsControl_motor+0x1a0>
 8000ec2:	e058      	b.n	8000f76 <alarmsControl_motor+0x22e>
        case 0:
            //We save the status of the fan signal
            fuentesStatus.afanFail1[0] = prtInput1_FanOK;
 8000ec4:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <alarmsControl_motor+0x250>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	731a      	strb	r2, [r3, #12]
            fuentesStatus.afanFail2[0] = prtInput2_FanOK;
 8000eca:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <alarmsControl_motor+0x250>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	739a      	strb	r2, [r3, #14]

            //We capture refresh time between each measurement
            fuentesStatus.u32fanTimer = TICKS_GetTicks();
 8000ed0:	f002 fcbe 	bl	8003850 <TICKS_GetTicks>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <alarmsControl_motor+0x250>)
 8000ed8:	6113      	str	r3, [r2, #16]
            //We advance to the next state
            fuentesStatus.u8MotorFan++;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <alarmsControl_motor+0x250>)
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <alarmsControl_motor+0x250>)
 8000ee4:	705a      	strb	r2, [r3, #1]
            break;
 8000ee6:	e04b      	b.n	8000f80 <alarmsControl_motor+0x238>

        case 1:
            //We check if the refresh time has expired
            if (TICKS_DiffTicks(fuentesStatus.u32fanTimer) > FNT_TIME_REFRESH_FAN) {
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <alarmsControl_motor+0x250>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fcba 	bl	8003866 <TICKS_DiffTicks>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b0a      	cmp	r3, #10
 8000ef6:	d942      	bls.n	8000f7e <alarmsControl_motor+0x236>
                fuentesStatus.afanFail1[1] = prtInput1_FanOK;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <alarmsControl_motor+0x250>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	735a      	strb	r2, [r3, #13]
                fuentesStatus.afanFail2[1] = prtInput2_FanOK;
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <alarmsControl_motor+0x250>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	73da      	strb	r2, [r3, #15]
                fuentesStatus.u8MotorFan++;
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <alarmsControl_motor+0x250>)
 8000f06:	785b      	ldrb	r3, [r3, #1]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <alarmsControl_motor+0x250>)
 8000f0e:	705a      	strb	r2, [r3, #1]
            }
            break;
 8000f10:	e035      	b.n	8000f7e <alarmsControl_motor+0x236>

        case 2:
            if (fuentesStatus.afanFail1[0] == 0 && fuentesStatus.afanFail1[1] == 0) {
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <alarmsControl_motor+0x250>)
 8000f14:	7b1b      	ldrb	r3, [r3, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10b      	bne.n	8000f32 <alarmsControl_motor+0x1ea>
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <alarmsControl_motor+0x250>)
 8000f1c:	7b5b      	ldrb	r3, [r3, #13]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d107      	bne.n	8000f32 <alarmsControl_motor+0x1ea>
                //We notify by protocol that there has been an alarm
                MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente1FanFail = 1;
 8000f22:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <alarmsControl_motor+0x244>)
 8000f24:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8000f30:	e006      	b.n	8000f40 <alarmsControl_motor+0x1f8>
                //Activate alarm flag
                //   fuentesStatus.fanFail1 = 1;
            }
            else
            {
                MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente1FanFail = 0;
 8000f32:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <alarmsControl_motor+0x244>)
 8000f34:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000f38:	f36f 1345 	bfc	r3, #5, #1
 8000f3c:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            }

            if (fuentesStatus.afanFail2[0] == 0 && fuentesStatus.afanFail2[1] == 0) {
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <alarmsControl_motor+0x250>)
 8000f42:	7b9b      	ldrb	r3, [r3, #14]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10b      	bne.n	8000f60 <alarmsControl_motor+0x218>
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <alarmsControl_motor+0x250>)
 8000f4a:	7bdb      	ldrb	r3, [r3, #15]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d107      	bne.n	8000f60 <alarmsControl_motor+0x218>
                //We notify by protocol that there has been an alarm
                MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente2FanFail = 1;
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <alarmsControl_motor+0x244>)
 8000f52:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8000f5e:	e006      	b.n	8000f6e <alarmsControl_motor+0x226>
                //Activate alarm flag
                //   fuentesStatus.fanFail1 = 1;
            }
            else
            {
                MemoryMap.var.cabecera_fw.board_alarms.bit_field.fuente2FanFail = 0;
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <alarmsControl_motor+0x244>)
 8000f62:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000f66:	f36f 1386 	bfc	r3, #6, #1
 8000f6a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            }
            //We return to the initial state
            fuentesStatus.u8MotorFan = 0;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <alarmsControl_motor+0x250>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	705a      	strb	r2, [r3, #1]
            break;
 8000f74:	e004      	b.n	8000f80 <alarmsControl_motor+0x238>


        default:
            //We return to the initial state
            fuentesStatus.u8MotorFan = 0;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <alarmsControl_motor+0x250>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	705a      	strb	r2, [r3, #1]
            break;
 8000f7c:	e000      	b.n	8000f80 <alarmsControl_motor+0x238>
            break;
 8000f7e:	bf00      	nop

    }


}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	20000234 	.word	0x20000234
 8000f90:	40020400 	.word	0x40020400
 8000f94:	2000002c 	.word	0x2000002c
 8000f98:	20000030 	.word	0x20000030

08000f9c <CTR_fuentes_ON_OFF_init>:

void CTR_fuentes_ON_OFF_init(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

    //Initialize the source engine
    fuentes_ON_OFF.u8Motor = 0;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <CTR_fuentes_ON_OFF_init+0x14>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]

}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	2000009c 	.word	0x2000009c

08000fb4 <CTR_fuentes_ON_OFF_motor>:

void CTR_fuentes_ON_OFF_motor(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

    switch (fuentes_ON_OFF.u8Motor) {
 8000fb8:	4b9b      	ldr	r3, [pc, #620]	; (8001228 <CTR_fuentes_ON_OFF_motor+0x274>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	f000 8120 	beq.w	8001202 <CTR_fuentes_ON_OFF_motor+0x24e>
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	f300 81c4 	bgt.w	8001350 <CTR_fuentes_ON_OFF_motor+0x39c>
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <CTR_fuentes_ON_OFF_motor+0x1e>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d00c      	beq.n	8000fea <CTR_fuentes_ON_OFF_motor+0x36>
 8000fd0:	e1be      	b.n	8001350 <CTR_fuentes_ON_OFF_motor+0x39c>
        case 0:
            //We capture refresh time between each measurement
            fuentes_ON_OFF.u32Timer = TICKS_GetTicks();
 8000fd2:	f002 fc3d 	bl	8003850 <TICKS_GetTicks>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a93      	ldr	r2, [pc, #588]	; (8001228 <CTR_fuentes_ON_OFF_motor+0x274>)
 8000fda:	6053      	str	r3, [r2, #4]
            //We advance to the next state
            fuentes_ON_OFF.u8Motor++;
 8000fdc:	4b92      	ldr	r3, [pc, #584]	; (8001228 <CTR_fuentes_ON_OFF_motor+0x274>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b90      	ldr	r3, [pc, #576]	; (8001228 <CTR_fuentes_ON_OFF_motor+0x274>)
 8000fe6:	701a      	strb	r2, [r3, #0]
            break;
 8000fe8:	e1b7      	b.n	800135a <CTR_fuentes_ON_OFF_motor+0x3a6>

        case 1:
            //We check if the refresh time has expired
            if (TICKS_DiffTicks(fuentes_ON_OFF.u32Timer) > TIME_REFRESH_FUENTES_ON_OFF) {
 8000fea:	4b8f      	ldr	r3, [pc, #572]	; (8001228 <CTR_fuentes_ON_OFF_motor+0x274>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fc39 	bl	8003866 <TICKS_DiffTicks>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b0a      	cmp	r3, #10
 8000ff8:	f240 81ae 	bls.w	8001358 <CTR_fuentes_ON_OFF_motor+0x3a4>

                //void CTR_fuentes_ON_OFF(void) {

                if (standby.fuentesHab.digital == 1 && (MemoryMap.var.fuentes.aModulos_ON_OFF[FNT_MOD_FIXED1] == 1)) {//0b00000001) { //&&protocol  
 8000ffc:	4b8b      	ldr	r3, [pc, #556]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8000ffe:	7a5b      	ldrb	r3, [r3, #9]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d108      	bne.n	8001016 <CTR_fuentes_ON_OFF_motor+0x62>
 8001004:	4b8a      	ldr	r3, [pc, #552]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 8001006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800100a:	2b01      	cmp	r3, #1
 800100c:	d103      	bne.n	8001016 <CTR_fuentes_ON_OFF_motor+0x62>
                    standby.fuentesOn.digital = 1;
 800100e:	4b87      	ldr	r3, [pc, #540]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001010:	2201      	movs	r2, #1
 8001012:	735a      	strb	r2, [r3, #13]
 8001014:	e010      	b.n	8001038 <CTR_fuentes_ON_OFF_motor+0x84>
                } else if (standby.fuentesHab.digital == 0 || ((MemoryMap.var.fuentes.aModulos_ON_OFF[FNT_MOD_FIXED1] == 0) && (MemoryMap.var.fuentes.mainStatus != 0))) {
 8001016:	4b85      	ldr	r3, [pc, #532]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001018:	7a5b      	ldrb	r3, [r3, #9]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d009      	beq.n	8001032 <CTR_fuentes_ON_OFF_motor+0x7e>
 800101e:	4b84      	ldr	r3, [pc, #528]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 8001020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001024:	2b00      	cmp	r3, #0
 8001026:	d107      	bne.n	8001038 <CTR_fuentes_ON_OFF_motor+0x84>
 8001028:	4b81      	ldr	r3, [pc, #516]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 800102a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <CTR_fuentes_ON_OFF_motor+0x84>
                    standby.fuentesOn.digital = 0;
 8001032:	4b7e      	ldr	r3, [pc, #504]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001034:	2200      	movs	r2, #0
 8001036:	735a      	strb	r2, [r3, #13]
                }

                if (standby.fuentesHab.motor == 1 && (MemoryMap.var.fuentes.aModulos_ON_OFF[FNT_MOD_FIXED2] == 1)) { //&&protocol
 8001038:	4b7c      	ldr	r3, [pc, #496]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 800103a:	7a9b      	ldrb	r3, [r3, #10]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d108      	bne.n	8001052 <CTR_fuentes_ON_OFF_motor+0x9e>
 8001040:	4b7b      	ldr	r3, [pc, #492]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 8001042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001046:	2b01      	cmp	r3, #1
 8001048:	d103      	bne.n	8001052 <CTR_fuentes_ON_OFF_motor+0x9e>
                    standby.fuentesOn.motor = 1;
 800104a:	4b78      	ldr	r3, [pc, #480]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 800104c:	2201      	movs	r2, #1
 800104e:	739a      	strb	r2, [r3, #14]
 8001050:	e010      	b.n	8001074 <CTR_fuentes_ON_OFF_motor+0xc0>
                } else if (standby.fuentesHab.motor == 0 || ((MemoryMap.var.fuentes.aModulos_ON_OFF[FNT_MOD_FIXED2] == 0) && (MemoryMap.var.fuentes.mainStatus != 0))) {
 8001052:	4b76      	ldr	r3, [pc, #472]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001054:	7a9b      	ldrb	r3, [r3, #10]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <CTR_fuentes_ON_OFF_motor+0xba>
 800105a:	4b75      	ldr	r3, [pc, #468]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 800105c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001060:	2b00      	cmp	r3, #0
 8001062:	d107      	bne.n	8001074 <CTR_fuentes_ON_OFF_motor+0xc0>
 8001064:	4b72      	ldr	r3, [pc, #456]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 8001066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <CTR_fuentes_ON_OFF_motor+0xc0>
                    standby.fuentesOn.motor = 0;
 800106e:	4b6f      	ldr	r3, [pc, #444]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001070:	2200      	movs	r2, #0
 8001072:	739a      	strb	r2, [r3, #14]
                }

                if (standby.fuentesHab.apl1 == 1 && (MemoryMap.var.fuentes.aModulos_ON_OFF[FNT_MOD_ADJUSTABLE1] == 1)) { //&&protocol
 8001074:	4b6d      	ldr	r3, [pc, #436]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001076:	7adb      	ldrb	r3, [r3, #11]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d108      	bne.n	800108e <CTR_fuentes_ON_OFF_motor+0xda>
 800107c:	4b6c      	ldr	r3, [pc, #432]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 800107e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001082:	2b01      	cmp	r3, #1
 8001084:	d103      	bne.n	800108e <CTR_fuentes_ON_OFF_motor+0xda>
                    standby.fuentesOn.apl1 = 1;
 8001086:	4b69      	ldr	r3, [pc, #420]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001088:	2201      	movs	r2, #1
 800108a:	73da      	strb	r2, [r3, #15]
 800108c:	e010      	b.n	80010b0 <CTR_fuentes_ON_OFF_motor+0xfc>
                } else if (standby.fuentesHab.apl1 == 0 || ((MemoryMap.var.fuentes.aModulos_ON_OFF[FNT_MOD_ADJUSTABLE1] == 0) && (MemoryMap.var.fuentes.mainStatus != 0))) {
 800108e:	4b67      	ldr	r3, [pc, #412]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001090:	7adb      	ldrb	r3, [r3, #11]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d009      	beq.n	80010aa <CTR_fuentes_ON_OFF_motor+0xf6>
 8001096:	4b66      	ldr	r3, [pc, #408]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 8001098:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800109c:	2b00      	cmp	r3, #0
 800109e:	d107      	bne.n	80010b0 <CTR_fuentes_ON_OFF_motor+0xfc>
 80010a0:	4b63      	ldr	r3, [pc, #396]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 80010a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <CTR_fuentes_ON_OFF_motor+0xfc>
                    standby.fuentesOn.apl1 = 0;
 80010aa:	4b60      	ldr	r3, [pc, #384]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	73da      	strb	r2, [r3, #15]
                }

                if (standby.fuentesHab.apl2 == 1 && (MemoryMap.var.fuentes.aModulos_ON_OFF[FNT_MOD_ADJUSTABLE2] == 1)) { //&&protocol
 80010b0:	4b5e      	ldr	r3, [pc, #376]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 80010b2:	7b1b      	ldrb	r3, [r3, #12]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d108      	bne.n	80010ca <CTR_fuentes_ON_OFF_motor+0x116>
 80010b8:	4b5d      	ldr	r3, [pc, #372]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 80010ba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d103      	bne.n	80010ca <CTR_fuentes_ON_OFF_motor+0x116>
                    standby.fuentesOn.apl2 = 1;
 80010c2:	4b5a      	ldr	r3, [pc, #360]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	741a      	strb	r2, [r3, #16]
 80010c8:	e010      	b.n	80010ec <CTR_fuentes_ON_OFF_motor+0x138>
                } else if (standby.fuentesHab.apl2 == 0 || ((MemoryMap.var.fuentes.aModulos_ON_OFF[FNT_MOD_ADJUSTABLE2] == 0) && (MemoryMap.var.fuentes.mainStatus != 0))) {
 80010ca:	4b58      	ldr	r3, [pc, #352]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 80010cc:	7b1b      	ldrb	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <CTR_fuentes_ON_OFF_motor+0x132>
 80010d2:	4b57      	ldr	r3, [pc, #348]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 80010d4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d107      	bne.n	80010ec <CTR_fuentes_ON_OFF_motor+0x138>
 80010dc:	4b54      	ldr	r3, [pc, #336]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 80010de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <CTR_fuentes_ON_OFF_motor+0x138>
                    standby.fuentesOn.apl2 = 0;
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	741a      	strb	r2, [r3, #16]
                }

                standby.fuentesOn.digital = 1; // iii
 80010ec:	4b4f      	ldr	r3, [pc, #316]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	735a      	strb	r2, [r3, #13]
                standby.fuentesOn.motor = 1;
 80010f2:	4b4e      	ldr	r3, [pc, #312]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	739a      	strb	r2, [r3, #14]
                standby.fuentesOn.apl1 = 1;
 80010f8:	4b4c      	ldr	r3, [pc, #304]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	73da      	strb	r2, [r3, #15]
                standby.fuentesOn.apl2 = 1;
 80010fe:	4b4b      	ldr	r3, [pc, #300]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001100:	2201      	movs	r2, #1
 8001102:	741a      	strb	r2, [r3, #16]
                //We update the status of the modules
                if (standby.fuentesOn.digital == 1) {
 8001104:	4b49      	ldr	r3, [pc, #292]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001106:	7b5b      	ldrb	r3, [r3, #13]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d105      	bne.n	8001118 <CTR_fuentes_ON_OFF_motor+0x164>
                    //The 24V digital module is also turned on by pressing the standby button
                    prtEN_FA_DigitalN(0); //24V digital module on
 800110c:	2200      	movs	r2, #0
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	4848      	ldr	r0, [pc, #288]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 8001112:	f004 f9d5 	bl	80054c0 <HAL_GPIO_WritePin>
 8001116:	e004      	b.n	8001122 <CTR_fuentes_ON_OFF_motor+0x16e>
                } else {
                    prtEN_FA_DigitalN(1); //24V digital module off
 8001118:	2201      	movs	r2, #1
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	4845      	ldr	r0, [pc, #276]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 800111e:	f004 f9cf 	bl	80054c0 <HAL_GPIO_WritePin>
                }

                if (standby.fuentesOn.motor == 1) {
 8001122:	4b42      	ldr	r3, [pc, #264]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001124:	7b9b      	ldrb	r3, [r3, #14]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d105      	bne.n	8001136 <CTR_fuentes_ON_OFF_motor+0x182>
                    prtEN_FA_MotorN(0); //motor module on
 800112a:	2200      	movs	r2, #0
 800112c:	2102      	movs	r1, #2
 800112e:	4842      	ldr	r0, [pc, #264]	; (8001238 <CTR_fuentes_ON_OFF_motor+0x284>)
 8001130:	f004 f9c6 	bl	80054c0 <HAL_GPIO_WritePin>
 8001134:	e004      	b.n	8001140 <CTR_fuentes_ON_OFF_motor+0x18c>
                } else {
                    prtEN_FA_MotorN(1); //motor module off
 8001136:	2201      	movs	r2, #1
 8001138:	2102      	movs	r1, #2
 800113a:	483f      	ldr	r0, [pc, #252]	; (8001238 <CTR_fuentes_ON_OFF_motor+0x284>)
 800113c:	f004 f9c0 	bl	80054c0 <HAL_GPIO_WritePin>
                }

                if (standby.fuentesOn.apl1 == 1) {
 8001140:	4b3a      	ldr	r3, [pc, #232]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 8001142:	7bdb      	ldrb	r3, [r3, #15]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d028      	beq.n	800119a <CTR_fuentes_ON_OFF_motor+0x1e6>
                    //We turn on the peltier modules in the spi motor, after updating the DAC
                } else {

                    //prtEN_Apl1n = 0; Peltiers module 1 off The logic of the signal has been changed
                	if (frame.field.header.u8AddrSlave == 1) {
 8001148:	4b3c      	ldr	r3, [pc, #240]	; (800123c <CTR_fuentes_ON_OFF_motor+0x288>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10c      	bne.n	800116a <CTR_fuentes_ON_OFF_motor+0x1b6>
						prtEN_Apl1n(1); //Peltier module 1 off
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	4837      	ldr	r0, [pc, #220]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 8001158:	f004 f9b2 	bl	80054c0 <HAL_GPIO_WritePin>
						prtEN_Apl2n(1);
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001162:	4834      	ldr	r0, [pc, #208]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 8001164:	f004 f9ac 	bl	80054c0 <HAL_GPIO_WritePin>
 8001168:	e00f      	b.n	800118a <CTR_fuentes_ON_OFF_motor+0x1d6>
                	} else if (frame.field.header.u8AddrSlave == 2) {
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <CTR_fuentes_ON_OFF_motor+0x288>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d10b      	bne.n	800118a <CTR_fuentes_ON_OFF_motor+0x1d6>
						prtEN_Apl5n(1);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001178:	482e      	ldr	r0, [pc, #184]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 800117a:	f004 f9a1 	bl	80054c0 <HAL_GPIO_WritePin>
						prtEN_Apl6n(1);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001184:	482b      	ldr	r0, [pc, #172]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 8001186:	f004 f99b 	bl	80054c0 <HAL_GPIO_WritePin>
                	}

                    /* we set the set points to 0 */
                    MemoryMap.var.fuentes.aVoltagePercent[0].fvalue = 0; //iii TODO
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	649a      	str	r2, [r3, #72]	; 0x48
                    MemoryMap.var.fuentes.aVoltagePercent[1].fvalue = 0;
 8001192:	4b27      	ldr	r3, [pc, #156]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	64da      	str	r2, [r3, #76]	; 0x4c
                }

                if (standby.fuentesOn.apl2 == 1) {
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <CTR_fuentes_ON_OFF_motor+0x278>)
 800119c:	7c1b      	ldrb	r3, [r3, #16]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d028      	beq.n	80011f4 <CTR_fuentes_ON_OFF_motor+0x240>
                    //We turn on the peltier modules in the spi motor, after updating the DAC
                } else {

                    //prtEN_Apl2n = 0; //Peltiers module 2 off The logic of the signal has been changed
                	if (frame.field.header.u8AddrSlave == 1) {
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <CTR_fuentes_ON_OFF_motor+0x288>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10c      	bne.n	80011c4 <CTR_fuentes_ON_OFF_motor+0x210>
						prtEN_Apl3n(1); //Peltier module 1 off
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b0:	4820      	ldr	r0, [pc, #128]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 80011b2:	f004 f985 	bl	80054c0 <HAL_GPIO_WritePin>
						prtEN_Apl4n(1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011bc:	481d      	ldr	r0, [pc, #116]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 80011be:	f004 f97f 	bl	80054c0 <HAL_GPIO_WritePin>
 80011c2:	e00f      	b.n	80011e4 <CTR_fuentes_ON_OFF_motor+0x230>
                	} else if (frame.field.header.u8AddrSlave == 2) {
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <CTR_fuentes_ON_OFF_motor+0x288>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d10b      	bne.n	80011e4 <CTR_fuentes_ON_OFF_motor+0x230>
						prtEN_Apl7n(1);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d2:	4818      	ldr	r0, [pc, #96]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 80011d4:	f004 f974 	bl	80054c0 <HAL_GPIO_WritePin>
						prtEN_Apl8n(1);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011de:	4815      	ldr	r0, [pc, #84]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 80011e0:	f004 f96e 	bl	80054c0 <HAL_GPIO_WritePin>
                	}

                    /* we set the set points to 0 */
                    MemoryMap.var.fuentes.aVoltagePercent[2].fvalue = 0;  //iii TODO
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	651a      	str	r2, [r3, #80]	; 0x50
                    MemoryMap.var.fuentes.aVoltagePercent[3].fvalue = 0;
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	655a      	str	r2, [r3, #84]	; 0x54
                }

                //We advance to the next state
                fuentes_ON_OFF.u8Motor++;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <CTR_fuentes_ON_OFF_motor+0x274>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <CTR_fuentes_ON_OFF_motor+0x274>)
 80011fe:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001200:	e0aa      	b.n	8001358 <CTR_fuentes_ON_OFF_motor+0x3a4>
            //We update the state variables of the protocol modules TODO update pins with read macro!
#ifndef INVERT_LOGIC_ENABLE
//          MemoryMap.var.fuentes.estadoModulos = (uint8_t) (((!prtEN_Apl2n) << 3) | ((!prtEN_Apl1n) << 2) | ((!prtEN_FA_MotorN) << 1) | (!prtEN_FA_DigitalN));
#else
//          MemoryMap.var.fuentes.estadoModulos = (uint8_t) (((prtEN_Apl2n) << 3) | ((prtEN_Apl1n) << 2) | ((!prtEN_FA_MotorN) << 1) | (!prtEN_FA_DigitalN)); //enable signal logic changed
        	if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)) MemoryMap.var.fuentes.estadoModulos |= (1<<3); else MemoryMap.var.fuentes.estadoModulos &= ~(1<<3); //prtEN_Apl2n
 8001202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <CTR_fuentes_ON_OFF_motor+0x280>)
 8001208:	f004 f942 	bl	8005490 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d016      	beq.n	8001240 <CTR_fuentes_ON_OFF_motor+0x28c>
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 8001214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <CTR_fuentes_ON_OFF_motor+0x27c>)
 8001220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001224:	e015      	b.n	8001252 <CTR_fuentes_ON_OFF_motor+0x29e>
 8001226:	bf00      	nop
 8001228:	2000009c 	.word	0x2000009c
 800122c:	20000214 	.word	0x20000214
 8001230:	20000234 	.word	0x20000234
 8001234:	40021000 	.word	0x40021000
 8001238:	40020400 	.word	0x40020400
 800123c:	200000e8 	.word	0x200000e8
 8001240:	4b47      	ldr	r3, [pc, #284]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001246:	f023 0308 	bic.w	r3, r3, #8
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b44      	ldr	r3, [pc, #272]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 800124e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        	if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)) MemoryMap.var.fuentes.estadoModulos |= (1<<2); else MemoryMap.var.fuentes.estadoModulos &= ~(1<<2); //prtEN_Apl1n
 8001252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001256:	4843      	ldr	r0, [pc, #268]	; (8001364 <CTR_fuentes_ON_OFF_motor+0x3b0>)
 8001258:	f004 f91a 	bl	8005490 <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <CTR_fuentes_ON_OFF_motor+0x2c2>
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001274:	e008      	b.n	8001288 <CTR_fuentes_ON_OFF_motor+0x2d4>
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)) MemoryMap.var.fuentes.estadoModulos |= (1<<1); else MemoryMap.var.fuentes.estadoModulos &= ~(1<<1);  //prtEN_FA_MotorN
 8001288:	2102      	movs	r1, #2
 800128a:	4837      	ldr	r0, [pc, #220]	; (8001368 <CTR_fuentes_ON_OFF_motor+0x3b4>)
 800128c:	f004 f900 	bl	8005490 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d009      	beq.n	80012aa <CTR_fuentes_ON_OFF_motor+0x2f6>
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 80012a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80012a8:	e008      	b.n	80012bc <CTR_fuentes_ON_OFF_motor+0x308>
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 80012ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012b0:	f023 0302 	bic.w	r3, r3, #2
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 80012b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        	if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7)) MemoryMap.var.fuentes.estadoModulos |= (1<<0); else MemoryMap.var.fuentes.estadoModulos &= ~(1<<0); //prtEN_FA_DigitalN
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	4829      	ldr	r0, [pc, #164]	; (8001364 <CTR_fuentes_ON_OFF_motor+0x3b0>)
 80012c0:	f004 f8e6 	bl	8005490 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <CTR_fuentes_ON_OFF_motor+0x32a>
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 80012cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 80012d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80012dc:	e008      	b.n	80012f0 <CTR_fuentes_ON_OFF_motor+0x33c>
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 80012e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 80012ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

#endif

            //We update the power goods
// TODO           MemoryMap.var.fuentes.powerGoods = (uint8_t) (((!prtPG_Plt2n) << 2) | ((!prtPG_Plt1n) << 1) | (!prtEN_FA_DigitalN));
        	if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7)) MemoryMap.var.fuentes.powerGoods &= ~(1<<0); else MemoryMap.var.fuentes.powerGoods |= (1<<0);
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	481c      	ldr	r0, [pc, #112]	; (8001364 <CTR_fuentes_ON_OFF_motor+0x3b0>)
 80012f4:	f004 f8cc 	bl	8005490 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d009      	beq.n	8001312 <CTR_fuentes_ON_OFF_motor+0x35e>
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001300:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 800130c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001310:	e008      	b.n	8001324 <CTR_fuentes_ON_OFF_motor+0x370>
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001314:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        	if (prtPG_Plt1n && prtPG_Plt1n && prtPG_Plt1n && prtPG_Plt1n) MemoryMap.var.fuentes.powerGoods &= ~(1<<1); else MemoryMap.var.fuentes.powerGoods |= (1<<1); //prtPG_Plt1n old
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001326:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        	if (prtPG_Plt1n && prtPG_Plt1n && prtPG_Plt1n && prtPG_Plt1n) MemoryMap.var.fuentes.powerGoods &= ~(1<<2); else MemoryMap.var.fuentes.powerGoods |= (1<<2); //prtPG_Plt1n old
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001338:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <CTR_fuentes_ON_OFF_motor+0x3ac>)
 8001344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

            //We return to the initial state
            fuentes_ON_OFF.u8Motor = 0;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <CTR_fuentes_ON_OFF_motor+0x3b8>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
            break;
 800134e:	e004      	b.n	800135a <CTR_fuentes_ON_OFF_motor+0x3a6>



        default:
            //We return to the initial state
            fuentes_ON_OFF.u8Motor = 0;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <CTR_fuentes_ON_OFF_motor+0x3b8>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
            break;
 8001356:	e000      	b.n	800135a <CTR_fuentes_ON_OFF_motor+0x3a6>
            break;
 8001358:	bf00      	nop

    }

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000234 	.word	0x20000234
 8001364:	40021000 	.word	0x40021000
 8001368:	40020400 	.word	0x40020400
 800136c:	2000009c 	.word	0x2000009c

08001370 <appSPI_init>:

/* adjustable font settings */
void appSPI_init(void) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0

    uint8_t i;

    //We initialize with 0V to send to the SPI
    for (i = 0; i < MAX_NUM_SPI_CH; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e020      	b.n	80013be <appSPI_init+0x4e>
        SPIst.SPI_CH[i].enviar[0] = 0b00110000;
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	4919      	ldr	r1, [pc, #100]	; (80013e4 <appSPI_init+0x74>)
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	330b      	adds	r3, #11
 800138c:	2230      	movs	r2, #48	; 0x30
 800138e:	701a      	strb	r2, [r3, #0]
        SPIst.SPI_CH[i].enviar[1] = 0b00000000;
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	4914      	ldr	r1, [pc, #80]	; (80013e4 <appSPI_init+0x74>)
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	330c      	adds	r3, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
        SPIst.SPI_CH[i].enviar[2] = 0b00000000;
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	490f      	ldr	r1, [pc, #60]	; (80013e4 <appSPI_init+0x74>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	330d      	adds	r3, #13
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_NUM_SPI_CH; i++) {
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	3301      	adds	r3, #1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d9db      	bls.n	800137c <appSPI_init+0xc>
    }

    //We initialize the SPI application engine
    SPIst.u8Motor = 0;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <appSPI_init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]

    //We initialize the channel to send
    SPIst.u8ActCH = 0;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <appSPI_init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]

    testNum = 0; //debug
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <appSPI_init+0x78>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000044 	.word	0x20000044
 80013e8:	200000a4 	.word	0x200000a4
 80013ec:	00000000 	.word	0x00000000

080013f0 <appSPI_motor>:




void appSPI_motor(void) {
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
const uint8_t DAC_channel_num_wrapper [8] = {6, 7, 0, 1, 2, 3, 4, 5};
 80013f6:	4aae      	ldr	r2, [pc, #696]	; (80016b0 <appSPI_motor+0x2c0>)
 80013f8:	463b      	mov	r3, r7
 80013fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013fe:	e883 0003 	stmia.w	r3, {r0, r1}

        for (i=0; i<MAX_NUM_SPI_CH; i++)
 8001402:	4bac      	ldr	r3, [pc, #688]	; (80016b4 <appSPI_motor+0x2c4>)
 8001404:	2200      	movs	r2, #0
 8001406:	801a      	strh	r2, [r3, #0]
 8001408:	e1e9      	b.n	80017de <appSPI_motor+0x3ee>
        {
                //Faltaaa
                //We load the protocol values ??to our SPI variable
                SPIst.SPI_CH[i].f_vPer = MemoryMap.var.fuentes.aVoltagePercent[i].fvalue;
 800140a:	4baa      	ldr	r3, [pc, #680]	; (80016b4 <appSPI_motor+0x2c4>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	4619      	mov	r1, r3
 8001410:	4ba8      	ldr	r3, [pc, #672]	; (80016b4 <appSPI_motor+0x2c4>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	4aa8      	ldr	r2, [pc, #672]	; (80016b8 <appSPI_motor+0x2c8>)
 8001418:	f101 0312 	add.w	r3, r1, #18
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	49a6      	ldr	r1, [pc, #664]	; (80016bc <appSPI_motor+0x2cc>)
 8001424:	4603      	mov	r3, r0
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4403      	add	r3, r0
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3318      	adds	r3, #24
 8001430:	601a      	str	r2, [r3, #0]
                //Let's see if we have the module on
                //We calculate the value to send by the SPI

        		if (SPIst.SPI_CH[i].f_vPer <= 100) {
 8001432:	4ba0      	ldr	r3, [pc, #640]	; (80016b4 <appSPI_motor+0x2c4>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	4aa0      	ldr	r2, [pc, #640]	; (80016bc <appSPI_motor+0x2cc>)
 800143a:	460b      	mov	r3, r1
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3318      	adds	r3, #24
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80016c0 <appSPI_motor+0x2d0>
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	d862      	bhi.n	800151e <appSPI_motor+0x12e>
        			if (SPIst.SPI_CH[i].f_vPer >= 5) {
 8001458:	4b96      	ldr	r3, [pc, #600]	; (80016b4 <appSPI_motor+0x2c4>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	4a97      	ldr	r2, [pc, #604]	; (80016bc <appSPI_motor+0x2cc>)
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3318      	adds	r3, #24
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	db42      	blt.n	8001504 <appSPI_motor+0x114>
    					//Rule of three: vTrim = vPer*0x0FFF/100 = vPer*4095/100
                        //The source gives 13V instead of 12V when we program the maximum value,
                        //the new maximum is 3780 accounts instead of 4095. vTrim = vPer*3780/100
                        SPIst.SPI_CH[i].f_vTrim = SPIst.SPI_CH[i].f_vPer * 655.35;
 800147e:	4b8d      	ldr	r3, [pc, #564]	; (80016b4 <appSPI_motor+0x2c4>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	4a8d      	ldr	r2, [pc, #564]	; (80016bc <appSPI_motor+0x2cc>)
 8001486:	460b      	mov	r3, r1
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	3318      	adds	r3, #24
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f925 	bl	80006e4 <__aeabi_f2d>
 800149a:	a383      	add	r3, pc, #524	; (adr r3, 80016a8 <appSPI_motor+0x2b8>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7fe fe92 	bl	80001c8 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4982      	ldr	r1, [pc, #520]	; (80016b4 <appSPI_motor+0x2c4>)
 80014aa:	8809      	ldrh	r1, [r1, #0]
 80014ac:	460c      	mov	r4, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff f96f 	bl	8000794 <__aeabi_d2f>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4980      	ldr	r1, [pc, #512]	; (80016bc <appSPI_motor+0x2cc>)
 80014ba:	4623      	mov	r3, r4
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4423      	add	r3, r4
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	3314      	adds	r3, #20
 80014c6:	601a      	str	r2, [r3, #0]
                        SPIst.SPI_CH[i].u16vTrim = (uint16_t) SPIst.SPI_CH[i].f_vTrim;
 80014c8:	4b7a      	ldr	r3, [pc, #488]	; (80016b4 <appSPI_motor+0x2c4>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4a7b      	ldr	r2, [pc, #492]	; (80016bc <appSPI_motor+0x2cc>)
 80014d0:	460b      	mov	r3, r1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3314      	adds	r3, #20
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	4b74      	ldr	r3, [pc, #464]	; (80016b4 <appSPI_motor+0x2c4>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ea:	ee17 3a90 	vmov	r3, s15
 80014ee:	b298      	uxth	r0, r3
 80014f0:	4a72      	ldr	r2, [pc, #456]	; (80016bc <appSPI_motor+0x2cc>)
 80014f2:	460b      	mov	r3, r1
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	330e      	adds	r3, #14
 80014fe:	4602      	mov	r2, r0
 8001500:	801a      	strh	r2, [r3, #0]
 8001502:	e018      	b.n	8001536 <appSPI_motor+0x146>
                    } else {
    					//If they program below the minimum, we program 0 and turn off the source module
                        //if both peltier modules are below the minimum
                		SPIst.SPI_CH[i].u16vTrim = 0;
 8001504:	4b6b      	ldr	r3, [pc, #428]	; (80016b4 <appSPI_motor+0x2c4>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	4a6c      	ldr	r2, [pc, #432]	; (80016bc <appSPI_motor+0x2cc>)
 800150c:	460b      	mov	r3, r1
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	330e      	adds	r3, #14
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]
 800151c:	e00b      	b.n	8001536 <appSPI_motor+0x146>
                    //Missing: Turn off the module and turn it on the first time we program if the standby is ok
        			}
        		} else {
                    //If they program above the maximum, we program the maximum
                		SPIst.SPI_CH[i].u16vTrim = 100;
 800151e:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <appSPI_motor+0x2c4>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	4a65      	ldr	r2, [pc, #404]	; (80016bc <appSPI_motor+0x2cc>)
 8001526:	460b      	mov	r3, r1
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	330e      	adds	r3, #14
 8001532:	2264      	movs	r2, #100	; 0x64
 8001534:	801a      	strh	r2, [r3, #0]
        		}

        		if (frame.field.header.u8AddrSlave == 2) // of board 2, shift to another 4 dac channels
 8001536:	4b63      	ldr	r3, [pc, #396]	; (80016c4 <appSPI_motor+0x2d4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d116      	bne.n	800156c <appSPI_motor+0x17c>
        			AD5676_Update_DAC_Channel_N(DAC_channel_num_wrapper[i + MAX_NUM_SPI_CH], SPIst.SPI_CH[i].u16vTrim);
 800153e:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <appSPI_motor+0x2c4>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	3304      	adds	r3, #4
 8001544:	3308      	adds	r3, #8
 8001546:	443b      	add	r3, r7
 8001548:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800154c:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <appSPI_motor+0x2c4>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	495a      	ldr	r1, [pc, #360]	; (80016bc <appSPI_motor+0x2cc>)
 8001554:	4603      	mov	r3, r0
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4403      	add	r3, r0
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	330e      	adds	r3, #14
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4610      	mov	r0, r2
 8001566:	f7ff fb79 	bl	8000c5c <AD5676_Update_DAC_Channel_N>
 800156a:	e014      	b.n	8001596 <appSPI_motor+0x1a6>
        		else
        			AD5676_Update_DAC_Channel_N(DAC_channel_num_wrapper[i], SPIst.SPI_CH[i].u16vTrim);
 800156c:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <appSPI_motor+0x2c4>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	3308      	adds	r3, #8
 8001572:	443b      	add	r3, r7
 8001574:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001578:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <appSPI_motor+0x2c4>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	494f      	ldr	r1, [pc, #316]	; (80016bc <appSPI_motor+0x2cc>)
 8001580:	4603      	mov	r3, r0
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4403      	add	r3, r0
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	330e      	adds	r3, #14
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	4619      	mov	r1, r3
 8001590:	4610      	mov	r0, r2
 8001592:	f7ff fb63 	bl	8000c5c <AD5676_Update_DAC_Channel_N>


                //We see if we have to turn on or turn off any module

        		if (frame.field.header.u8AddrSlave == 1)
 8001596:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <appSPI_motor+0x2d4>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	f040 8098 	bne.w	80016d0 <appSPI_motor+0x2e0>
        		{
					  if (SPIst.SPI_CH[i].u16vTrim == 0)
 80015a0:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <appSPI_motor+0x2c4>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4a45      	ldr	r2, [pc, #276]	; (80016bc <appSPI_motor+0x2cc>)
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	330e      	adds	r3, #14
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d13f      	bne.n	800163a <appSPI_motor+0x24a>
					  {
							//If the two peltier modules have been programmed below the minimum, we turn off the corresponding module
							if ((i == 0 || i == 1))//&& prtEN_Apl1n == 0) {
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <appSPI_motor+0x2c4>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <appSPI_motor+0x1da>
 80015c2:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <appSPI_motor+0x2c4>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d116      	bne.n	80015f8 <appSPI_motor+0x208>
							{
								//We see that the other peltiers module also has 0 programmed
								if (SPIst.SPI_CH[0].u16vTrim == 0 && SPIst.SPI_CH[1].u16vTrim == 0)
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <appSPI_motor+0x2cc>)
 80015cc:	89db      	ldrh	r3, [r3, #14]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 80fc 	bne.w	80017cc <appSPI_motor+0x3dc>
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <appSPI_motor+0x2cc>)
 80015d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f040 80f7 	bne.w	80017cc <appSPI_motor+0x3dc>
								{
									//We turn off the module
									//prtEN_Apl1n = 0; //the logic of the enable signal has been changed
									prtEN_Apl1n(1); //Peltier module 1 OFF
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e4:	4838      	ldr	r0, [pc, #224]	; (80016c8 <appSPI_motor+0x2d8>)
 80015e6:	f003 ff6b 	bl	80054c0 <HAL_GPIO_WritePin>
									prtEN_Apl2n(1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f0:	4835      	ldr	r0, [pc, #212]	; (80016c8 <appSPI_motor+0x2d8>)
 80015f2:	f003 ff65 	bl	80054c0 <HAL_GPIO_WritePin>
								if (SPIst.SPI_CH[0].u16vTrim == 0 && SPIst.SPI_CH[1].u16vTrim == 0)
 80015f6:	e0e9      	b.n	80017cc <appSPI_motor+0x3dc>
								}
							} else if ((i == 2 || i == 3))
 80015f8:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <appSPI_motor+0x2c4>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d004      	beq.n	800160a <appSPI_motor+0x21a>
 8001600:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <appSPI_motor+0x2c4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	2b03      	cmp	r3, #3
 8001606:	f040 80e4 	bne.w	80017d2 <appSPI_motor+0x3e2>
							{
								if (SPIst.SPI_CH[2].u16vTrim == 0 && SPIst.SPI_CH[3].u16vTrim == 0)
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <appSPI_motor+0x2cc>)
 800160c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 80df 	bne.w	80017d2 <appSPI_motor+0x3e2>
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <appSPI_motor+0x2cc>)
 8001616:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 80d9 	bne.w	80017d2 <appSPI_motor+0x3e2>
								{
									//prtEN_Apl2n = 0;  //the logic of the enable signal has been changed
									prtEN_Apl3n(1); //Peltier module 2 OFF
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001626:	4828      	ldr	r0, [pc, #160]	; (80016c8 <appSPI_motor+0x2d8>)
 8001628:	f003 ff4a 	bl	80054c0 <HAL_GPIO_WritePin>
									prtEN_Apl4n(1);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001632:	4825      	ldr	r0, [pc, #148]	; (80016c8 <appSPI_motor+0x2d8>)
 8001634:	f003 ff44 	bl	80054c0 <HAL_GPIO_WritePin>
 8001638:	e0cb      	b.n	80017d2 <appSPI_motor+0x3e2>
								}
							}
					} else if ((i == 0 || i == 1) && standby.fuentesOn.apl1 == 1) {
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <appSPI_motor+0x2c4>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <appSPI_motor+0x25a>
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <appSPI_motor+0x2c4>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d110      	bne.n	800166c <appSPI_motor+0x27c>
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <appSPI_motor+0x2dc>)
 800164c:	7bdb      	ldrb	r3, [r3, #15]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10c      	bne.n	800166c <appSPI_motor+0x27c>
						//prtEN_Apl1n = 1;  //the logic of the enable signal has been changed
						prtEN_Apl1n(0); //Peltier module 1 ON
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001658:	481b      	ldr	r0, [pc, #108]	; (80016c8 <appSPI_motor+0x2d8>)
 800165a:	f003 ff31 	bl	80054c0 <HAL_GPIO_WritePin>
						prtEN_Apl2n(0);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001664:	4818      	ldr	r0, [pc, #96]	; (80016c8 <appSPI_motor+0x2d8>)
 8001666:	f003 ff2b 	bl	80054c0 <HAL_GPIO_WritePin>
 800166a:	e0b2      	b.n	80017d2 <appSPI_motor+0x3e2>
					} else if ((i == 2 || i == 3) && standby.fuentesOn.apl2 == 1) {
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <appSPI_motor+0x2c4>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d004      	beq.n	800167e <appSPI_motor+0x28e>
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <appSPI_motor+0x2c4>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	2b03      	cmp	r3, #3
 800167a:	f040 80aa 	bne.w	80017d2 <appSPI_motor+0x3e2>
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <appSPI_motor+0x2dc>)
 8001680:	7c1b      	ldrb	r3, [r3, #16]
 8001682:	2b01      	cmp	r3, #1
 8001684:	f040 80a5 	bne.w	80017d2 <appSPI_motor+0x3e2>
						//prtEN_Apl2n = 1;  //the logic of the enable signal has been changed
						prtEN_Apl3n(0); //Peltier module 2 ON
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168e:	480e      	ldr	r0, [pc, #56]	; (80016c8 <appSPI_motor+0x2d8>)
 8001690:	f003 ff16 	bl	80054c0 <HAL_GPIO_WritePin>
						prtEN_Apl4n(0);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <appSPI_motor+0x2d8>)
 800169c:	f003 ff10 	bl	80054c0 <HAL_GPIO_WritePin>
 80016a0:	e097      	b.n	80017d2 <appSPI_motor+0x3e2>
 80016a2:	bf00      	nop
 80016a4:	f3af 8000 	nop.w
 80016a8:	cccccccd 	.word	0xcccccccd
 80016ac:	40847acc 	.word	0x40847acc
 80016b0:	08007d6c 	.word	0x08007d6c
 80016b4:	200000a6 	.word	0x200000a6
 80016b8:	20000234 	.word	0x20000234
 80016bc:	20000044 	.word	0x20000044
 80016c0:	42c80000 	.word	0x42c80000
 80016c4:	200000e8 	.word	0x200000e8
 80016c8:	40021000 	.word	0x40021000
 80016cc:	20000214 	.word	0x20000214
					}
        		} else if (frame.field.header.u8AddrSlave == 2)
 80016d0:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <appSPI_motor+0x404>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d17c      	bne.n	80017d2 <appSPI_motor+0x3e2>
        		{
					  if (SPIst.SPI_CH[i].u16vTrim == 0)
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <appSPI_motor+0x408>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	4a47      	ldr	r2, [pc, #284]	; (80017fc <appSPI_motor+0x40c>)
 80016e0:	460b      	mov	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	330e      	adds	r3, #14
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d13a      	bne.n	8001768 <appSPI_motor+0x378>
					  {
							//If the two peltier modules have been programmed below the minimum, we turn off the corresponding module
							if ((i == 0 || i == 1))//&& prtEN_Apl1n == 0) {
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <appSPI_motor+0x408>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <appSPI_motor+0x312>
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <appSPI_motor+0x408>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d114      	bne.n	800172c <appSPI_motor+0x33c>
							{
								//We see that the other peltiers module also has 0 programmed
								if (SPIst.SPI_CH[0].u16vTrim == 0 && SPIst.SPI_CH[1].u16vTrim == 0)
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <appSPI_motor+0x40c>)
 8001704:	89db      	ldrh	r3, [r3, #14]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d162      	bne.n	80017d0 <appSPI_motor+0x3e0>
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <appSPI_motor+0x40c>)
 800170c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800170e:	2b00      	cmp	r3, #0
 8001710:	d15e      	bne.n	80017d0 <appSPI_motor+0x3e0>
								{
									//We turn off the module
									//prtEN_Apl1n = 0; //the logic of the enable signal has been changed
									prtEN_Apl5n(1); //Peltier module 1 OFF
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	4839      	ldr	r0, [pc, #228]	; (8001800 <appSPI_motor+0x410>)
 800171a:	f003 fed1 	bl	80054c0 <HAL_GPIO_WritePin>
									prtEN_Apl6n(1);
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001724:	4836      	ldr	r0, [pc, #216]	; (8001800 <appSPI_motor+0x410>)
 8001726:	f003 fecb 	bl	80054c0 <HAL_GPIO_WritePin>
								if (SPIst.SPI_CH[0].u16vTrim == 0 && SPIst.SPI_CH[1].u16vTrim == 0)
 800172a:	e051      	b.n	80017d0 <appSPI_motor+0x3e0>
								}
							} else if ((i == 2 || i == 3))
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <appSPI_motor+0x408>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d003      	beq.n	800173c <appSPI_motor+0x34c>
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <appSPI_motor+0x408>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d14a      	bne.n	80017d2 <appSPI_motor+0x3e2>
							{
								if (SPIst.SPI_CH[2].u16vTrim == 0 && SPIst.SPI_CH[3].u16vTrim == 0)
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <appSPI_motor+0x40c>)
 800173e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001740:	2b00      	cmp	r3, #0
 8001742:	d146      	bne.n	80017d2 <appSPI_motor+0x3e2>
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <appSPI_motor+0x40c>)
 8001746:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800174a:	2b00      	cmp	r3, #0
 800174c:	d141      	bne.n	80017d2 <appSPI_motor+0x3e2>
								{
									//prtEN_Apl2n = 0;  //the logic of the enable signal has been changed
									prtEN_Apl7n(1); //Peltier module 2 OFF
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001754:	482a      	ldr	r0, [pc, #168]	; (8001800 <appSPI_motor+0x410>)
 8001756:	f003 feb3 	bl	80054c0 <HAL_GPIO_WritePin>
									prtEN_Apl8n(1);
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001760:	4827      	ldr	r0, [pc, #156]	; (8001800 <appSPI_motor+0x410>)
 8001762:	f003 fead 	bl	80054c0 <HAL_GPIO_WritePin>
 8001766:	e034      	b.n	80017d2 <appSPI_motor+0x3e2>
								}
							}
					} else if ((i == 0 || i == 1) && standby.fuentesOn.apl1 == 1) {
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <appSPI_motor+0x408>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <appSPI_motor+0x388>
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <appSPI_motor+0x408>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d110      	bne.n	800179a <appSPI_motor+0x3aa>
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <appSPI_motor+0x414>)
 800177a:	7bdb      	ldrb	r3, [r3, #15]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d10c      	bne.n	800179a <appSPI_motor+0x3aa>
						//prtEN_Apl1n = 1;  //the logic of the enable signal has been changed
						prtEN_Apl5n(0); //Peltier module 1 ON
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001786:	481e      	ldr	r0, [pc, #120]	; (8001800 <appSPI_motor+0x410>)
 8001788:	f003 fe9a 	bl	80054c0 <HAL_GPIO_WritePin>
						prtEN_Apl6n(0);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001792:	481b      	ldr	r0, [pc, #108]	; (8001800 <appSPI_motor+0x410>)
 8001794:	f003 fe94 	bl	80054c0 <HAL_GPIO_WritePin>
 8001798:	e01b      	b.n	80017d2 <appSPI_motor+0x3e2>
					} else if ((i == 2 || i == 3) && standby.fuentesOn.apl2 == 1) {
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <appSPI_motor+0x408>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d003      	beq.n	80017aa <appSPI_motor+0x3ba>
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <appSPI_motor+0x408>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d113      	bne.n	80017d2 <appSPI_motor+0x3e2>
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <appSPI_motor+0x414>)
 80017ac:	7c1b      	ldrb	r3, [r3, #16]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d10f      	bne.n	80017d2 <appSPI_motor+0x3e2>
						//prtEN_Apl2n = 1;  //the logic of the enable signal has been changed
						prtEN_Apl7n(0); //Peltier module 2 ON
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b8:	4811      	ldr	r0, [pc, #68]	; (8001800 <appSPI_motor+0x410>)
 80017ba:	f003 fe81 	bl	80054c0 <HAL_GPIO_WritePin>
						prtEN_Apl8n(0);
 80017be:	2200      	movs	r2, #0
 80017c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <appSPI_motor+0x410>)
 80017c6:	f003 fe7b 	bl	80054c0 <HAL_GPIO_WritePin>
 80017ca:	e002      	b.n	80017d2 <appSPI_motor+0x3e2>
								if (SPIst.SPI_CH[0].u16vTrim == 0 && SPIst.SPI_CH[1].u16vTrim == 0)
 80017cc:	bf00      	nop
 80017ce:	e000      	b.n	80017d2 <appSPI_motor+0x3e2>
								if (SPIst.SPI_CH[0].u16vTrim == 0 && SPIst.SPI_CH[1].u16vTrim == 0)
 80017d0:	bf00      	nop
        for (i=0; i<MAX_NUM_SPI_CH; i++)
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <appSPI_motor+0x408>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <appSPI_motor+0x408>)
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <appSPI_motor+0x408>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	f67f ae11 	bls.w	800140a <appSPI_motor+0x1a>
        		} // end if (frame.field.header.u8AddrSlave == 2)


        } //end for

} // end appSPI_motor
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200000e8 	.word	0x200000e8
 80017f8:	200000a6 	.word	0x200000a6
 80017fc:	20000044 	.word	0x20000044
 8001800:	40021000 	.word	0x40021000
 8001804:	20000214 	.word	0x20000214

08001808 <PROTSLV_Init>:

returnstatus_t ActionNULL(uint8_t u8Operation, uint8_t u8Order, uint32_t u32Addr, uint8_t* ptu8Dades, uint16_t u16NumDades);

returnstatus_t CheckHeader(protslv_header_t cab);

void PROTSLV_Init(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
    /* inicialitzacio punters a funcio */
    protslv.QuantsBytesBufferRX = RS485_QuantsBytesBufferRX;
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <PROTSLV_Init+0x88>)
 800180e:	4a21      	ldr	r2, [pc, #132]	; (8001894 <PROTSLV_Init+0x8c>)
 8001810:	615a      	str	r2, [r3, #20]
    protslv.Receive = RS485_Receive;
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <PROTSLV_Init+0x88>)
 8001814:	4a20      	ldr	r2, [pc, #128]	; (8001898 <PROTSLV_Init+0x90>)
 8001816:	611a      	str	r2, [r3, #16]
    protslv.ResetBuffers = RS485_ResetBuffers;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <PROTSLV_Init+0x88>)
 800181a:	4a20      	ldr	r2, [pc, #128]	; (800189c <PROTSLV_Init+0x94>)
 800181c:	619a      	str	r2, [r3, #24]
    protslv.Transmit = RS485_Transmit;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <PROTSLV_Init+0x88>)
 8001820:	4a1f      	ldr	r2, [pc, #124]	; (80018a0 <PROTSLV_Init+0x98>)
 8001822:	61da      	str	r2, [r3, #28]

    protslv.Action[CMP_INTERNAL_USED_RAM] = SYS_Action;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <PROTSLV_Init+0x88>)
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <PROTSLV_Init+0x9c>)
 8001828:	621a      	str	r2, [r3, #32]
    protslv.Action[CMP_INTERNAL_RAM] = ActionNULL;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <PROTSLV_Init+0x88>)
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <PROTSLV_Init+0xa0>)
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
    protslv.Action[CMP_INTERNAL_FLASH] = ActionNULL;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <PROTSLV_Init+0x88>)
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <PROTSLV_Init+0xa0>)
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
    //protslv.Action[CMP_INTERNAL_EEPROM] = EEPROMINTERNA_Action;
    protslv.Action[CMP_INTERNAL_EEPROM] = ActionNULL;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <PROTSLV_Init+0x88>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <PROTSLV_Init+0xa0>)
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
    protslv.Action[CMP_UNDEFINED_4] = ActionNULL;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <PROTSLV_Init+0x88>)
 800183e:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <PROTSLV_Init+0xa0>)
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
    protslv.Action[CMP_UNDEFINED_5] = ActionNULL;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <PROTSLV_Init+0x88>)
 8001844:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <PROTSLV_Init+0xa0>)
 8001846:	635a      	str	r2, [r3, #52]	; 0x34
    protslv.Action[CMP_UNDEFINED_6] = ActionNULL;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <PROTSLV_Init+0x88>)
 800184a:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <PROTSLV_Init+0xa0>)
 800184c:	639a      	str	r2, [r3, #56]	; 0x38
    protslv.Action[CMP_UNDEFINED_7] = ActionNULL;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <PROTSLV_Init+0x88>)
 8001850:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <PROTSLV_Init+0xa0>)
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
    /* inicialitzacio variables */
    protslv.u8ActionMotor = 0;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <PROTSLV_Init+0x88>)
 8001856:	2200      	movs	r2, #0
 8001858:	70da      	strb	r2, [r3, #3]
    protslv.u8Enable = 1;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <PROTSLV_Init+0x88>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
    protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_ADDR;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <PROTSLV_Init+0x88>)
 8001862:	2200      	movs	r2, #0
 8001864:	705a      	strb	r2, [r3, #1]
    protslv.ResetBuffers(RS485_SLV);
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <PROTSLV_Init+0x88>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2000      	movs	r0, #0
 800186c:	4798      	blx	r3
    /* inicialitzacio buffer protocol */
    frame.field.ptu8Data = ptu8ProtBuffer;
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <PROTSLV_Init+0xa4>)
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <PROTSLV_Init+0xa8>)
 8001872:	60da      	str	r2, [r3, #12]

    u8ErrorNumber = 0;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <PROTSLV_Init+0xac>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]

    MemoryMap.var.puerto485_slv.u32TramasOK = 0;
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <PROTSLV_Init+0xb0>)
 800187c:	2200      	movs	r2, #0
 800187e:	65da      	str	r2, [r3, #92]	; 0x5c
    MemoryMap.var.puerto485_slv.u32TramasKO = 0;
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <PROTSLV_Init+0xb0>)
 8001882:	2200      	movs	r2, #0
 8001884:	661a      	str	r2, [r3, #96]	; 0x60

    RS485_Init(RS485_SLV);
 8001886:	2000      	movs	r0, #0
 8001888:	f000 fcfe 	bl	8002288 <RS485_Init>
    //	HAL_GPIO_WritePin(DBG_LED_1_GPIO_Port, DBG_LED_1_Pin, GPIO_PIN_RESET);
    //	HAL_GPIO_WritePin(DBG_LED_2_GPIO_Port, DBG_LED_2_Pin, GPIO_PIN_RESET);
    //	HAL_GPIO_WritePin(DBG_LED_3_GPIO_Port, DBG_LED_3_Pin, GPIO_PIN_RESET);
    //	HAL_GPIO_WritePin(DBG_LED_4_GPIO_Port, DBG_LED_4_Pin, GPIO_PIN_RESET);

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200000a8 	.word	0x200000a8
 8001894:	0800242d 	.word	0x0800242d
 8001898:	080023fd 	.word	0x080023fd
 800189c:	08002451 	.word	0x08002451
 80018a0:	080022c9 	.word	0x080022c9
 80018a4:	080032d1 	.word	0x080032d1
 80018a8:	080021bd 	.word	0x080021bd
 80018ac:	200000e8 	.word	0x200000e8
 80018b0:	200000fc 	.word	0x200000fc
 80018b4:	200001fb 	.word	0x200001fb
 80018b8:	20000234 	.word	0x20000234

080018bc <PROTSLV_Motor>:

returnstatus_t PROTSLV_Motor(void) {
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af02      	add	r7, sp, #8
    uint8_t i;
    uint16_t Aux;
    returnstatus_t retorn;

    retorn = RUNNING_HTP;
 80018c2:	23fe      	movs	r3, #254	; 0xfe
 80018c4:	717b      	strb	r3, [r7, #5]
    switch (protslv.u8ProtocolMotor) {
 80018c6:	4ba8      	ldr	r3, [pc, #672]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 80018c8:	785b      	ldrb	r3, [r3, #1]
 80018ca:	2b14      	cmp	r3, #20
 80018cc:	f200 8466 	bhi.w	800219c <PROTSLV_Motor+0x8e0>
 80018d0:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <PROTSLV_Motor+0x1c>)
 80018d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d6:	bf00      	nop
 80018d8:	0800192d 	.word	0x0800192d
 80018dc:	08001977 	.word	0x08001977
 80018e0:	080019bb 	.word	0x080019bb
 80018e4:	080019e1 	.word	0x080019e1
 80018e8:	08001b35 	.word	0x08001b35
 80018ec:	08001b81 	.word	0x08001b81
 80018f0:	08001ba7 	.word	0x08001ba7
 80018f4:	08001c27 	.word	0x08001c27
 80018f8:	08001c61 	.word	0x08001c61
 80018fc:	08001ce5 	.word	0x08001ce5
 8001900:	08001e79 	.word	0x08001e79
 8001904:	08001f3f 	.word	0x08001f3f
 8001908:	08001f5d 	.word	0x08001f5d
 800190c:	08001f81 	.word	0x08001f81
 8001910:	08001fb3 	.word	0x08001fb3
 8001914:	08001fe1 	.word	0x08001fe1
 8001918:	08002007 	.word	0x08002007
 800191c:	08002071 	.word	0x08002071
 8001920:	080020a9 	.word	0x080020a9
 8001924:	08002119 	.word	0x08002119
 8001928:	08002135 	.word	0x08002135
        case PROTSLV_STAT_ESPERANT_ADDR:
            /* I take 1 byte to see if it's for me */
            if (protslv.Receive(RS485_SLV, (&frame.field.header.u8AddrSlave), 1) == SUCCESS_HTP) {
 800192c:	4b8e      	ldr	r3, [pc, #568]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2201      	movs	r2, #1
 8001932:	498e      	ldr	r1, [pc, #568]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 8001934:	2000      	movs	r0, #0
 8001936:	4798      	blx	r3
 8001938:	4603      	mov	r3, r0
 800193a:	2b01      	cmp	r3, #1
 800193c:	f040 8419 	bne.w	8002172 <PROTSLV_Motor+0x8b6>
                {
               //   if ((frame.field.header.u8AddrSlave == MemoryMap.var.cabecera_fw.board_definition.u8BoardAddres) || (frame.field.header.u8AddrSlave == 0)) {
                    if ((frame.field.header.u8AddrSlave == 0) || (frame.field.header.u8AddrSlave == 1) || (frame.field.header.u8AddrSlave == 2)) {
 8001940:	4b8a      	ldr	r3, [pc, #552]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <PROTSLV_Motor+0x9e>
 8001948:	4b88      	ldr	r3, [pc, #544]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d004      	beq.n	800195a <PROTSLV_Motor+0x9e>
 8001950:	4b86      	ldr	r3, [pc, #536]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b02      	cmp	r3, #2
 8001956:	f040 840c 	bne.w	8002172 <PROTSLV_Motor+0x8b6>
                    	MemoryMap.var.cabecera_fw.board_definition.u8BoardAddres = frame.field.header.u8AddrSlave; // iii take the address from requested board
 800195a:	4b84      	ldr	r3, [pc, #528]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	4b84      	ldr	r3, [pc, #528]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001960:	701a      	strb	r2, [r3, #0]
                        protslv.u32TicksProtocol = TICKS_GetTicks();
 8001962:	f001 ff75 	bl	8003850 <TICKS_GetTicks>
 8001966:	4603      	mov	r3, r0
 8001968:	4a7f      	ldr	r2, [pc, #508]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 800196a:	60d3      	str	r3, [r2, #12]
                        protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_HEADER;
 800196c:	4b7e      	ldr	r3, [pc, #504]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 800196e:	2201      	movs	r2, #1
 8001970:	705a      	strb	r2, [r3, #1]
                        break;
 8001972:	f000 bc13 	b.w	800219c <PROTSLV_Motor+0x8e0>
                }
            }
            break;
        case PROTSLV_STAT_ESPERANT_HEADER:
            /* it looks like it was for me, I'm going to take the rest of the header */
            if (protslv.Receive(RS485_SLV, (uint8_t *) ((uint8_t *) (frame.ptucBytes) + 1), 11) == SUCCESS_HTP) {
 8001976:	4b7c      	ldr	r3, [pc, #496]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	497e      	ldr	r1, [pc, #504]	; (8001b74 <PROTSLV_Motor+0x2b8>)
 800197c:	220b      	movs	r2, #11
 800197e:	2000      	movs	r0, #0
 8001980:	4798      	blx	r3
 8001982:	4603      	mov	r3, r0
 8001984:	2b01      	cmp	r3, #1
 8001986:	d103      	bne.n	8001990 <PROTSLV_Motor+0xd4>
                protslv.u8ProtocolMotor = PROTSLV_STAT_VERIFICACIO_HEADER;
 8001988:	4b77      	ldr	r3, [pc, #476]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 800198a:	2202      	movs	r2, #2
 800198c:	705a      	strb	r2, [r3, #1]
                /* timeout of 0.25ms per byte approx */
                protslv.u32TicksProtocol = TICKS_GetTicks();
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
                u8ErrorNumber = 1;
            }
            break;
 800198e:	e3f2      	b.n	8002176 <PROTSLV_Motor+0x8ba>
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_HEADER) {
 8001990:	4b75      	ldr	r3, [pc, #468]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4618      	mov	r0, r3
 8001996:	f001 ff66 	bl	8003866 <TICKS_DiffTicks>
 800199a:	4603      	mov	r3, r0
 800199c:	2b03      	cmp	r3, #3
 800199e:	f240 83ea 	bls.w	8002176 <PROTSLV_Motor+0x8ba>
                protslv.u32TicksProtocol = TICKS_GetTicks();
 80019a2:	f001 ff55 	bl	8003850 <TICKS_GetTicks>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a6f      	ldr	r2, [pc, #444]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 80019aa:	60d3      	str	r3, [r2, #12]
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 80019ac:	4b6e      	ldr	r3, [pc, #440]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 80019ae:	2213      	movs	r2, #19
 80019b0:	705a      	strb	r2, [r3, #1]
                u8ErrorNumber = 1;
 80019b2:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <PROTSLV_Motor+0x2bc>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
            break;
 80019b8:	e3dd      	b.n	8002176 <PROTSLV_Motor+0x8ba>
        case PROTSLV_STAT_VERIFICACIO_HEADER:
            /* check if the header is correct, otherwise i will sync */
            if (CheckHeader(frame.field.header) == SUCCESS_HTP) {
 80019ba:	4b6c      	ldr	r3, [pc, #432]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 80019bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019c0:	f000 fc0d 	bl	80021de <CheckHeader>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d103      	bne.n	80019d2 <PROTSLV_Motor+0x116>
                protslv.u8ProtocolMotor = PROTSLV_STAT_VERIFICACIO_ORDRE;
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 80019cc:	2203      	movs	r2, #3
 80019ce:	705a      	strb	r2, [r3, #1]
            } else {
                u8ErrorNumber = 2;
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
            }
            break;
 80019d0:	e3e4      	b.n	800219c <PROTSLV_Motor+0x8e0>
                u8ErrorNumber = 2;
 80019d2:	4b69      	ldr	r3, [pc, #420]	; (8001b78 <PROTSLV_Motor+0x2bc>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 80019d8:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 80019da:	2213      	movs	r2, #19
 80019dc:	705a      	strb	r2, [r3, #1]
            break;
 80019de:	e3dd      	b.n	800219c <PROTSLV_Motor+0x8e0>
        case PROTSLV_STAT_VERIFICACIO_ORDRE:
			/* header is correct */
            /* before grabbing the data field, see if I can execute the action so as not to overwrite any data that may be using another */
            /* only in the case of reading or writing */
            Aux = ((uint16_t) frame.field.header.memoria.status)>>(2 * (uint16_t) frame.field.header.tipooperacion.bit_field.u8acces_mem);
 80019e0:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 80019e2:	891b      	ldrh	r3, [r3, #8]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b61      	ldr	r3, [pc, #388]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 80019e8:	785b      	ldrb	r3, [r3, #1]
 80019ea:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa42 f303 	asr.w	r3, r2, r3
 80019f6:	80fb      	strh	r3, [r7, #6]
            Aux &= 0x03;
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	80fb      	strh	r3, [r7, #6]
            switch (Aux) {
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	f200 83b9 	bhi.w	800217a <PROTSLV_Motor+0x8be>
 8001a08:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <PROTSLV_Motor+0x154>)
 8001a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0e:	bf00      	nop
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001a3f 	.word	0x08001a3f
 8001a18:	08001a21 	.word	0x08001a21
 8001a1c:	08001ae5 	.word	0x08001ae5
                case PROTSLV_ORDER_IDLE:
                    /* if an IDLE command arrives, I treat it the same as pooling */
                case PROTSLV_ORDER_POOLING:
                    /* it is necessary to look for that it will not have data */
                    if (frame.field.header.u8NumData == 0) {
 8001a20:	4b52      	ldr	r3, [pc, #328]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 8001a22:	78db      	ldrb	r3, [r3, #3]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <PROTSLV_Motor+0x174>
                        protslv.u8ProtocolMotor = PROTSLV_STAT_NOVA_ORDRE;
 8001a28:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	705a      	strb	r2, [r3, #1]
                    } else {
                        /* wrong plot, I'm going to sync */
                        protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
                        u8ErrorNumber = 5;
                    }
                    break;
 8001a2e:	e080      	b.n	8001b32 <PROTSLV_Motor+0x276>
                        protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 8001a30:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001a32:	2213      	movs	r2, #19
 8001a34:	705a      	strb	r2, [r3, #1]
                        u8ErrorNumber = 5;
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <PROTSLV_Motor+0x2bc>)
 8001a38:	2205      	movs	r2, #5
 8001a3a:	701a      	strb	r2, [r3, #0]
                    break;
 8001a3c:	e079      	b.n	8001b32 <PROTSLV_Motor+0x276>
                case PROTSLV_ORDER_ORDER:
                    /* see if there is an order in progress */
                    if (
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_USED_RAM].bit_field.stat == 0) &&
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001a40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	b2db      	uxtb	r3, r3
                    if (
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d143      	bne.n	8001ad6 <PROTSLV_Motor+0x21a>
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_RAM].bit_field.stat == 0) &&
 8001a4e:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001a50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	b2db      	uxtb	r3, r3
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_USED_RAM].bit_field.stat == 0) &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d13b      	bne.n	8001ad6 <PROTSLV_Motor+0x21a>
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_FLASH].bit_field.stat == 0) &&
 8001a5e:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001a60:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	b2db      	uxtb	r3, r3
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_RAM].bit_field.stat == 0) &&
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d133      	bne.n	8001ad6 <PROTSLV_Motor+0x21a>
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_EEPROM].bit_field.stat == 0) &&
 8001a6e:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001a70:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	b2db      	uxtb	r3, r3
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_FLASH].bit_field.stat == 0) &&
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d12b      	bne.n	8001ad6 <PROTSLV_Motor+0x21a>
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_UNDEFINED_4].bit_field.stat == 0) &&
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001a80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	b2db      	uxtb	r3, r3
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_EEPROM].bit_field.stat == 0) &&
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d123      	bne.n	8001ad6 <PROTSLV_Motor+0x21a>
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_UNDEFINED_5].bit_field.stat == 0) &&
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	b2db      	uxtb	r3, r3
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_UNDEFINED_4].bit_field.stat == 0) &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d11b      	bne.n	8001ad6 <PROTSLV_Motor+0x21a>
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_UNDEFINED_6].bit_field.stat == 0) &&
 8001a9e:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001aa0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	b2db      	uxtb	r3, r3
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_UNDEFINED_5].bit_field.stat == 0) &&
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d113      	bne.n	8001ad6 <PROTSLV_Motor+0x21a>
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_UNDEFINED_7].bit_field.stat == 0)
 8001aae:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001ab0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	b2db      	uxtb	r3, r3
                            (MemoryMap.var.cabecera_fw.mems_status[CMP_UNDEFINED_6].bit_field.stat == 0) &&
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <PROTSLV_Motor+0x21a>
                            ) {
                        /* no action is being taken, I can continue */
                        protslv.u8ProtocolMotor = PROTSLV_STAT_NOVA_ORDRE;
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	705a      	strb	r2, [r3, #1]
                        protslv.u32AddrOrdreAcceptada = frame.field.header.memaddr.addres;
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a27      	ldr	r2, [pc, #156]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001aca:	6093      	str	r3, [r2, #8]
                        protslv.u8TamanyOrdreAcceptada = frame.field.header.u8NumData;
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 8001ace:	78da      	ldrb	r2, [r3, #3]
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001ad2:	711a      	strb	r2, [r3, #4]
                    } else {
                        /* if some action is being taken, what can be done must be limited */
                        protslv.u8ProtocolMotor = PROTSLV_STAT_ORDRE_KO;
                        u8OperacioEnCurs = 1;
                    }
                    break;
 8001ad4:	e02d      	b.n	8001b32 <PROTSLV_Motor+0x276>
                        protslv.u8ProtocolMotor = PROTSLV_STAT_ORDRE_KO;
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001ad8:	220e      	movs	r2, #14
 8001ada:	705a      	strb	r2, [r3, #1]
                        u8OperacioEnCurs = 1;
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <PROTSLV_Motor+0x2c0>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
                    break;
 8001ae2:	e026      	b.n	8001b32 <PROTSLV_Motor+0x276>
                case PROTSLV_ORDER_RESET_ORDER:
                    /* I see if there is an order running and I answer, it can't have data */
                    if (frame.field.header.u8NumData == 0) {
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 8001ae6:	78db      	ldrb	r3, [r3, #3]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d11b      	bne.n	8001b24 <PROTSLV_Motor+0x268>
                        /* see if the memory you want to abort has an initial order */

                        i = frame.field.header.tipooperacion.bit_field.u8acces_mem;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 8001aee:	785b      	ldrb	r3, [r3, #1]
 8001af0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	713b      	strb	r3, [r7, #4]
                        if (MemoryMap.var.cabecera_fw.mems_status[i].bit_field.stat != 0) {
 8001af8:	793b      	ldrb	r3, [r7, #4]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <PROTSLV_Motor+0x2b4>)
 8001afe:	4413      	add	r3, r2
 8001b00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b04:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <PROTSLV_Motor+0x25a>
                            /* order in progress, I will say cancel */
                            protslv.u8ProtocolMotor = PROTSLV_STAT_NOVA_ORDRE;
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001b10:	2204      	movs	r2, #4
 8001b12:	705a      	strb	r2, [r3, #1]
                    } else {
                        /* wrong plot, I'm going to sync */
                        protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
                        u8ErrorNumber = 6;
                    }
                    break;
 8001b14:	e00c      	b.n	8001b30 <PROTSLV_Motor+0x274>
                            protslv.u8ProtocolMotor = PROTSLV_STAT_ORDRE_KO;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001b18:	220e      	movs	r2, #14
 8001b1a:	705a      	strb	r2, [r3, #1]
                            u8OperacioEnCurs = 2;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <PROTSLV_Motor+0x2c0>)
 8001b1e:	2202      	movs	r2, #2
 8001b20:	701a      	strb	r2, [r3, #0]
                    break;
 8001b22:	e005      	b.n	8001b30 <PROTSLV_Motor+0x274>
                        protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001b26:	2213      	movs	r2, #19
 8001b28:	705a      	strb	r2, [r3, #1]
                        u8ErrorNumber = 6;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <PROTSLV_Motor+0x2bc>)
 8001b2c:	2206      	movs	r2, #6
 8001b2e:	701a      	strb	r2, [r3, #0]
                    break;
 8001b30:	bf00      	nop
            }
            break;
 8001b32:	e322      	b.n	800217a <PROTSLV_Motor+0x8be>
        case PROTSLV_STAT_NOVA_ORDRE:

/* new order without any */
            /* I will be receiving data, if there is any, ONLY if it is written */
            if (frame.field.header.tipooperacion.bit_field.u8operation == PROTSLV_OP_READING) {
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <PROTSLV_Motor+0x2b0>)
 8001b36:	785b      	ldrb	r3, [r3, #1]
 8001b38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d108      	bne.n	8001b54 <PROTSLV_Motor+0x298>
                /* numb bytes es diferent de 0, pero es una lectura */
                protslv.u32TicksProtocol = TICKS_GetTicks();
 8001b42:	f001 fe85 	bl	8003850 <TICKS_GetTicks>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001b4a:	60d3      	str	r3, [r2, #12]
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_CHECKSUM;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001b4e:	2207      	movs	r2, #7
 8001b50:	705a      	strb	r2, [r3, #1]
            } else {
                protslv.u8BytesRebuts = 0;
                protslv.u8ProtocolMotor++;
            }
            break;
 8001b52:	e323      	b.n	800219c <PROTSLV_Motor+0x8e0>
                protslv.u8BytesRebuts = 0;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	709a      	strb	r2, [r3, #2]
                protslv.u8ProtocolMotor++;
 8001b5a:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b01      	ldr	r3, [pc, #4]	; (8001b68 <PROTSLV_Motor+0x2ac>)
 8001b64:	705a      	strb	r2, [r3, #1]
            break;
 8001b66:	e319      	b.n	800219c <PROTSLV_Motor+0x8e0>
 8001b68:	200000a8 	.word	0x200000a8
 8001b6c:	200000e8 	.word	0x200000e8
 8001b70:	20000234 	.word	0x20000234
 8001b74:	200000e9 	.word	0x200000e9
 8001b78:	200001fb 	.word	0x200001fb
 8001b7c:	200001fc 	.word	0x200001fc
        case PROTSLV_STAT_ESPERANT_DADES1:
            protslv.u32TicksProtocol = TICKS_GetTicks();
 8001b80:	f001 fe66 	bl	8003850 <TICKS_GetTicks>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a91      	ldr	r2, [pc, #580]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001b88:	60d3      	str	r3, [r2, #12]
            if (protslv.u8BytesRebuts < frame.field.header.u8NumData) {
 8001b8a:	4b90      	ldr	r3, [pc, #576]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001b8c:	789a      	ldrb	r2, [r3, #2]
 8001b8e:	4b90      	ldr	r3, [pc, #576]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001b90:	78db      	ldrb	r3, [r3, #3]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d203      	bcs.n	8001b9e <PROTSLV_Motor+0x2e2>
                /* data left to receive */
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_DADES2;
 8001b96:	4b8d      	ldr	r3, [pc, #564]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001b98:	2206      	movs	r2, #6
 8001b9a:	705a      	strb	r2, [r3, #1]
            } else {
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_CHECKSUM;
            }
            break;
 8001b9c:	e2fe      	b.n	800219c <PROTSLV_Motor+0x8e0>
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_CHECKSUM;
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	705a      	strb	r2, [r3, #1]
            break;
 8001ba4:	e2fa      	b.n	800219c <PROTSLV_Motor+0x8e0>
        case PROTSLV_STAT_ESPERANT_DADES2:
            i = protslv.QuantsBytesBufferRX(RS485_SLV);
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	2000      	movs	r0, #0
 8001bac:	4798      	blx	r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	713b      	strb	r3, [r7, #4]
            if ((protslv.u8BytesRebuts + i) > frame.field.header.u8NumData) {
 8001bb4:	4b85      	ldr	r3, [pc, #532]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001bb6:	789b      	ldrb	r3, [r3, #2]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	793b      	ldrb	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a84      	ldr	r2, [pc, #528]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001bc0:	78d2      	ldrb	r2, [r2, #3]
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	dd06      	ble.n	8001bd4 <PROTSLV_Motor+0x318>
                /* there are more bytes than the data I have left, I only take the missing ones */
                /* maybe the plot checksum has already reached me, but it is taken in another state */
                i = (uint8_t) (frame.field.header.u8NumData - protslv.u8BytesRebuts);
 8001bc6:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001bc8:	78da      	ldrb	r2, [r3, #3]
 8001bca:	4b80      	ldr	r3, [pc, #512]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001bcc:	789b      	ldrb	r3, [r3, #2]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	713b      	strb	r3, [r7, #4]
            }
            if (i > 0) {
 8001bd4:	793b      	ldrb	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d015      	beq.n	8001c06 <PROTSLV_Motor+0x34a>
                protslv.Receive(RS485_SLV, frame.field.ptu8Data + protslv.u8BytesRebuts, i);
 8001bda:	4b7c      	ldr	r3, [pc, #496]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	4a7c      	ldr	r2, [pc, #496]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001be0:	68d2      	ldr	r2, [r2, #12]
 8001be2:	497a      	ldr	r1, [pc, #488]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001be4:	7889      	ldrb	r1, [r1, #2]
 8001be6:	4411      	add	r1, r2
 8001be8:	793a      	ldrb	r2, [r7, #4]
 8001bea:	b292      	uxth	r2, r2
 8001bec:	2000      	movs	r0, #0
 8001bee:	4798      	blx	r3
                protslv.u8BytesRebuts += i;
 8001bf0:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001bf2:	789a      	ldrb	r2, [r3, #2]
 8001bf4:	793b      	ldrb	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b74      	ldr	r3, [pc, #464]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001bfc:	709a      	strb	r2, [r3, #2]
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_DADES1;
 8001bfe:	4b73      	ldr	r3, [pc, #460]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001c00:	2205      	movs	r2, #5
 8001c02:	705a      	strb	r2, [r3, #1]
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_DATA) {
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
                u8ErrorNumber = 7;
            }
            break;
 8001c04:	e2bb      	b.n	800217e <PROTSLV_Motor+0x8c2>
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_DATA) {
 8001c06:	4b71      	ldr	r3, [pc, #452]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fe2b 	bl	8003866 <TICKS_DiffTicks>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	f240 82b3 	bls.w	800217e <PROTSLV_Motor+0x8c2>
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 8001c18:	4b6c      	ldr	r3, [pc, #432]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001c1a:	2213      	movs	r2, #19
 8001c1c:	705a      	strb	r2, [r3, #1]
                u8ErrorNumber = 7;
 8001c1e:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <PROTSLV_Motor+0x518>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	701a      	strb	r2, [r3, #0]
            break;
 8001c24:	e2ab      	b.n	800217e <PROTSLV_Motor+0x8c2>
        case PROTSLV_STAT_ESPERANT_CHECKSUM:
            if (protslv.Receive(RS485_SLV, (uint8_t *) (&frame.field.u16FrameChecksum), 2) == SUCCESS_HTP) {
 8001c26:	4b69      	ldr	r3, [pc, #420]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	496a      	ldr	r1, [pc, #424]	; (8001dd8 <PROTSLV_Motor+0x51c>)
 8001c2e:	2000      	movs	r0, #0
 8001c30:	4798      	blx	r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d103      	bne.n	8001c40 <PROTSLV_Motor+0x384>
                protslv.u8ProtocolMotor = PROTSLV_STAT_VERIFICACIO_CHECKSUM;
 8001c38:	4b64      	ldr	r3, [pc, #400]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	705a      	strb	r2, [r3, #1]
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_CHECKSUM) {
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
                u8ErrorNumber = 8;
            }
            break;
 8001c3e:	e2a0      	b.n	8002182 <PROTSLV_Motor+0x8c6>
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_CHECKSUM) {
 8001c40:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 fe0e 	bl	8003866 <TICKS_DiffTicks>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	f240 8298 	bls.w	8002182 <PROTSLV_Motor+0x8c6>
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 8001c52:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001c54:	2213      	movs	r2, #19
 8001c56:	705a      	strb	r2, [r3, #1]
                u8ErrorNumber = 8;
 8001c58:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <PROTSLV_Motor+0x518>)
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	701a      	strb	r2, [r3, #0]
            break;
 8001c5e:	e290      	b.n	8002182 <PROTSLV_Motor+0x8c6>
        case PROTSLV_STAT_VERIFICACIO_CHECKSUM:
            u8OperacioEnCurs = 0;
 8001c60:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <PROTSLV_Motor+0x520>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
            Aux = frame.field.u16FrameChecksum;
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001c68:	8a1b      	ldrh	r3, [r3, #16]
 8001c6a:	80fb      	strh	r3, [r7, #6]
            for (i = 0; i < sizeof (protslv_header_t); i++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	713b      	strb	r3, [r7, #4]
 8001c70:	e00b      	b.n	8001c8a <PROTSLV_Motor+0x3ce>
                Aux += frame.ptucBytes[i];
 8001c72:	793b      	ldrb	r3, [r7, #4]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001c78:	5c9b      	ldrb	r3, [r3, r2]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	4413      	add	r3, r2
 8001c80:	80fb      	strh	r3, [r7, #6]
            for (i = 0; i < sizeof (protslv_header_t); i++) {
 8001c82:	793b      	ldrb	r3, [r7, #4]
 8001c84:	3301      	adds	r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	713b      	strb	r3, [r7, #4]
 8001c8a:	793b      	ldrb	r3, [r7, #4]
 8001c8c:	2b0b      	cmp	r3, #11
 8001c8e:	d9f0      	bls.n	8001c72 <PROTSLV_Motor+0x3b6>
            }
            if (frame.field.header.tipooperacion.bit_field.u8operation == PROTSLV_OP_WRITING) {
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001c92:	785b      	ldrb	r3, [r3, #1]
 8001c94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d014      	beq.n	8001cc8 <PROTSLV_Motor+0x40c>
                for (i = 0; i < frame.field.header.u8NumData; i++) {
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	713b      	strb	r3, [r7, #4]
 8001ca2:	e00c      	b.n	8001cbe <PROTSLV_Motor+0x402>
                    Aux += frame.field.ptu8Data[i];
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	793a      	ldrb	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
                for (i = 0; i < frame.field.header.u8NumData; i++) {
 8001cb6:	793b      	ldrb	r3, [r7, #4]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	713b      	strb	r3, [r7, #4]
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001cc0:	78da      	ldrb	r2, [r3, #3]
 8001cc2:	793b      	ldrb	r3, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8ed      	bhi.n	8001ca4 <PROTSLV_Motor+0x3e8>
                }
            }
            if (Aux == 0) {
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <PROTSLV_Motor+0x41a>
                /* correct package, i will start order */
                protslv.u8ProtocolMotor = PROTSLV_STAT_INICIAR_ORDRE;
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001cd0:	2209      	movs	r2, #9
 8001cd2:	705a      	strb	r2, [r3, #1]
            } else {
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
                u8ErrorNumber = 9;
            }
            break;
 8001cd4:	e262      	b.n	800219c <PROTSLV_Motor+0x8e0>
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001cd8:	2213      	movs	r2, #19
 8001cda:	705a      	strb	r2, [r3, #1]
                u8ErrorNumber = 9;
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <PROTSLV_Motor+0x518>)
 8001cde:	2209      	movs	r2, #9
 8001ce0:	701a      	strb	r2, [r3, #0]
            break;
 8001ce2:	e25b      	b.n	800219c <PROTSLV_Motor+0x8e0>
        case PROTSLV_STAT_INICIAR_ORDRE:
            //					HAL_GPIO_TogglePin(DBG_LED_3_GPIO_Port, DBG_LED_3_Pin);
            //            frame.field.header.memoria.status = 0;
            i = (uint16_t) (frame.field.header.memoria.status)>>(2 * (uint16_t) frame.field.header.tipooperacion.bit_field.u8acces_mem);
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001ce6:	891b      	ldrh	r3, [r3, #8]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa42 f303 	asr.w	r3, r2, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	713b      	strb	r3, [r7, #4]
            i &= 0x03;
 8001cfe:	793b      	ldrb	r3, [r7, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	713b      	strb	r3, [r7, #4]
            switch (protslv.Action[frame.field.header.tipooperacion.bit_field.u8acces_mem]
 8001d08:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d0a:	785b      	ldrb	r3, [r3, #1]
 8001d0c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4a2e      	ldr	r2, [pc, #184]	; (8001dcc <PROTSLV_Motor+0x510>)
 8001d14:	3308      	adds	r3, #8
 8001d16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
                    (frame.field.header.tipooperacion.bit_field.u8operation, i, frame.field.header.memaddr.addres, frame.field.ptu8Data, frame.field.header.u8NumData)) {
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d22:	b2db      	uxtb	r3, r3
            switch (protslv.Action[frame.field.header.tipooperacion.bit_field.u8acces_mem]
 8001d24:	461d      	mov	r5, r3
 8001d26:	7939      	ldrb	r1, [r7, #4]
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d2e:	68d8      	ldr	r0, [r3, #12]
                    (frame.field.header.tipooperacion.bit_field.u8operation, i, frame.field.header.memaddr.addres, frame.field.ptu8Data, frame.field.header.u8NumData)) {
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d32:	78db      	ldrb	r3, [r3, #3]
            switch (protslv.Action[frame.field.header.tipooperacion.bit_field.u8acces_mem]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	47a0      	blx	r4
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d04d      	beq.n	8001de0 <PROTSLV_Motor+0x524>
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	dc04      	bgt.n	8001d52 <PROTSLV_Motor+0x496>
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d01a      	beq.n	8001d84 <PROTSLV_Motor+0x4c8>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d031      	beq.n	8001db6 <PROTSLV_Motor+0x4fa>
                default:
                case RUNNING_HTP:
                    frame.field.header.memoria.status = 0;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	811a      	strh	r2, [r3, #8]
                    frame.field.header.u8NumData = 0;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	70da      	strb	r2, [r3, #3]
                    frame.field.header.memoria.status |= ((uint16_t) PROTSLV_MEM_STAT_RUNNING) << (2 * (uint16_t) frame.field.header.tipooperacion.bit_field.u8acces_mem);
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d60:	891b      	ldrh	r3, [r3, #8]
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d80:	811a      	strh	r2, [r3, #8]
                    break;
 8001d82:	e04b      	b.n	8001e1c <PROTSLV_Motor+0x560>
                case ERROR_HTP:
                    frame.field.header.memoria.status = 0;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	811a      	strh	r2, [r3, #8]
                    frame.field.header.u8NumData = 0;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	70da      	strb	r2, [r3, #3]
                    frame.field.header.memoria.status |= ((uint16_t) PROTSLV_MEM_STAT_ABORTED) << (2 * (uint16_t) frame.field.header.tipooperacion.bit_field.u8acces_mem);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d92:	891b      	ldrh	r3, [r3, #8]
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001d98:	785b      	ldrb	r3, [r3, #1]
 8001d9a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2103      	movs	r1, #3
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001db2:	811a      	strh	r2, [r3, #8]
                    break;
 8001db4:	e032      	b.n	8001e1c <PROTSLV_Motor+0x560>
                case IDLE_HTP:
                    frame.field.header.memoria.status = 0;
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	811a      	strh	r2, [r3, #8]
                    frame.field.header.u8NumData = 0;
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	70da      	strb	r2, [r3, #3]
                    frame.field.header.memoria.status |= ((uint16_t) PROTSLV_MEM_STAT_IDLE) << (2 * (uint16_t) frame.field.header.tipooperacion.bit_field.u8acces_mem);
 8001dc2:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001dc4:	891a      	ldrh	r2, [r3, #8]
 8001dc6:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <PROTSLV_Motor+0x514>)
 8001dc8:	811a      	strh	r2, [r3, #8]
                    break;
 8001dca:	e027      	b.n	8001e1c <PROTSLV_Motor+0x560>
 8001dcc:	200000a8 	.word	0x200000a8
 8001dd0:	200000e8 	.word	0x200000e8
 8001dd4:	200001fb 	.word	0x200001fb
 8001dd8:	200000f8 	.word	0x200000f8
 8001ddc:	200001fc 	.word	0x200001fc
                case SUCCESS_HTP:
                    frame.field.header.memoria.status = 0;
 8001de0:	4b9d      	ldr	r3, [pc, #628]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	811a      	strh	r2, [r3, #8]
                    frame.field.header.u8NumData = protslv.u8TamanyOrdreAcceptada;
 8001de6:	4b9d      	ldr	r3, [pc, #628]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001de8:	791a      	ldrb	r2, [r3, #4]
 8001dea:	4b9b      	ldr	r3, [pc, #620]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001dec:	70da      	strb	r2, [r3, #3]
                    frame.field.header.memaddr.addres = protslv.u32AddrOrdreAcceptada;
 8001dee:	4b9b      	ldr	r3, [pc, #620]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4a99      	ldr	r2, [pc, #612]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001df4:	6053      	str	r3, [r2, #4]
                    frame.field.header.memoria.status |= ((uint16_t) PROTSLV_MEM_STAT_FINISHED) << (2 * (uint16_t) frame.field.header.tipooperacion.bit_field.u8acces_mem);
 8001df6:	4b98      	ldr	r3, [pc, #608]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001df8:	891b      	ldrh	r3, [r3, #8]
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	4b96      	ldr	r3, [pc, #600]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001dfe:	785b      	ldrb	r3, [r3, #1]
 8001e00:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2102      	movs	r1, #2
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b90      	ldr	r3, [pc, #576]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001e18:	811a      	strh	r2, [r3, #8]
                    break;
 8001e1a:	bf00      	nop
            }
            for (i = 0; i < CMP_MAX_MEMORIES; i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	713b      	strb	r3, [r7, #4]
 8001e20:	e023      	b.n	8001e6a <PROTSLV_Motor+0x5ae>
                if (i != frame.field.header.tipooperacion.bit_field.u8acces_mem) {
 8001e22:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	793b      	ldrb	r3, [r7, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d016      	beq.n	8001e62 <PROTSLV_Motor+0x5a6>
                    frame.field.header.memoria.status |= ((uint16_t) MemoryMap.var.cabecera_fw.mems_status[i].bit_field.stat) << (2 * i);
 8001e34:	4b88      	ldr	r3, [pc, #544]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001e36:	891b      	ldrh	r3, [r3, #8]
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	793b      	ldrb	r3, [r7, #4]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <PROTSLV_Motor+0x7a4>)
 8001e40:	440b      	add	r3, r1
 8001e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e46:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	793b      	ldrb	r3, [r7, #4]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b7e      	ldr	r3, [pc, #504]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001e60:	811a      	strh	r2, [r3, #8]
            for (i = 0; i < CMP_MAX_MEMORIES; i++) {
 8001e62:	793b      	ldrb	r3, [r7, #4]
 8001e64:	3301      	adds	r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	713b      	strb	r3, [r7, #4]
 8001e6a:	793b      	ldrb	r3, [r7, #4]
 8001e6c:	2b07      	cmp	r3, #7
 8001e6e:	d9d8      	bls.n	8001e22 <PROTSLV_Motor+0x566>
                }
            }

            protslv.u8ProtocolMotor = PROTSLV_STAT_PREPARE_ANSWER;
 8001e70:	4b7a      	ldr	r3, [pc, #488]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001e72:	220a      	movs	r2, #10
 8001e74:	705a      	strb	r2, [r3, #1]
            break;
 8001e76:	e191      	b.n	800219c <PROTSLV_Motor+0x8e0>
        case PROTSLV_STAT_PREPARE_ANSWER:
            MemoryMap.var.puerto485_slv.u32TramasOK++;
 8001e78:	4b79      	ldr	r3, [pc, #484]	; (8002060 <PROTSLV_Motor+0x7a4>)
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4a78      	ldr	r2, [pc, #480]	; (8002060 <PROTSLV_Motor+0x7a4>)
 8001e80:	65d3      	str	r3, [r2, #92]	; 0x5c
            if (frame.field.header.u8AddrSlave == 0) {
 8001e82:	4b75      	ldr	r3, [pc, #468]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <PROTSLV_Motor+0x5da>
                /* plot broadcast in context */
                // TODO WDT clear ! ClrWdt();
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_ADDR;
 8001e8a:	4b74      	ldr	r3, [pc, #464]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	705a      	strb	r2, [r3, #1]
                retorn = SUCCESS_HTP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	717b      	strb	r3, [r7, #5]
                frame.field.u16FrameChecksum++;

                protslv.u8ProtocolMotor = PROTSLV_STAT_ENVIAR_HEADER;

            }
            break;
 8001e94:	e182      	b.n	800219c <PROTSLV_Motor+0x8e0>
                frame.field.header.tipooperacion.bit_field.u8Direction = 1;
 8001e96:	4a70      	ldr	r2, [pc, #448]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001e98:	7853      	ldrb	r3, [r2, #1]
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	7053      	strb	r3, [r2, #1]
                frame.field.header.u8ProtocolVers = MemoryMap.var.cabecera_fw.board_status.status;
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <PROTSLV_Motor+0x7a4>)
 8001ea2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001ea6:	4b6c      	ldr	r3, [pc, #432]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001ea8:	709a      	strb	r2, [r3, #2]
                frame.field.header.u8ChecksumSlaveAddr = MemoryMap.var.cabecera_fw.board_alarms.alarms; /* comodin 1 */
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <PROTSLV_Motor+0x7a4>)
 8001eac:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001eb0:	4b69      	ldr	r3, [pc, #420]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001eb2:	729a      	strb	r2, [r3, #10]
                frame.field.header.u8ChecksumMemAddr = MemoryMap.var.fuentes.mainStatus; /* comodin 2 */
 8001eb4:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <PROTSLV_Motor+0x7a4>)
 8001eb6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001eba:	4b67      	ldr	r3, [pc, #412]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001ebc:	72da      	strb	r2, [r3, #11]
                frame.field.u16FrameChecksum = 0;
 8001ebe:	4b66      	ldr	r3, [pc, #408]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	821a      	strh	r2, [r3, #16]
                for (i = 0; i < sizeof (protslv_header_t); i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	713b      	strb	r3, [r7, #4]
 8001ec8:	e00e      	b.n	8001ee8 <PROTSLV_Motor+0x62c>
                    frame.field.u16FrameChecksum += frame.ptucBytes[i];
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001ecc:	8a1a      	ldrh	r2, [r3, #16]
 8001ece:	793b      	ldrb	r3, [r7, #4]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001ed4:	5c5b      	ldrb	r3, [r3, r1]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001ede:	821a      	strh	r2, [r3, #16]
                for (i = 0; i < sizeof (protslv_header_t); i++) {
 8001ee0:	793b      	ldrb	r3, [r7, #4]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	713b      	strb	r3, [r7, #4]
 8001ee8:	793b      	ldrb	r3, [r7, #4]
 8001eea:	2b0b      	cmp	r3, #11
 8001eec:	d9ed      	bls.n	8001eca <PROTSLV_Motor+0x60e>
                for (i = 0; i < frame.field.header.u8NumData; i++) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	713b      	strb	r3, [r7, #4]
 8001ef2:	e00f      	b.n	8001f14 <PROTSLV_Motor+0x658>
                    frame.field.u16FrameChecksum += frame.field.ptu8Data[i];
 8001ef4:	4b58      	ldr	r3, [pc, #352]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001ef6:	8a1a      	ldrh	r2, [r3, #16]
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	7939      	ldrb	r1, [r7, #4]
 8001efe:	440b      	add	r3, r1
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001f0a:	821a      	strh	r2, [r3, #16]
                for (i = 0; i < frame.field.header.u8NumData; i++) {
 8001f0c:	793b      	ldrb	r3, [r7, #4]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	713b      	strb	r3, [r7, #4]
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001f16:	78da      	ldrb	r2, [r3, #3]
 8001f18:	793b      	ldrb	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d8ea      	bhi.n	8001ef4 <PROTSLV_Motor+0x638>
                frame.field.u16FrameChecksum ^= 0xFFFF;
 8001f1e:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001f20:	8a1b      	ldrh	r3, [r3, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	4b4c      	ldr	r3, [pc, #304]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001f28:	821a      	strh	r2, [r3, #16]
                frame.field.u16FrameChecksum++;
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001f2c:	8a1b      	ldrh	r3, [r3, #16]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b49      	ldr	r3, [pc, #292]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001f34:	821a      	strh	r2, [r3, #16]
                protslv.u8ProtocolMotor = PROTSLV_STAT_ENVIAR_HEADER;
 8001f36:	4b49      	ldr	r3, [pc, #292]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001f38:	220b      	movs	r2, #11
 8001f3a:	705a      	strb	r2, [r3, #1]
            break;
 8001f3c:	e12e      	b.n	800219c <PROTSLV_Motor+0x8e0>
        case PROTSLV_STAT_ENVIAR_HEADER: //send the header
            if (protslv.Transmit(RS485_SLV, (uint8_t *) (&frame.field.header), sizeof (protslv_header_t), 0) == SUCCESS_HTP) {
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001f40:	69dc      	ldr	r4, [r3, #28]
 8001f42:	2300      	movs	r3, #0
 8001f44:	220c      	movs	r2, #12
 8001f46:	4944      	ldr	r1, [pc, #272]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001f48:	2000      	movs	r0, #0
 8001f4a:	47a0      	blx	r4
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	f040 8119 	bne.w	8002186 <PROTSLV_Motor+0x8ca>
                protslv.u8ProtocolMotor = PROTSLV_STAT_ENVIAR_DADES;
 8001f54:	4b41      	ldr	r3, [pc, #260]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	705a      	strb	r2, [r3, #1]
            }
            break;
 8001f5a:	e114      	b.n	8002186 <PROTSLV_Motor+0x8ca>
        case PROTSLV_STAT_ENVIAR_DADES://send the data
            if (protslv.Transmit(RS485_SLV, frame.field.ptu8Data, frame.field.header.u8NumData, 0) == SUCCESS_HTP) {
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001f5e:	69dc      	ldr	r4, [r3, #28]
 8001f60:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001f62:	68d9      	ldr	r1, [r3, #12]
 8001f64:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001f66:	78db      	ldrb	r3, [r3, #3]
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	47a0      	blx	r4
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	f040 8109 	bne.w	800218a <PROTSLV_Motor+0x8ce>
                protslv.u8ProtocolMotor = PROTSLV_STAT_ENVIAR_CHECKSUM;
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001f7a:	220d      	movs	r2, #13
 8001f7c:	705a      	strb	r2, [r3, #1]
            }
            break;
 8001f7e:	e104      	b.n	800218a <PROTSLV_Motor+0x8ce>
        case PROTSLV_STAT_ENVIAR_CHECKSUM://send the checksum
        	//frame.field.u16FrameChecksum = 0xffae;
            if (protslv.Transmit(RS485_SLV, (uint8_t *) (&frame.field.u16FrameChecksum), 2, 1) == SUCCESS_HTP) {
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001f82:	69dc      	ldr	r4, [r3, #28]
 8001f84:	2301      	movs	r3, #1
 8001f86:	2202      	movs	r2, #2
 8001f88:	4936      	ldr	r1, [pc, #216]	; (8002064 <PROTSLV_Motor+0x7a8>)
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	47a0      	blx	r4
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	f040 80fc 	bne.w	800218e <PROTSLV_Motor+0x8d2>
                //								HAL_GPIO_TogglePin(DBG_LED_2_GPIO_Port, DBG_LED_2_Pin);
                // TODO CLR WDT ClrWdt();
                retorn = SUCCESS_HTP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	717b      	strb	r3, [r7, #5]
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_ADDR;
 8001f9a:	4b30      	ldr	r3, [pc, #192]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	705a      	strb	r2, [r3, #1]
                if (u8OperacioEnCurs != 0) {
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <PROTSLV_Motor+0x7ac>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <PROTSLV_Motor+0x6f0>
                    retorn = ERROR_HTP;
 8001fa8:	23ff      	movs	r3, #255	; 0xff
 8001faa:	717b      	strb	r3, [r7, #5]
                }
                retorn = SUCCESS_HTP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	717b      	strb	r3, [r7, #5]
            }
            break;
 8001fb0:	e0ed      	b.n	800218e <PROTSLV_Motor+0x8d2>
        case PROTSLV_STAT_ORDRE_KO:
            /* I will be receiving data, if there is any, ONLY if it is written */
            //						BUZZ_Configure(1, 80, PATRO_SO_WARNING);
            if (frame.field.header.tipooperacion.bit_field.u8operation == PROTSLV_OP_READING) {
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d108      	bne.n	8001fd2 <PROTSLV_Motor+0x716>
                /* numb bytes es diferent de 0, pero es una lectura */
                protslv.u32TicksProtocol = TICKS_GetTicks();
 8001fc0:	f001 fc46 	bl	8003850 <TICKS_GetTicks>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a25      	ldr	r2, [pc, #148]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001fc8:	60d3      	str	r3, [r2, #12]
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_CHECKSUM_ORDRE_KO;
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001fcc:	2211      	movs	r2, #17
 8001fce:	705a      	strb	r2, [r3, #1]
            } else {
                protslv.u8BytesRebuts = 0;
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_DADES_ORDRE_KO1;
            }
            break;
 8001fd0:	e0e4      	b.n	800219c <PROTSLV_Motor+0x8e0>
                protslv.u8BytesRebuts = 0;
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	709a      	strb	r2, [r3, #2]
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_DADES_ORDRE_KO1;
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001fda:	220f      	movs	r2, #15
 8001fdc:	705a      	strb	r2, [r3, #1]
            break;
 8001fde:	e0dd      	b.n	800219c <PROTSLV_Motor+0x8e0>
        case PROTSLV_STAT_ESPERANT_DADES_ORDRE_KO1:
            protslv.u32TicksProtocol = TICKS_GetTicks();
 8001fe0:	f001 fc36 	bl	8003850 <TICKS_GetTicks>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001fe8:	60d3      	str	r3, [r2, #12]
            if (protslv.u8BytesRebuts < frame.field.header.u8NumData) {
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001fec:	789a      	ldrb	r2, [r3, #2]
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <PROTSLV_Motor+0x79c>)
 8001ff0:	78db      	ldrb	r3, [r3, #3]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d203      	bcs.n	8001ffe <PROTSLV_Motor+0x742>
                /* queden dades per rebre */
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_DADES_ORDRE_KO2;
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <PROTSLV_Motor+0x7a0>)
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	705a      	strb	r2, [r3, #1]
            } else {
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_CHECKSUM_ORDRE_KO;
            }
            break;
 8001ffc:	e0ce      	b.n	800219c <PROTSLV_Motor+0x8e0>
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_CHECKSUM_ORDRE_KO;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <PROTSLV_Motor+0x7a0>)
 8002000:	2211      	movs	r2, #17
 8002002:	705a      	strb	r2, [r3, #1]
            break;
 8002004:	e0ca      	b.n	800219c <PROTSLV_Motor+0x8e0>
        case PROTSLV_STAT_ESPERANT_DADES_ORDRE_KO2:
            if (protslv.Receive(RS485_SLV, &i, 1) == SUCCESS_HTP) {
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <PROTSLV_Motor+0x7a0>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	1d39      	adds	r1, r7, #4
 800200c:	2201      	movs	r2, #1
 800200e:	2000      	movs	r0, #0
 8002010:	4798      	blx	r3
 8002012:	4603      	mov	r3, r0
 8002014:	2b01      	cmp	r3, #1
 8002016:	d10e      	bne.n	8002036 <PROTSLV_Motor+0x77a>
                frame.field.u16FrameChecksum += i;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <PROTSLV_Motor+0x79c>)
 800201a:	8a1a      	ldrh	r2, [r3, #16]
 800201c:	793b      	ldrb	r3, [r7, #4]
 800201e:	b29b      	uxth	r3, r3
 8002020:	4413      	add	r3, r2
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <PROTSLV_Motor+0x79c>)
 8002026:	821a      	strh	r2, [r3, #16]
                protslv.u8BytesRebuts++;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <PROTSLV_Motor+0x7a0>)
 800202a:	789b      	ldrb	r3, [r3, #2]
 800202c:	3301      	adds	r3, #1
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <PROTSLV_Motor+0x7a0>)
 8002032:	709a      	strb	r2, [r3, #2]
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_DATA) {
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
                u8ErrorNumber = 5; //10;
            }
            break;
 8002034:	e0ad      	b.n	8002192 <PROTSLV_Motor+0x8d6>
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_DATA) {
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <PROTSLV_Motor+0x7a0>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	4618      	mov	r0, r3
 800203c:	f001 fc13 	bl	8003866 <TICKS_DiffTicks>
 8002040:	4603      	mov	r3, r0
 8002042:	2b03      	cmp	r3, #3
 8002044:	f240 80a5 	bls.w	8002192 <PROTSLV_Motor+0x8d6>
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <PROTSLV_Motor+0x7a0>)
 800204a:	2213      	movs	r2, #19
 800204c:	705a      	strb	r2, [r3, #1]
                u8ErrorNumber = 5; //10;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <PROTSLV_Motor+0x7b0>)
 8002050:	2205      	movs	r2, #5
 8002052:	701a      	strb	r2, [r3, #0]
            break;
 8002054:	e09d      	b.n	8002192 <PROTSLV_Motor+0x8d6>
 8002056:	bf00      	nop
 8002058:	200000e8 	.word	0x200000e8
 800205c:	200000a8 	.word	0x200000a8
 8002060:	20000234 	.word	0x20000234
 8002064:	200000f8 	.word	0x200000f8
 8002068:	200001fc 	.word	0x200001fc
 800206c:	200001fb 	.word	0x200001fb
        case PROTSLV_STAT_ESPERANT_CHECKSUM_ORDRE_KO:
            if (protslv.Receive(RS485_SLV, (uint8_t *) (&frame.field.u16FrameChecksum), 2) == SUCCESS_HTP) {
 8002070:	4b4d      	ldr	r3, [pc, #308]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2202      	movs	r2, #2
 8002076:	494d      	ldr	r1, [pc, #308]	; (80021ac <PROTSLV_Motor+0x8f0>)
 8002078:	2000      	movs	r0, #0
 800207a:	4798      	blx	r3
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d103      	bne.n	800208a <PROTSLV_Motor+0x7ce>
                protslv.u8ProtocolMotor = PROTSLV_STAT_VERIFICACIO_CHECKSUM_ORDRE_KO;
 8002082:	4b49      	ldr	r3, [pc, #292]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 8002084:	2212      	movs	r2, #18
 8002086:	705a      	strb	r2, [r3, #1]
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_CHECKSUM) {
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
                u8ErrorNumber = 6; //11;
            }
            break;
 8002088:	e085      	b.n	8002196 <PROTSLV_Motor+0x8da>
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_CHECKSUM) {
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4618      	mov	r0, r3
 8002090:	f001 fbe9 	bl	8003866 <TICKS_DiffTicks>
 8002094:	4603      	mov	r3, r0
 8002096:	2b03      	cmp	r3, #3
 8002098:	d97d      	bls.n	8002196 <PROTSLV_Motor+0x8da>
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 800209c:	2213      	movs	r2, #19
 800209e:	705a      	strb	r2, [r3, #1]
                u8ErrorNumber = 6; //11;
 80020a0:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <PROTSLV_Motor+0x8f4>)
 80020a2:	2206      	movs	r2, #6
 80020a4:	701a      	strb	r2, [r3, #0]
            break;
 80020a6:	e076      	b.n	8002196 <PROTSLV_Motor+0x8da>
        case PROTSLV_STAT_VERIFICACIO_CHECKSUM_ORDRE_KO:
            for (i = 0; i < sizeof (protslv_header_t); i++) {
 80020a8:	2300      	movs	r3, #0
 80020aa:	713b      	strb	r3, [r7, #4]
 80020ac:	e00e      	b.n	80020cc <PROTSLV_Motor+0x810>
                frame.field.u16FrameChecksum += frame.ptucBytes[i];
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <PROTSLV_Motor+0x8f8>)
 80020b0:	8a1a      	ldrh	r2, [r3, #16]
 80020b2:	793b      	ldrb	r3, [r7, #4]
 80020b4:	4619      	mov	r1, r3
 80020b6:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <PROTSLV_Motor+0x8f8>)
 80020b8:	5c5b      	ldrb	r3, [r3, r1]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4413      	add	r3, r2
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <PROTSLV_Motor+0x8f8>)
 80020c2:	821a      	strh	r2, [r3, #16]
            for (i = 0; i < sizeof (protslv_header_t); i++) {
 80020c4:	793b      	ldrb	r3, [r7, #4]
 80020c6:	3301      	adds	r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	713b      	strb	r3, [r7, #4]
 80020cc:	793b      	ldrb	r3, [r7, #4]
 80020ce:	2b0b      	cmp	r3, #11
 80020d0:	d9ed      	bls.n	80020ae <PROTSLV_Motor+0x7f2>
            }
            if (Aux == 0) {
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d118      	bne.n	800210a <PROTSLV_Motor+0x84e>
                /* correct package, i will send reply */
                frame.field.header.u8NumData = 0;
 80020d8:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <PROTSLV_Motor+0x8f8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	70da      	strb	r2, [r3, #3]
                frame.field.header.memoria.status |= ((uint16_t) PROTSLV_MEM_STAT_ABORTED) << (2 * (uint16_t) frame.field.header.tipooperacion.bit_field.u8acces_mem);
 80020de:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <PROTSLV_Motor+0x8f8>)
 80020e0:	891b      	ldrh	r3, [r3, #8]
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <PROTSLV_Motor+0x8f8>)
 80020e6:	785b      	ldrb	r3, [r3, #1]
 80020e8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2103      	movs	r1, #3
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <PROTSLV_Motor+0x8f8>)
 8002100:	811a      	strh	r2, [r3, #8]
                protslv.u8ProtocolMotor = PROTSLV_STAT_PREPARE_ANSWER;
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 8002104:	220a      	movs	r2, #10
 8002106:	705a      	strb	r2, [r3, #1]
            } else {
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
                u8ErrorNumber = 7; //14;
            }
            break;
 8002108:	e048      	b.n	800219c <PROTSLV_Motor+0x8e0>
                protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME1;
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 800210c:	2213      	movs	r2, #19
 800210e:	705a      	strb	r2, [r3, #1]
                u8ErrorNumber = 7; //14;
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <PROTSLV_Motor+0x8f4>)
 8002112:	2207      	movs	r2, #7
 8002114:	701a      	strb	r2, [r3, #0]
            break;
 8002116:	e041      	b.n	800219c <PROTSLV_Motor+0x8e0>
            //if(ATPARSER_AddFrameError(frame.field.header.u8AddrSlave, u8ErrorNumber+ATPARSER_SLV_INIT_ERRORS) == SUCCESS_HTP)
        {
            /* i'm going to sync for quiet time */
            //						BUZZ_Configure(1, 80, PATRO_SO_ALARMA);
            //						HAL_GPIO_WritePin(DBG_LED_4_GPIO_Port, DBG_LED_4_Pin, GPIO_PIN_SET);
            MemoryMap.var.puerto485_slv.u32TramasKO++; /* quizas es trama erronea porque no era para mi... */
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <PROTSLV_Motor+0x8fc>)
 800211a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211c:	3301      	adds	r3, #1
 800211e:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <PROTSLV_Motor+0x8fc>)
 8002120:	6613      	str	r3, [r2, #96]	; 0x60
            protslv.u32TicksProtocol = TICKS_GetTicks();
 8002122:	f001 fb95 	bl	8003850 <TICKS_GetTicks>
 8002126:	4603      	mov	r3, r0
 8002128:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 800212a:	60d3      	str	r3, [r2, #12]
            protslv.u8ProtocolMotor = PROTSLV_STAT_SINCRONISME2;
 800212c:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 800212e:	2214      	movs	r2, #20
 8002130:	705a      	strb	r2, [r3, #1]
        }
            break;
 8002132:	e033      	b.n	800219c <PROTSLV_Motor+0x8e0>
        case PROTSLV_STAT_SINCRONISME2:
            if (protslv.QuantsBytesBufferRX(RS485_SLV) > 0) {
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	2000      	movs	r0, #0
 800213a:	4798      	blx	r3
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <PROTSLV_Motor+0x89a>
                protslv.ResetBuffers(RS485_SLV);
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2000      	movs	r0, #0
 8002148:	4798      	blx	r3
                protslv.u32TicksProtocol = TICKS_GetTicks();
 800214a:	f001 fb81 	bl	8003850 <TICKS_GetTicks>
 800214e:	4603      	mov	r3, r0
 8002150:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 8002152:	60d3      	str	r3, [r2, #12]
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_SYNC) {
                //								HAL_GPIO_WritePin(DBG_LED_4_GPIO_Port, DBG_LED_4_Pin, GPIO_PIN_RESET);
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_ADDR;
                retorn = ERROR_HTP;
            }
            break;
 8002154:	e021      	b.n	800219a <PROTSLV_Motor+0x8de>
            } else if (TICKS_DiffTicks(protslv.u32TicksProtocol) > PROTSLV_TIME_WAITING_SYNC) {
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	4618      	mov	r0, r3
 800215c:	f001 fb83 	bl	8003866 <TICKS_DiffTicks>
 8002160:	4603      	mov	r3, r0
 8002162:	2b03      	cmp	r3, #3
 8002164:	d919      	bls.n	800219a <PROTSLV_Motor+0x8de>
                protslv.u8ProtocolMotor = PROTSLV_STAT_ESPERANT_ADDR;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <PROTSLV_Motor+0x8ec>)
 8002168:	2200      	movs	r2, #0
 800216a:	705a      	strb	r2, [r3, #1]
                retorn = ERROR_HTP;
 800216c:	23ff      	movs	r3, #255	; 0xff
 800216e:	717b      	strb	r3, [r7, #5]
            break;
 8002170:	e013      	b.n	800219a <PROTSLV_Motor+0x8de>
            break;
 8002172:	bf00      	nop
 8002174:	e012      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 8002176:	bf00      	nop
 8002178:	e010      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 800217a:	bf00      	nop
 800217c:	e00e      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 800217e:	bf00      	nop
 8002180:	e00c      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 8002182:	bf00      	nop
 8002184:	e00a      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 8002186:	bf00      	nop
 8002188:	e008      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 800218a:	bf00      	nop
 800218c:	e006      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 800218e:	bf00      	nop
 8002190:	e004      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 8002192:	bf00      	nop
 8002194:	e002      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 8002196:	bf00      	nop
 8002198:	e000      	b.n	800219c <PROTSLV_Motor+0x8e0>
            break;
 800219a:	bf00      	nop
    }
    return retorn;
 800219c:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bdb0      	pop	{r4, r5, r7, pc}
 80021a8:	200000a8 	.word	0x200000a8
 80021ac:	200000f8 	.word	0x200000f8
 80021b0:	200001fb 	.word	0x200001fb
 80021b4:	200000e8 	.word	0x200000e8
 80021b8:	20000234 	.word	0x20000234

080021bc <ActionNULL>:

returnstatus_t ActionNULL(uint8_t u8Operation, uint8_t u8Order, uint32_t u32Addr, uint8_t* ptu8Dades, uint16_t u16NumDades) {
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60ba      	str	r2, [r7, #8]
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	460b      	mov	r3, r1
 80021cc:	73bb      	strb	r3, [r7, #14]
    //frame.field.header.errorcode.bit_field.u8MemNoDefinida = 1;
    return ERROR_HTP;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <CheckHeader>:

returnstatus_t CheckHeader(protslv_header_t cab) {
 80021de:	b480      	push	{r7}
 80021e0:	b087      	sub	sp, #28
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint8_t temporal, i;
    uint16_t Aux;

    if (cab.u8ProtocolVers != PROTSLV_VERSION) return ERROR_HTP;
 80021ea:	79bb      	ldrb	r3, [r7, #6]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d002      	beq.n	80021f6 <CheckHeader+0x18>
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
 80021f4:	e042      	b.n	800227c <CheckHeader+0x9e>
    if (cab.tipooperacion.bit_field.u8Direction != 0) return ERROR_HTP;
 80021f6:	797b      	ldrb	r3, [r7, #5]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <CheckHeader+0x2a>
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	e039      	b.n	800227c <CheckHeader+0x9e>
    temporal = (uint8_t) (cab.u8AddrSlave + cab.tipooperacion.value + cab.u8ChecksumSlaveAddr);
 8002208:	793a      	ldrb	r2, [r7, #4]
 800220a:	797b      	ldrb	r3, [r7, #5]
 800220c:	4413      	add	r3, r2
 800220e:	b2da      	uxtb	r2, r3
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	4413      	add	r3, r2
 8002214:	75fb      	strb	r3, [r7, #23]
    if (temporal != 0) return ERROR_HTP;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <CheckHeader+0x44>
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	e02c      	b.n	800227c <CheckHeader+0x9e>

    temporal = cab.u8ChecksumMemAddr;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	75fb      	strb	r3, [r7, #23]
    for (i = 0; i < 4; i++) {
 8002226:	2300      	movs	r3, #0
 8002228:	75bb      	strb	r3, [r7, #22]
 800222a:	e00a      	b.n	8002242 <CheckHeader+0x64>
        temporal += cab.memaddr.ptu8Bytes[i];
 800222c:	7dbb      	ldrb	r3, [r7, #22]
 800222e:	3318      	adds	r3, #24
 8002230:	443b      	add	r3, r7
 8002232:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	4413      	add	r3, r2
 800223a:	75fb      	strb	r3, [r7, #23]
    for (i = 0; i < 4; i++) {
 800223c:	7dbb      	ldrb	r3, [r7, #22]
 800223e:	3301      	adds	r3, #1
 8002240:	75bb      	strb	r3, [r7, #22]
 8002242:	7dbb      	ldrb	r3, [r7, #22]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d9f1      	bls.n	800222c <CheckHeader+0x4e>
    }
    if (temporal != 0) {
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <CheckHeader+0x76>
        return ERROR_HTP;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	e013      	b.n	800227c <CheckHeader+0x9e>
    }

    Aux = ((uint16_t) 0x0003) << (2 * (uint16_t) cab.tipooperacion.bit_field.u8acces_mem);
 8002254:	797b      	ldrb	r3, [r7, #5]
 8002256:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	82bb      	strh	r3, [r7, #20]
    if ((cab.memoria.status & (~Aux)) != 0x0000) {
 8002266:	89bb      	ldrh	r3, [r7, #12]
 8002268:	461a      	mov	r2, r3
 800226a:	8abb      	ldrh	r3, [r7, #20]
 800226c:	43db      	mvns	r3, r3
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <CheckHeader+0x9c>
        /* the validation field of the 1st byte of the frame is not the same as the composition of bytes 7 and 8 of the frame */
        /* the plot is to access a single peripheral */
        return ERROR_HTP;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	e000      	b.n	800227c <CheckHeader+0x9e>
    }

    return SUCCESS_HTP;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <RS485_Init>:
TX485_Status xEstat485[MAX_CHANNEL_RS485];

/* FUNCIONES EXTERNAS */
/* ------------------------------------------------------------------------------------------ */
returnstatus_t RS485_Init(uint8_t u8Channel)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]

  RS485_TRANSMIT_DISABLE(u8Channel);
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002298:	4808      	ldr	r0, [pc, #32]	; (80022bc <RS485_Init+0x34>)
 800229a:	f003 f911 	bl	80054c0 <HAL_GPIO_WritePin>
    
  xEstat485[u8Channel].u8EstatBusInter=0;
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <RS485_Init+0x38>)
 80022a2:	2100      	movs	r1, #0
 80022a4:	54d1      	strb	r1, [r2, r3]

  return (UART_Init(ptUART_CH[u8Channel]));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <RS485_Init+0x3c>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 faed 	bl	800388c <UART_Init>
 80022b2:	4603      	mov	r3, r0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40020000 	.word	0x40020000
 80022c0:	20000200 	.word	0x20000200
 80022c4:	20000000 	.word	0x20000000

080022c8 <RS485_Transmit>:


returnstatus_t RS485_Transmit(uint8_t u8Channel, uint8_t* ptu8Dades, uint16_t u16NumDades, uint8_t u8LastPacket)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6039      	str	r1, [r7, #0]
 80022d0:	4611      	mov	r1, r2
 80022d2:	461a      	mov	r2, r3
 80022d4:	4603      	mov	r3, r0
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	460b      	mov	r3, r1
 80022da:	80bb      	strh	r3, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	71bb      	strb	r3, [r7, #6]
    returnstatus_t tmp;
    uint8_t i;

    tmp = RUNNING_HTP;
 80022e0:	23fe      	movs	r3, #254	; 0xfe
 80022e2:	73fb      	strb	r3, [r7, #15]
    
    switch(xEstat485[u8Channel].u8EstatBusInter)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	4a42      	ldr	r2, [pc, #264]	; (80023f0 <RS485_Transmit+0x128>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d872      	bhi.n	80023d4 <RS485_Transmit+0x10c>
 80022ee:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <RS485_Transmit+0x2c>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	08002311 	.word	0x08002311
 80022f8:	0800234b 	.word	0x0800234b
 80022fc:	08002385 	.word	0x08002385
 8002300:	080023d5 	.word	0x080023d5
 8002304:	080023d5 	.word	0x080023d5
 8002308:	080023d5 	.word	0x080023d5
 800230c:	080023bb 	.word	0x080023bb
    {
    	case 0:
            if(u16NumDades > 0)
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <RS485_Transmit+0x6a>
            {
			  RS485_TRANSMIT_ENABLE(u8Channel); // TX_ENABLE a 1 -> comencem a enviar
 8002316:	2201      	movs	r2, #1
 8002318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800231c:	4835      	ldr	r0, [pc, #212]	; (80023f4 <RS485_Transmit+0x12c>)
 800231e:	f003 f8cf 	bl	80054c0 <HAL_GPIO_WritePin>
              xEstat485[u8Channel].u8EstatBusInter++;
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4a32      	ldr	r2, [pc, #200]	; (80023f0 <RS485_Transmit+0x128>)
 8002326:	5cd2      	ldrb	r2, [r2, r3]
 8002328:	3201      	adds	r2, #1
 800232a:	b2d1      	uxtb	r1, r2
 800232c:	4a30      	ldr	r2, [pc, #192]	; (80023f0 <RS485_Transmit+0x128>)
 800232e:	54d1      	strb	r1, [r2, r3]
							{
									RS485_TRANSMIT_DISABLE(u8Channel);
							}
							tmp = SUCCESS_HTP;
            }
            break;
 8002330:	e058      	b.n	80023e4 <RS485_Transmit+0x11c>
							if(u8LastPacket == 1)
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <RS485_Transmit+0x7c>
									RS485_TRANSMIT_DISABLE(u8Channel);
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233e:	482d      	ldr	r0, [pc, #180]	; (80023f4 <RS485_Transmit+0x12c>)
 8002340:	f003 f8be 	bl	80054c0 <HAL_GPIO_WritePin>
							tmp = SUCCESS_HTP;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
            break;
 8002348:	e04c      	b.n	80023e4 <RS485_Transmit+0x11c>
			case 1:
				switch(UART_Transmit(ptUART_CH[u8Channel], ptu8Dades, u16NumDades))
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <RS485_Transmit+0x130>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	88ba      	ldrh	r2, [r7, #4]
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f001 fb91 	bl	8003a7c <UART_Transmit>
 800235a:	4603      	mov	r3, r0
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d009      	beq.n	8002376 <RS485_Transmit+0xae>
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10c      	bne.n	8002380 <RS485_Transmit+0xb8>
				{
					case SUCCESS_HTP: xEstat485[u8Channel].u8EstatBusInter++; break;
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <RS485_Transmit+0x128>)
 800236a:	5cd2      	ldrb	r2, [r2, r3]
 800236c:	3201      	adds	r2, #1
 800236e:	b2d1      	uxtb	r1, r2
 8002370:	4a1f      	ldr	r2, [pc, #124]	; (80023f0 <RS485_Transmit+0x128>)
 8002372:	54d1      	strb	r1, [r2, r3]
 8002374:	e005      	b.n	8002382 <RS485_Transmit+0xba>
					case ERROR_HTP: xEstat485[u8Channel].u8EstatBusInter = 6; break;
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <RS485_Transmit+0x128>)
 800237a:	2106      	movs	r1, #6
 800237c:	54d1      	strb	r1, [r2, r3]
 800237e:	e000      	b.n	8002382 <RS485_Transmit+0xba>
					default: break;
 8002380:	bf00      	nop
				}
					break;
 8002382:	e02f      	b.n	80023e4 <RS485_Transmit+0x11c>
			case 2:
					i = UART_TransmitNOTFinished(ptUART_CH[u8Channel]);
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <RS485_Transmit+0x130>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	4618      	mov	r0, r3
 800238c:	f001 fd2a 	bl	8003de4 <UART_TransmitNOTFinished>
 8002390:	4603      	mov	r3, r0
 8002392:	73bb      	strb	r3, [r7, #14]
					if(i == 0)
 8002394:	7bbb      	ldrb	r3, [r7, #14]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d123      	bne.n	80023e2 <RS485_Transmit+0x11a>
					{
							//s'han enviat totes les dades
							if(u8LastPacket == 1)
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <RS485_Transmit+0xe4>
							{
									RS485_TRANSMIT_DISABLE(u8Channel);
 80023a0:	2200      	movs	r2, #0
 80023a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023a6:	4813      	ldr	r0, [pc, #76]	; (80023f4 <RS485_Transmit+0x12c>)
 80023a8:	f003 f88a 	bl	80054c0 <HAL_GPIO_WritePin>
							}
							xEstat485[u8Channel].u8EstatBusInter = 0;
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <RS485_Transmit+0x128>)
 80023b0:	2100      	movs	r1, #0
 80023b2:	54d1      	strb	r1, [r2, r3]
							tmp = SUCCESS_HTP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
					}
					break;
 80023b8:	e013      	b.n	80023e2 <RS485_Transmit+0x11a>
			case 6: // Reintentem o donem error?
					RS485_TRANSMIT_DISABLE(u8Channel);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <RS485_Transmit+0x12c>)
 80023c2:	f003 f87d 	bl	80054c0 <HAL_GPIO_WritePin>
					xEstat485[u8Channel].u8EstatBusInter=0;
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <RS485_Transmit+0x128>)
 80023ca:	2100      	movs	r1, #0
 80023cc:	54d1      	strb	r1, [r2, r3]
					tmp = ERROR_HTP;
 80023ce:	23ff      	movs	r3, #255	; 0xff
 80023d0:	73fb      	strb	r3, [r7, #15]
					break;
 80023d2:	e007      	b.n	80023e4 <RS485_Transmit+0x11c>

			default:
					xEstat485[u8Channel].u8EstatBusInter=0;
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <RS485_Transmit+0x128>)
 80023d8:	2100      	movs	r1, #0
 80023da:	54d1      	strb	r1, [r2, r3]
					tmp = ERROR_HTP;
 80023dc:	23ff      	movs	r3, #255	; 0xff
 80023de:	73fb      	strb	r3, [r7, #15]
					break;
 80023e0:	e000      	b.n	80023e4 <RS485_Transmit+0x11c>
					break;
 80023e2:	bf00      	nop
   }
   return tmp;
 80023e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000200 	.word	0x20000200
 80023f4:	40020000 	.word	0x40020000
 80023f8:	20000000 	.word	0x20000000

080023fc <RS485_Receive>:


returnstatus_t RS485_Receive(uint8_t u8Channel, uint8_t* ptu8Dades, uint16_t u16NumDades)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	4613      	mov	r3, r2
 800240a:	80bb      	strh	r3, [r7, #4]
	return (UART_Receive(ptUART_CH[u8Channel],ptu8Dades, u16NumDades));
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	4a06      	ldr	r2, [pc, #24]	; (8002428 <RS485_Receive+0x2c>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	88ba      	ldrh	r2, [r7, #4]
 8002414:	6839      	ldr	r1, [r7, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fbb2 	bl	8003b80 <UART_Receive>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000000 	.word	0x20000000

0800242c <RS485_QuantsBytesBufferRX>:

uint32_t RS485_QuantsBytesBufferRX(uint8_t u8Channel)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
    return (UART_QuantsBytesBufferRX(ptUART_CH[u8Channel]));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <RS485_QuantsBytesBufferRX+0x20>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	4618      	mov	r0, r3
 800243e:	f001 fad9 	bl	80039f4 <UART_QuantsBytesBufferRX>
 8002442:	4603      	mov	r3, r0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000000 	.word	0x20000000

08002450 <RS485_ResetBuffers>:


void RS485_ResetBuffers(uint8_t u8Channel)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
    UART_ResetTX(ptUART_CH[u8Channel]);
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <RS485_ResetBuffers+0x2c>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	4618      	mov	r0, r3
 8002462:	f001 fc2d 	bl	8003cc0 <UART_ResetTX>
    UART_ResetRX(ptUART_CH[u8Channel]);
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <RS485_ResetBuffers+0x2c>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fc4f 	bl	8003d10 <UART_ResetRX>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000

08002480 <standbyInit>:

void LED_Standby_CanviLED(uint8_t u8Channel, uint8_t u8Estat);

void SWITCH_Detect(void);

void standbyInit(void) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af02      	add	r7, sp, #8

    //Inicializamos motor
    standby.u8Motor = 0;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <standbyInit+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
    //Inicializamos el estado del standby
    standby.state = PCB_STATE_OFF;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <standbyInit+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	721a      	strb	r2, [r3, #8]

    //Variable de protocolo boardStatus OFF
    MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_OFF;
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <standbyInit+0x50>)
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    //Inicializamos led standby
    LED_Standby_Init();
 800249a:	f000 fc4f 	bl	8002d3c <LED_Standby_Init>
    
    switch_status.u8Value = 0;
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <standbyInit+0x54>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
    switch_status.u32Timer = TICKS_GetTicks();
 80024a4:	f001 f9d4 	bl	8003850 <TICKS_GetTicks>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <standbyInit+0x54>)
 80024ac:	6053      	str	r3, [r2, #4]
    LED_Standby_Configure(LED_STANDBY_1, 0, 0, 2000, 1, LED_STANDBY_TURN_OFF);
 80024ae:	2300      	movs	r3, #0
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	2301      	movs	r3, #1
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 fd82 	bl	8002fc8 <LED_Standby_Configure>

}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000214 	.word	0x20000214
 80024d0:	20000234 	.word	0x20000234
 80024d4:	20000228 	.word	0x20000228

080024d8 <standbyMotor>:
uint8_t debStand;
uint8_t ac_fail;
uint8_t temp_fail;
uint8_t fan_ok;
uint8_t colorLEDAnterior;
void standbyMotor(void) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af02      	add	r7, sp, #8
    
    SWITCH_Detect();
 80024de:	f000 fdf9 	bl	80030d4 <SWITCH_Detect>
//            colorLEDAnterior = MemoryMap.var.fuentes.colorLED;
//            LED_Standby_Configure(LED_STANDBY_1, 0, 0, 2000, 1, colorLEDAnterior);
//        }
//    }
            
    switch (standby.u8Motor) {
 80024e2:	4bb1      	ldr	r3, [pc, #708]	; (80027a8 <standbyMotor+0x2d0>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b14      	cmp	r3, #20
 80024e8:	f200 8400 	bhi.w	8002cec <standbyMotor+0x814>
 80024ec:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <standbyMotor+0x1c>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	08002549 	.word	0x08002549
 80024f8:	08002713 	.word	0x08002713
 80024fc:	0800274f 	.word	0x0800274f
 8002500:	08002789 	.word	0x08002789
 8002504:	080027cd 	.word	0x080027cd
 8002508:	08002823 	.word	0x08002823
 800250c:	08002859 	.word	0x08002859
 8002510:	080028ff 	.word	0x080028ff
 8002514:	0800291f 	.word	0x0800291f
 8002518:	08002959 	.word	0x08002959
 800251c:	08002979 	.word	0x08002979
 8002520:	080029a9 	.word	0x080029a9
 8002524:	080029c9 	.word	0x080029c9
 8002528:	08002a03 	.word	0x08002a03
 800252c:	08002a23 	.word	0x08002a23
 8002530:	08002a85 	.word	0x08002a85
 8002534:	08002abb 	.word	0x08002abb
 8002538:	08002c57 	.word	0x08002c57
 800253c:	08002c75 	.word	0x08002c75
 8002540:	08002caf 	.word	0x08002caf
 8002544:	08002ccd 	.word	0x08002ccd

        case 0:
            //We check that the source AC_fail interrupt port 1 is ready, the tempFail is 0 and the FAN_OK is 1
            //flgHabInt_Alarma = 0;
            //flgInt_Alarma = 0;
            ac_fail = prtInput1_AC_fail;
 8002548:	4b98      	ldr	r3, [pc, #608]	; (80027ac <standbyMotor+0x2d4>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
            temp_fail = prtInput1_TempFail;
 800254e:	4b98      	ldr	r3, [pc, #608]	; (80027b0 <standbyMotor+0x2d8>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
            fan_ok = prtInput1_FanOK;
 8002554:	4b97      	ldr	r3, [pc, #604]	; (80027b4 <standbyMotor+0x2dc>)
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
            if (prtInput1_AC_fail == 0 && prtInput1_TempFail == 0 && prtInput1_FanOK == 1) {
                //We activate the alarm engine flag
                fuentesStatus.alarmsOn = 1;
 800255a:	4b97      	ldr	r3, [pc, #604]	; (80027b8 <standbyMotor+0x2e0>)
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
				//Initially all secondary modules off except 24V digital
                // We see what source we have connected
                if (identif.IdPCB == PCB1) {
 8002560:	4b96      	ldr	r3, [pc, #600]	; (80027bc <standbyMotor+0x2e4>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d16a      	bne.n	800263e <standbyMotor+0x166>
                    //ON
#ifdef SOLO_2_FUENTES
                   prtEN_FA_DigitalN(1); //Modulo motores (bombas+fans)
 8002568:	2201      	movs	r2, #1
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	4894      	ldr	r0, [pc, #592]	; (80027c0 <standbyMotor+0x2e8>)
 800256e:	f002 ffa7 	bl	80054c0 <HAL_GPIO_WritePin>
#else
                    prtEN_FA_DigitalN(0); //Modulo 24V digitales
#endif
                    //OFF
                    prtEN_FA_MotorN(1); //Modulo motores (bombas+fans)
 8002572:	2201      	movs	r2, #1
 8002574:	2102      	movs	r1, #2
 8002576:	4893      	ldr	r0, [pc, #588]	; (80027c4 <standbyMotor+0x2ec>)
 8002578:	f002 ffa2 	bl	80054c0 <HAL_GPIO_WritePin>
//                    prtEN_Apl1n = 1; //Aplicador 1 (Apl1Plt1 + Apl1Plt2)
//                    prtEN_Apl2n = 1; //Aplicador 2 (Apl2Plt1 + Apl2Plt2)
                    prtEN_Apl1n(0); //Peltier module 1 and 2 ON
 800257c:	2200      	movs	r2, #0
 800257e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002582:	488f      	ldr	r0, [pc, #572]	; (80027c0 <standbyMotor+0x2e8>)
 8002584:	f002 ff9c 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl2n(0);
 8002588:	2200      	movs	r2, #0
 800258a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800258e:	488c      	ldr	r0, [pc, #560]	; (80027c0 <standbyMotor+0x2e8>)
 8002590:	f002 ff96 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl3n(0);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800259a:	4889      	ldr	r0, [pc, #548]	; (80027c0 <standbyMotor+0x2e8>)
 800259c:	f002 ff90 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl4n(0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025a6:	4886      	ldr	r0, [pc, #536]	; (80027c0 <standbyMotor+0x2e8>)
 80025a8:	f002 ff8a 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl5n(0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b2:	4883      	ldr	r0, [pc, #524]	; (80027c0 <standbyMotor+0x2e8>)
 80025b4:	f002 ff84 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl6n(0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025be:	4880      	ldr	r0, [pc, #512]	; (80027c0 <standbyMotor+0x2e8>)
 80025c0:	f002 ff7e 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl7n(0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ca:	487d      	ldr	r0, [pc, #500]	; (80027c0 <standbyMotor+0x2e8>)
 80025cc:	f002 ff78 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl8n(0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025d6:	487a      	ldr	r0, [pc, #488]	; (80027c0 <standbyMotor+0x2e8>)
 80025d8:	f002 ff72 	bl	80054c0 <HAL_GPIO_WritePin>

                    //We update the value of the enable variables
#ifdef SOLO_2_FUENTES
                    standby.fuentesHab.digital = 0;
 80025dc:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <standbyMotor+0x2d0>)
 80025de:	2200      	movs	r2, #0
 80025e0:	725a      	strb	r2, [r3, #9]
#else
                    standby.fuentesHab.digital = 1;
#endif
                    standby.fuentesHab.motor = 0;
 80025e2:	4b71      	ldr	r3, [pc, #452]	; (80027a8 <standbyMotor+0x2d0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	729a      	strb	r2, [r3, #10]
                    standby.fuentesHab.apl1 = 0;
 80025e8:	4b6f      	ldr	r3, [pc, #444]	; (80027a8 <standbyMotor+0x2d0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	72da      	strb	r2, [r3, #11]
                    standby.fuentesHab.apl2 = 0;
 80025ee:	4b6e      	ldr	r3, [pc, #440]	; (80027a8 <standbyMotor+0x2d0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	731a      	strb	r2, [r3, #12]

                    // We update the value of the module variables on and off
#ifdef SOLO_2_FUENTES
                    standby.fuentesOn.digital = 0;
 80025f4:	4b6c      	ldr	r3, [pc, #432]	; (80027a8 <standbyMotor+0x2d0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	735a      	strb	r2, [r3, #13]

                    //We update the standby status
                    standby.state = PCB_STATE_STANDBY;
 80025fa:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <standbyMotor+0x2d0>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	721a      	strb	r2, [r3, #8]

                    //We announce by protocol that we have turned on the digital 24V module (status: standby)
                    MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_STANDBY;
 8002600:	4b71      	ldr	r3, [pc, #452]	; (80027c8 <standbyMotor+0x2f0>)
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    standby.state = PCB_STATE_STANDBY;

                    //Avisamos por protocolo de que hemos encendido el modulo de 24V digitales (estado: standby)
                    MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_STANDBY;
#endif
                    standby.fuentesOn.motor = 0;
 8002608:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <standbyMotor+0x2d0>)
 800260a:	2200      	movs	r2, #0
 800260c:	739a      	strb	r2, [r3, #14]
                    standby.fuentesOn.apl1 = 0;
 800260e:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <standbyMotor+0x2d0>)
 8002610:	2200      	movs	r2, #0
 8002612:	73da      	strb	r2, [r3, #15]
                    standby.fuentesOn.apl2 = 0;
 8002614:	4b64      	ldr	r3, [pc, #400]	; (80027a8 <standbyMotor+0x2d0>)
 8002616:	2200      	movs	r2, #0
 8002618:	741a      	strb	r2, [r3, #16]

                    // LED_Configure(LED1, 0, 2000, 0, 1); //debug: fixe off
                    //Inicialmente led rojo
                    //ledControl(LED_STANDBY_VERMELL);
                    /* INIT DISBLE RED LIGHT */
                    LED_Standby_Configure(LED_STANDBY_1, 0xFF, 2000, 100, 0, LED_STANDBY_GREEN);
 800261a:	2302      	movs	r3, #2
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2300      	movs	r3, #0
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	2364      	movs	r3, #100	; 0x64
 8002624:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002628:	21ff      	movs	r1, #255	; 0xff
 800262a:	2000      	movs	r0, #0
 800262c:	f000 fccc 	bl	8002fc8 <LED_Standby_Configure>
                    /* END DISABLE RED LIGHT */
                    //COMENT FOR DISABLE RED RIGHT LED_Standby_Configure(LED_STANDBY_1, 0, 0, 2000, 1, LED_STANDBY_VERMELL);
                    //Avanzamos al siguiente estado
                standby.u8Motor++;
 8002630:	4b5d      	ldr	r3, [pc, #372]	; (80027a8 <standbyMotor+0x2d0>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <standbyMotor+0x2d0>)
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e063      	b.n	8002706 <standbyMotor+0x22e>

                } else if (identif.IdPCB == PCB2) {
 800263e:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <standbyMotor+0x2e4>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d15b      	bne.n	80026fe <standbyMotor+0x226>
                    //OFF
#ifdef SOLO_2_FUENTES
                    prtEN_FA_MotorN(0); //es la fuente digital
 8002646:	2200      	movs	r2, #0
 8002648:	2102      	movs	r1, #2
 800264a:	485e      	ldr	r0, [pc, #376]	; (80027c4 <standbyMotor+0x2ec>)
 800264c:	f002 ff38 	bl	80054c0 <HAL_GPIO_WritePin>
#else
                    prtEN_FA_MotorN(1); //Modulo motores (EV+manipulos)
#endif
//                    prtEN_Apl1n = 1; //Aplicador 3 (Apl3Plt1 + Apl3Plt2)
//                    prtEN_Apl2n = 1; //Aplicador 4 (Apl4Plt1 + Apl4Plt2)
                    prtEN_Apl1n(0); //Peltier module 1 and 2 ON
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002656:	485a      	ldr	r0, [pc, #360]	; (80027c0 <standbyMotor+0x2e8>)
 8002658:	f002 ff32 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl2n(0);
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002662:	4857      	ldr	r0, [pc, #348]	; (80027c0 <standbyMotor+0x2e8>)
 8002664:	f002 ff2c 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl3n(0);
 8002668:	2200      	movs	r2, #0
 800266a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800266e:	4854      	ldr	r0, [pc, #336]	; (80027c0 <standbyMotor+0x2e8>)
 8002670:	f002 ff26 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl4n(0);
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800267a:	4851      	ldr	r0, [pc, #324]	; (80027c0 <standbyMotor+0x2e8>)
 800267c:	f002 ff20 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl5n(0);
 8002680:	2200      	movs	r2, #0
 8002682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002686:	484e      	ldr	r0, [pc, #312]	; (80027c0 <standbyMotor+0x2e8>)
 8002688:	f002 ff1a 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl6n(0);
 800268c:	2200      	movs	r2, #0
 800268e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002692:	484b      	ldr	r0, [pc, #300]	; (80027c0 <standbyMotor+0x2e8>)
 8002694:	f002 ff14 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl7n(0);
 8002698:	2200      	movs	r2, #0
 800269a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269e:	4848      	ldr	r0, [pc, #288]	; (80027c0 <standbyMotor+0x2e8>)
 80026a0:	f002 ff0e 	bl	80054c0 <HAL_GPIO_WritePin>
                    prtEN_Apl8n(0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026aa:	4845      	ldr	r0, [pc, #276]	; (80027c0 <standbyMotor+0x2e8>)
 80026ac:	f002 ff08 	bl	80054c0 <HAL_GPIO_WritePin>

                    //We update the value of the enable variables
                    standby.fuentesHab.digital = 0;
 80026b0:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <standbyMotor+0x2d0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	725a      	strb	r2, [r3, #9]
#ifdef SOLO_2_FUENTES
                    standby.fuentesHab.motor = 1;
 80026b6:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <standbyMotor+0x2d0>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	729a      	strb	r2, [r3, #10]
                    MemoryMap.var.fuentes.aModulos_ON_OFF[FNT_MOD_FIXED2] = 1;
 80026bc:	4b42      	ldr	r3, [pc, #264]	; (80027c8 <standbyMotor+0x2f0>)
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
#else
                    standby.fuentesHab.motor = 0;
#endif
                    standby.fuentesHab.apl1 = 0;
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <standbyMotor+0x2d0>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	72da      	strb	r2, [r3, #11]
                    standby.fuentesHab.apl2 = 0;
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <standbyMotor+0x2d0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	731a      	strb	r2, [r3, #12]

                    //We update the value of the module variables on and off
                    standby.fuentesOn.digital = 0;
 80026d0:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <standbyMotor+0x2d0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	735a      	strb	r2, [r3, #13]
#ifdef SOLO_2_FUENTES
                    standby.fuentesOn.motor = 1;
 80026d6:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <standbyMotor+0x2d0>)
 80026d8:	2201      	movs	r2, #1
 80026da:	739a      	strb	r2, [r3, #14]
                    //We updated the standby status for the pcb2 is directly wait for on
                    standby.state = PCB_STATE_WAIT_FOR_ON;
 80026dc:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <standbyMotor+0x2d0>)
 80026de:	2202      	movs	r2, #2
 80026e0:	721a      	strb	r2, [r3, #8]

                    //We report by protocol the status of the standby (status: wait for on)
                    MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_WAIT_FOR_ON;
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <standbyMotor+0x2f0>)
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    standby.state = PCB_STATE_WAIT_FOR_ON;

                    //We report by protocol the status of the standby (status: wait for on)
                    MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_WAIT_FOR_ON;
#endif
                    standby.fuentesOn.apl1 = 0;
 80026ea:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <standbyMotor+0x2d0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	73da      	strb	r2, [r3, #15]
                    standby.fuentesOn.apl2 = 0;
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <standbyMotor+0x2d0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	741a      	strb	r2, [r3, #16]

                    
					//We jump to the waiting case for the main to be ready to go ON
                    //(since this pcb does not have the standby button connected)
                    standby.u8Motor = 5;
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <standbyMotor+0x2d0>)
 80026f8:	2205      	movs	r2, #5
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e003      	b.n	8002706 <standbyMotor+0x22e>

                } else {
                    //Otherwise it is none of the known pcbs we do not advance of state
                    standby.u8Motor = 0;
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <standbyMotor+0x2d0>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
                    break;
 8002704:	e309      	b.n	8002d1a <standbyMotor+0x842>
                }


                //We capture the refresh time of the pushbutton on PCB1 and the wait for standby of pcb2
                standby.u32Time = TICKS_GetTicks();
 8002706:	f001 f8a3 	bl	8003850 <TICKS_GetTicks>
 800270a:	4603      	mov	r3, r0
 800270c:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <standbyMotor+0x2d0>)
 800270e:	6053      	str	r3, [r2, #4]
                
            }
            break;
 8002710:	e303      	b.n	8002d1a <standbyMotor+0x842>
            if (TICKS_DiffTicks(standby.u32Time) > 2000)
            {
                standby.u8Motor = 4;
            }
#else
            if (MemoryMap.var.fuentes.mainStatus == MAIN_STATE_READY_FOR_ON)
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <standbyMotor+0x2f0>)
 8002714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002718:	2b02      	cmp	r3, #2
 800271a:	d108      	bne.n	800272e <standbyMotor+0x256>
            {
                standby.u32Time = TICKS_GetTicks();
 800271c:	f001 f898 	bl	8003850 <TICKS_GetTicks>
 8002720:	4603      	mov	r3, r0
 8002722:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <standbyMotor+0x2d0>)
 8002724:	6053      	str	r3, [r2, #4]
                standby.u8Motor = 6;    /* if they tell me to turn it on, I'll turn it on directly without looking at the button */
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <standbyMotor+0x2d0>)
 8002728:	2206      	movs	r2, #6
 800272a:	701a      	strb	r2, [r3, #0]
            else if (TICKS_DiffTicks(standby.u32Time) > PULS_REFRESH_TIME) 
            {
                standby.u8Motor++;
            }
#endif
            break;
 800272c:	e2e2      	b.n	8002cf4 <standbyMotor+0x81c>
            else if (TICKS_DiffTicks(standby.u32Time) > PULS_REFRESH_TIME) 
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <standbyMotor+0x2d0>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	f001 f897 	bl	8003866 <TICKS_DiffTicks>
 8002738:	4603      	mov	r3, r0
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	f240 82da 	bls.w	8002cf4 <standbyMotor+0x81c>
                standby.u8Motor++;
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <standbyMotor+0x2d0>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <standbyMotor+0x2d0>)
 800274a:	701a      	strb	r2, [r3, #0]
            break;
 800274c:	e2d2      	b.n	8002cf4 <standbyMotor+0x81c>

        case 2:
            //Let's see if they're pushing the button
            if (MemoryMap.var.cabecera_fw.board_status.bit_field.switchState == 0) {
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <standbyMotor+0x2f0>)
 8002750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <standbyMotor+0x29e>
                //We update the time and move on to the next state
                standby.u32Time = TICKS_GetTicks();
 800275e:	f001 f877 	bl	8003850 <TICKS_GetTicks>
 8002762:	4603      	mov	r3, r0
 8002764:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <standbyMotor+0x2d0>)
 8002766:	6053      	str	r3, [r2, #4]
                standby.u8Motor++;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <standbyMotor+0x2d0>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	3301      	adds	r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <standbyMotor+0x2d0>)
 8002772:	701a      	strb	r2, [r3, #0]
            } else {
                //We update the time and return to the refresh time status
                standby.u32Time = TICKS_GetTicks();
                standby.u8Motor = 1;
            }
            break;
 8002774:	e2d1      	b.n	8002d1a <standbyMotor+0x842>
                standby.u32Time = TICKS_GetTicks();
 8002776:	f001 f86b 	bl	8003850 <TICKS_GetTicks>
 800277a:	4603      	mov	r3, r0
 800277c:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <standbyMotor+0x2d0>)
 800277e:	6053      	str	r3, [r2, #4]
                standby.u8Motor = 1;
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <standbyMotor+0x2d0>)
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
            break;
 8002786:	e2c8      	b.n	8002d1a <standbyMotor+0x842>

        case 3:
            //We wait 20ms for the value of the pushbutton to be stable, in case it is a bounce or a noise do not change the state of the pushbutton
            if (TICKS_DiffTicks(standby.u32Time) > PULS_DEBOUNCE_TIME) {
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <standbyMotor+0x2d0>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f001 f86a 	bl	8003866 <TICKS_DiffTicks>
 8002792:	4603      	mov	r3, r0
 8002794:	2b14      	cmp	r3, #20
 8002796:	f240 82af 	bls.w	8002cf8 <standbyMotor+0x820>
                //We move on to the next state
                standby.u8Motor++;
 800279a:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <standbyMotor+0x2d0>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b01      	ldr	r3, [pc, #4]	; (80027a8 <standbyMotor+0x2d0>)
 80027a4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80027a6:	e2a7      	b.n	8002cf8 <standbyMotor+0x820>
 80027a8:	20000214 	.word	0x20000214
 80027ac:	20000230 	.word	0x20000230
 80027b0:	20000231 	.word	0x20000231
 80027b4:	20000232 	.word	0x20000232
 80027b8:	20000030 	.word	0x20000030
 80027bc:	2000002c 	.word	0x2000002c
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40020400 	.word	0x40020400
 80027c8:	20000234 	.word	0x20000234
            standby.u32Time = TICKS_GetTicks();

            //We move on to the next state
            standby.u8Motor++;
#else
            if (MemoryMap.var.cabecera_fw.board_status.bit_field.switchState == 0) {
 80027cc:	4baa      	ldr	r3, [pc, #680]	; (8002a78 <standbyMotor+0x5a0>)
 80027ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d11e      	bne.n	800281a <standbyMotor+0x342>
                //faltaaa: debug
                // LED_Configure(LED1, 0xFF, 500, 500, 0); //debug: fixe on
                //We change the LED to flashing green
                // ledControl(LED_STANDBY_GREEN);
                LED_Standby_Configure(LED_STANDBY_1, 0xFF, 500, 500, 0, LED_STANDBY_GREEN);
 80027dc:	2302      	movs	r3, #2
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	2300      	movs	r3, #0
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027ec:	21ff      	movs	r1, #255	; 0xff
 80027ee:	2000      	movs	r0, #0
 80027f0:	f000 fbea 	bl	8002fc8 <LED_Standby_Configure>

                //We update the standby status
                standby.state = PCB_STATE_WAIT_FOR_ON;
 80027f4:	4ba1      	ldr	r3, [pc, #644]	; (8002a7c <standbyMotor+0x5a4>)
 80027f6:	2202      	movs	r2, #2
 80027f8:	721a      	strb	r2, [r3, #8]

                //We notify by protocol that the user has pressed the standby button to turn on the machine (status: wait for on)
                MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_WAIT_FOR_ON;
 80027fa:	4b9f      	ldr	r3, [pc, #636]	; (8002a78 <standbyMotor+0x5a0>)
 80027fc:	2202      	movs	r2, #2
 80027fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                //We capture the standby refresh time of the modules
                standby.u32Time = TICKS_GetTicks();
 8002802:	f001 f825 	bl	8003850 <TICKS_GetTicks>
 8002806:	4603      	mov	r3, r0
 8002808:	4a9c      	ldr	r2, [pc, #624]	; (8002a7c <standbyMotor+0x5a4>)
 800280a:	6053      	str	r3, [r2, #4]

                //We move on to the next state
                standby.u8Motor++;
 800280c:	4b9b      	ldr	r3, [pc, #620]	; (8002a7c <standbyMotor+0x5a4>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b99      	ldr	r3, [pc, #612]	; (8002a7c <standbyMotor+0x5a4>)
 8002816:	701a      	strb	r2, [r3, #0]
                //We return to the initial state
                standby.u8Motor = 0;
            }
#endif

            break;
 8002818:	e27f      	b.n	8002d1a <standbyMotor+0x842>
                standby.u8Motor = 0;
 800281a:	4b98      	ldr	r3, [pc, #608]	; (8002a7c <standbyMotor+0x5a4>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
            break;
 8002820:	e27b      	b.n	8002d1a <standbyMotor+0x842>

        case 5:
            //We wait for the pcbs to have done all the standby tasks
            //We read by protocol when the plates have done all their tasks
            //missing: think if it is necessary to put standby
            if (TICKS_DiffTicks(standby.u32Time) > STANDBY_WAIT_FOR_ON_TIME) {
 8002822:	4b96      	ldr	r3, [pc, #600]	; (8002a7c <standbyMotor+0x5a4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4618      	mov	r0, r3
 8002828:	f001 f81d 	bl	8003866 <TICKS_DiffTicks>
 800282c:	4603      	mov	r3, r0
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	f240 8264 	bls.w	8002cfc <standbyMotor+0x824>
#ifdef ARRANQUE_SIN_BOTON_ALR
                MemoryMap.var.fuentes.mainStatus = MAIN_STATE_READY_FOR_ON;
#endif
                if (MemoryMap.var.fuentes.mainStatus == MAIN_STATE_READY_FOR_ON) 
 8002834:	4b90      	ldr	r3, [pc, #576]	; (8002a78 <standbyMotor+0x5a0>)
 8002836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800283a:	2b02      	cmp	r3, #2
 800283c:	d106      	bne.n	800284c <standbyMotor+0x374>
                {
                    //We move on to the next state
                    standby.u8Motor++;
 800283e:	4b8f      	ldr	r3, [pc, #572]	; (8002a7c <standbyMotor+0x5a4>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b8d      	ldr	r3, [pc, #564]	; (8002a7c <standbyMotor+0x5a4>)
 8002848:	701a      	strb	r2, [r3, #0]
                    standby.u32Time = TICKS_GetTicks();
                }

            }

            break;
 800284a:	e257      	b.n	8002cfc <standbyMotor+0x824>
                    standby.u32Time = TICKS_GetTicks();
 800284c:	f001 f800 	bl	8003850 <TICKS_GetTicks>
 8002850:	4603      	mov	r3, r0
 8002852:	4a8a      	ldr	r2, [pc, #552]	; (8002a7c <standbyMotor+0x5a4>)
 8002854:	6053      	str	r3, [r2, #4]
            break;
 8002856:	e251      	b.n	8002cfc <standbyMotor+0x824>
            
            //flgHabInt_Alarma = 1;
            //flgInt_Alarma = 0;
            //flgInt1_Temp_fail = 0;
            //flgHabInt1_Temp_fail = 1;
            if (identif.IdPCB == PCB1) {
 8002858:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <standbyMotor+0x5a8>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d126      	bne.n	80028ae <standbyMotor+0x3d6>
                // prtEN_FA_DigitalN = 0; //Modulo 24V digitales
                //ON
                //  prtEN_FA_MotorN = 0; //Modulo motores (bombas+fans)
                //   prtEN_Apl1n = 0; //Aplicador 1 (Apl1Plt1 + Apl1Plt2)
                //   prtEN_Apl2n = 0; //Aplicador 2 (Apl2Plt1 + Apl2Plt2)
                standby.fuentesHab.motor = 1;
 8002860:	4b86      	ldr	r3, [pc, #536]	; (8002a7c <standbyMotor+0x5a4>)
 8002862:	2201      	movs	r2, #1
 8002864:	729a      	strb	r2, [r3, #10]
                standby.fuentesHab.apl1 = 1;
 8002866:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <standbyMotor+0x5a4>)
 8002868:	2201      	movs	r2, #1
 800286a:	72da      	strb	r2, [r3, #11]
                standby.fuentesHab.apl2 = 1;
 800286c:	4b83      	ldr	r3, [pc, #524]	; (8002a7c <standbyMotor+0x5a4>)
 800286e:	2201      	movs	r2, #1
 8002870:	731a      	strb	r2, [r3, #12]
                // standby.fuentesOn.apl1 = 1;
                // standby.fuentesOn.apl2 = 1;


                //We update the standby status
                standby.state = PCB_STATE_ON;
 8002872:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <standbyMotor+0x5a4>)
 8002874:	2203      	movs	r2, #3
 8002876:	721a      	strb	r2, [r3, #8]

                //We announce by protocol that we have turned on the modules
                MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_ON;
 8002878:	4b7f      	ldr	r3, [pc, #508]	; (8002a78 <standbyMotor+0x5a0>)
 800287a:	2203      	movs	r2, #3
 800287c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                //faltaaa: debug
                //LED_Configure(LED1, 0, 0, 2000, 1); //debug: fixe on
                //We change the led to green
                // ledControl(LED_STANDBY_GREEN);
                LED_Standby_Configure(LED_STANDBY_1, 0, 0, 2000, 1, LED_STANDBY_GREEN);
 8002880:	2302      	movs	r3, #2
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	2301      	movs	r3, #1
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	2000      	movs	r0, #0
 8002892:	f000 fb99 	bl	8002fc8 <LED_Standby_Configure>
                //We capture the refresh time of initialization of the modules
                standby.u32Time = TICKS_GetTicks();
 8002896:	f000 ffdb 	bl	8003850 <TICKS_GetTicks>
 800289a:	4603      	mov	r3, r0
 800289c:	4a77      	ldr	r2, [pc, #476]	; (8002a7c <standbyMotor+0x5a4>)
 800289e:	6053      	str	r3, [r2, #4]
                //We move on to the next state
                standby.u8Motor++;
 80028a0:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <standbyMotor+0x5a4>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b74      	ldr	r3, [pc, #464]	; (8002a7c <standbyMotor+0x5a4>)
 80028aa:	701a      	strb	r2, [r3, #0]

            } else {
                //Otherwise it is none of the known pcbs we return to the initial state
                standby.u8Motor = 0;
            }
            break;
 80028ac:	e235      	b.n	8002d1a <standbyMotor+0x842>
            } else if (identif.IdPCB == PCB2) {
 80028ae:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <standbyMotor+0x5a8>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d11f      	bne.n	80028f6 <standbyMotor+0x41e>
                standby.fuentesHab.motor = 1;
 80028b6:	4b71      	ldr	r3, [pc, #452]	; (8002a7c <standbyMotor+0x5a4>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	729a      	strb	r2, [r3, #10]
                standby.fuentesHab.apl1 = 1;
 80028bc:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <standbyMotor+0x5a4>)
 80028be:	2201      	movs	r2, #1
 80028c0:	72da      	strb	r2, [r3, #11]
                standby.fuentesHab.apl2 = 1;
 80028c2:	4b6e      	ldr	r3, [pc, #440]	; (8002a7c <standbyMotor+0x5a4>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	731a      	strb	r2, [r3, #12]
                standby.state = PCB_STATE_ON;
 80028c8:	4b6c      	ldr	r3, [pc, #432]	; (8002a7c <standbyMotor+0x5a4>)
 80028ca:	2203      	movs	r2, #3
 80028cc:	721a      	strb	r2, [r3, #8]
                MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_ON;
 80028ce:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <standbyMotor+0x5a0>)
 80028d0:	2203      	movs	r2, #3
 80028d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                standby.state = PCB_STATE_WAIT_FOR_STANDBY;
 80028d6:	4b69      	ldr	r3, [pc, #420]	; (8002a7c <standbyMotor+0x5a4>)
 80028d8:	2204      	movs	r2, #4
 80028da:	721a      	strb	r2, [r3, #8]
                MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_WAIT_FOR_STANDBY;
 80028dc:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <standbyMotor+0x5a0>)
 80028de:	2204      	movs	r2, #4
 80028e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                standby.u32Time = TICKS_GetTicks();
 80028e4:	f000 ffb4 	bl	8003850 <TICKS_GetTicks>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4a64      	ldr	r2, [pc, #400]	; (8002a7c <standbyMotor+0x5a4>)
 80028ec:	6053      	str	r3, [r2, #4]
                standby.u8Motor = 15;
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <standbyMotor+0x5a4>)
 80028f0:	220f      	movs	r2, #15
 80028f2:	701a      	strb	r2, [r3, #0]
            break;
 80028f4:	e211      	b.n	8002d1a <standbyMotor+0x842>
                standby.u8Motor = 0;
 80028f6:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <standbyMotor+0x5a4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
            break;
 80028fc:	e20d      	b.n	8002d1a <standbyMotor+0x842>
        case 7:
            //We are waiting for the initialization time of the modules
            if (TICKS_DiffTicks(standby.u32Time) > MODULES_INIT_TIME) {
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <standbyMotor+0x5a4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 ffaf 	bl	8003866 <TICKS_DiffTicks>
 8002908:	4603      	mov	r3, r0
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	f240 81f8 	bls.w	8002d00 <standbyMotor+0x828>
                //Avanzamos al siguiente estado
                standby.u8Motor++;
 8002910:	4b5a      	ldr	r3, [pc, #360]	; (8002a7c <standbyMotor+0x5a4>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <standbyMotor+0x5a4>)
 800291a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800291c:	e1f0      	b.n	8002d00 <standbyMotor+0x828>

        case 8:
            //We check if they have released the button
            if (MemoryMap.var.cabecera_fw.board_status.bit_field.switchState == 1) {
 800291e:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <standbyMotor+0x5a0>)
 8002920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <standbyMotor+0x46e>
                //We update the time and move on to the next state
                standby.u32Time = TICKS_GetTicks();
 800292e:	f000 ff8f 	bl	8003850 <TICKS_GetTicks>
 8002932:	4603      	mov	r3, r0
 8002934:	4a51      	ldr	r2, [pc, #324]	; (8002a7c <standbyMotor+0x5a4>)
 8002936:	6053      	str	r3, [r2, #4]
                standby.u8Motor++;
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <standbyMotor+0x5a4>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4b4e      	ldr	r3, [pc, #312]	; (8002a7c <standbyMotor+0x5a4>)
 8002942:	701a      	strb	r2, [r3, #0]
                // (missing: If you change this initialization time of the modules, watch because it will be the refresh time to release the button,
                // if necessary add any case)
                standby.u32Time = TICKS_GetTicks();
                standby.u8Motor = 7;
            }
            break;
 8002944:	e1e9      	b.n	8002d1a <standbyMotor+0x842>
                standby.u32Time = TICKS_GetTicks();
 8002946:	f000 ff83 	bl	8003850 <TICKS_GetTicks>
 800294a:	4603      	mov	r3, r0
 800294c:	4a4b      	ldr	r2, [pc, #300]	; (8002a7c <standbyMotor+0x5a4>)
 800294e:	6053      	str	r3, [r2, #4]
                standby.u8Motor = 7;
 8002950:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <standbyMotor+0x5a4>)
 8002952:	2207      	movs	r2, #7
 8002954:	701a      	strb	r2, [r3, #0]
            break;
 8002956:	e1e0      	b.n	8002d1a <standbyMotor+0x842>

        case 9:
            //We wait 20ms for the value of the pushbutton to be stable, in case it is a bounce or a noise do not change the state of the pushbutton
            if (TICKS_DiffTicks(standby.u32Time) > PULS_DEBOUNCE_TIME) {
 8002958:	4b48      	ldr	r3, [pc, #288]	; (8002a7c <standbyMotor+0x5a4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 ff82 	bl	8003866 <TICKS_DiffTicks>
 8002962:	4603      	mov	r3, r0
 8002964:	2b14      	cmp	r3, #20
 8002966:	f240 81cd 	bls.w	8002d04 <standbyMotor+0x82c>
                //We move on to the next state
                standby.u8Motor++;
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <standbyMotor+0x5a4>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <standbyMotor+0x5a4>)
 8002974:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002976:	e1c5      	b.n	8002d04 <standbyMotor+0x82c>

        case 10:
            //We check if they are still releasing the button
            if (MemoryMap.var.cabecera_fw.board_status.bit_field.switchState == 1) {
 8002978:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <standbyMotor+0x5a0>)
 800297a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <standbyMotor+0x4c8>
                //We capture the refresh time of initialization of the modules
                standby.u32Time = TICKS_GetTicks();
 8002988:	f000 ff62 	bl	8003850 <TICKS_GetTicks>
 800298c:	4603      	mov	r3, r0
 800298e:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <standbyMotor+0x5a4>)
 8002990:	6053      	str	r3, [r2, #4]
                //We move on to the next state
                standby.u8Motor++;
 8002992:	4b3a      	ldr	r3, [pc, #232]	; (8002a7c <standbyMotor+0x5a4>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <standbyMotor+0x5a4>)
 800299c:	701a      	strb	r2, [r3, #0]
            } else {
                //We return to the initialization timeout state of the modules
                standby.u8Motor = 7;
            }
            break;
 800299e:	e1bc      	b.n	8002d1a <standbyMotor+0x842>
                standby.u8Motor = 7;
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <standbyMotor+0x5a4>)
 80029a2:	2207      	movs	r2, #7
 80029a4:	701a      	strb	r2, [r3, #0]
            break;
 80029a6:	e1b8      	b.n	8002d1a <standbyMotor+0x842>

        case 11:
            //We are waiting for the button refresh time
            if (TICKS_DiffTicks(standby.u32Time) > PULS_REFRESH_TIME) {
 80029a8:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <standbyMotor+0x5a4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 ff5a 	bl	8003866 <TICKS_DiffTicks>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b64      	cmp	r3, #100	; 0x64
 80029b6:	f240 81a7 	bls.w	8002d08 <standbyMotor+0x830>
                standby.u8Motor++;
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <standbyMotor+0x5a4>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <standbyMotor+0x5a4>)
 80029c4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80029c6:	e19f      	b.n	8002d08 <standbyMotor+0x830>

        case 12:
            //Let's see if they're pushing the button
            if (MemoryMap.var.cabecera_fw.board_status.bit_field.switchState == 0) {
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <standbyMotor+0x5a0>)
 80029ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <standbyMotor+0x518>
                //We update the time and move on to the next state
                standby.u32Time = TICKS_GetTicks();
 80029d8:	f000 ff3a 	bl	8003850 <TICKS_GetTicks>
 80029dc:	4603      	mov	r3, r0
 80029de:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <standbyMotor+0x5a4>)
 80029e0:	6053      	str	r3, [r2, #4]
                standby.u8Motor++;
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <standbyMotor+0x5a4>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <standbyMotor+0x5a4>)
 80029ec:	701a      	strb	r2, [r3, #0]
            } else {
                //We update the time and return to the refresh time status
                standby.u32Time = TICKS_GetTicks();
                standby.u8Motor = 11;
            }
            break;
 80029ee:	e194      	b.n	8002d1a <standbyMotor+0x842>
                standby.u32Time = TICKS_GetTicks();
 80029f0:	f000 ff2e 	bl	8003850 <TICKS_GetTicks>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <standbyMotor+0x5a4>)
 80029f8:	6053      	str	r3, [r2, #4]
                standby.u8Motor = 11;
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <standbyMotor+0x5a4>)
 80029fc:	220b      	movs	r2, #11
 80029fe:	701a      	strb	r2, [r3, #0]
            break;
 8002a00:	e18b      	b.n	8002d1a <standbyMotor+0x842>

        case 13:
            //We wait 20ms for the value of the pushbutton to be stable, in case it is a bounce or a noise do not change the state of the pushbutton
            if (TICKS_DiffTicks(standby.u32Time) > PULS_DEBOUNCE_TIME) {
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <standbyMotor+0x5a4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 ff2d 	bl	8003866 <TICKS_DiffTicks>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b14      	cmp	r3, #20
 8002a10:	f240 817c 	bls.w	8002d0c <standbyMotor+0x834>
                //We move on to the next state
                standby.u8Motor++;
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <standbyMotor+0x5a4>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <standbyMotor+0x5a4>)
 8002a1e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002a20:	e174      	b.n	8002d0c <standbyMotor+0x834>

        case 14:
            //Caso ON-OFF
            //We check if they are still pressing the button
            if (MemoryMap.var.cabecera_fw.board_status.bit_field.switchState == 0) {
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <standbyMotor+0x5a0>)
 8002a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11e      	bne.n	8002a70 <standbyMotor+0x598>
                //We update the standby status
                standby.state = PCB_STATE_WAIT_FOR_STANDBY;
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <standbyMotor+0x5a4>)
 8002a34:	2204      	movs	r2, #4
 8002a36:	721a      	strb	r2, [r3, #8]

                //We warn by protocol that we are going to switch to standby
                MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_WAIT_FOR_STANDBY;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <standbyMotor+0x5a0>)
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                //LED_Configure(LED1, 0xFF, 500, 500, 0); //debug: intermitencies
                //Cambiamos el led a rojo intermitente
                // ledControl(LED_STANDBY_GREEN);
                /* INIT DISABLE RED LIGHT */
                LED_Standby_Configure(LED_STANDBY_1, 0xFF, 500, 500, 0, LED_STANDBY_GREEN);
 8002a40:	2302      	movs	r3, #2
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	2300      	movs	r3, #0
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a50:	21ff      	movs	r1, #255	; 0xff
 8002a52:	2000      	movs	r0, #0
 8002a54:	f000 fab8 	bl	8002fc8 <LED_Standby_Configure>
                /* END DISABLE RED LIGHT */
                //COMMENT FOR DISABLE RED LIGHT LED_Standby_Configure(LED_STANDBY_1, 0xFF, 500, 500, 0, LED_STANDBY_VERMELL);
                //We capture the refresh time of initialization of the modules
                standby.u32Time = TICKS_GetTicks();
 8002a58:	f000 fefa 	bl	8003850 <TICKS_GetTicks>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <standbyMotor+0x5a4>)
 8002a60:	6053      	str	r3, [r2, #4]
                //Avanzamos al siguiente estado
                standby.u8Motor++;
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <standbyMotor+0x5a4>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <standbyMotor+0x5a4>)
 8002a6c:	701a      	strb	r2, [r3, #0]
            } else {
                //We return to the pulsed standby state
                standby.u8Motor = 11;
            }
            break;
 8002a6e:	e154      	b.n	8002d1a <standbyMotor+0x842>
                standby.u8Motor = 11;
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <standbyMotor+0x5a4>)
 8002a72:	220b      	movs	r2, #11
 8002a74:	701a      	strb	r2, [r3, #0]
            break;
 8002a76:	e150      	b.n	8002d1a <standbyMotor+0x842>
 8002a78:	20000234 	.word	0x20000234
 8002a7c:	20000214 	.word	0x20000214
 8002a80:	2000002c 	.word	0x2000002c

        case 15:
			//We wait until the pcbs have performed all the standby tasks
            //We read by protocol when the boards have done all their tasks
            if (TICKS_DiffTicks(standby.u32Time) > STANDBY_WAIT_FOR_STANDBY_TIME) {
 8002a84:	4ba8      	ldr	r3, [pc, #672]	; (8002d28 <standbyMotor+0x850>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 feec 	bl	8003866 <TICKS_DiffTicks>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b64      	cmp	r3, #100	; 0x64
 8002a92:	f240 813d 	bls.w	8002d10 <standbyMotor+0x838>

                if (MemoryMap.var.fuentes.mainStatus == MAIN_STATE_READY_FOR_STANDBY) {
 8002a96:	4ba5      	ldr	r3, [pc, #660]	; (8002d2c <standbyMotor+0x854>)
 8002a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d106      	bne.n	8002aae <standbyMotor+0x5d6>
                    //Avanzamos al siguiente estado
                    standby.u8Motor++;
 8002aa0:	4ba1      	ldr	r3, [pc, #644]	; (8002d28 <standbyMotor+0x850>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b9f      	ldr	r3, [pc, #636]	; (8002d28 <standbyMotor+0x850>)
 8002aaa:	701a      	strb	r2, [r3, #0]
                }


            }

            break;
 8002aac:	e130      	b.n	8002d10 <standbyMotor+0x838>
                    standby.u32Time = TICKS_GetTicks();
 8002aae:	f000 fecf 	bl	8003850 <TICKS_GetTicks>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a9c      	ldr	r2, [pc, #624]	; (8002d28 <standbyMotor+0x850>)
 8002ab6:	6053      	str	r3, [r2, #4]
            break;
 8002ab8:	e12a      	b.n	8002d10 <standbyMotor+0x838>
            //            break;

        case 16:
            //We turn off all the secondary modules except the 24V digital ones
            //Let's see what source we have connected
            if (identif.IdPCB == PCB1) {
 8002aba:	4b9d      	ldr	r3, [pc, #628]	; (8002d30 <standbyMotor+0x858>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d16f      	bne.n	8002ba2 <standbyMotor+0x6ca>
#ifdef SOLO_2_FUENTES
                //OFF
                prtEN_FA_DigitalN(1); //Modulo 24V sin conexion
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	489b      	ldr	r0, [pc, #620]	; (8002d34 <standbyMotor+0x85c>)
 8002ac8:	f002 fcfa 	bl	80054c0 <HAL_GPIO_WritePin>
#else
                //ON
                prtEN_FA_DigitalN(0); //Modulo 24V digitales
#endif
                //OFF
                prtEN_FA_MotorN(1); //Modulo motores (bombas+fans)
 8002acc:	2201      	movs	r2, #1
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4899      	ldr	r0, [pc, #612]	; (8002d38 <standbyMotor+0x860>)
 8002ad2:	f002 fcf5 	bl	80054c0 <HAL_GPIO_WritePin>
//                prtEN_Apl1n = 1; //Aplicador 1 (Apl1Plt1 + Apl1Plt2)
//                prtEN_Apl2n = 1; //Aplicador 2 (Apl2Plt1 + Apl2Plt2)
                prtEN_Apl1n(0); //Peltier module 1 and 2 ON
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002adc:	4895      	ldr	r0, [pc, #596]	; (8002d34 <standbyMotor+0x85c>)
 8002ade:	f002 fcef 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl2n(0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ae8:	4892      	ldr	r0, [pc, #584]	; (8002d34 <standbyMotor+0x85c>)
 8002aea:	f002 fce9 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl3n(0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002af4:	488f      	ldr	r0, [pc, #572]	; (8002d34 <standbyMotor+0x85c>)
 8002af6:	f002 fce3 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl4n(0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b00:	488c      	ldr	r0, [pc, #560]	; (8002d34 <standbyMotor+0x85c>)
 8002b02:	f002 fcdd 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl5n(0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b0c:	4889      	ldr	r0, [pc, #548]	; (8002d34 <standbyMotor+0x85c>)
 8002b0e:	f002 fcd7 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl6n(0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b18:	4886      	ldr	r0, [pc, #536]	; (8002d34 <standbyMotor+0x85c>)
 8002b1a:	f002 fcd1 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl7n(0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b24:	4883      	ldr	r0, [pc, #524]	; (8002d34 <standbyMotor+0x85c>)
 8002b26:	f002 fccb 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl8n(0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b30:	4880      	ldr	r0, [pc, #512]	; (8002d34 <standbyMotor+0x85c>)
 8002b32:	f002 fcc5 	bl	80054c0 <HAL_GPIO_WritePin>

                //We update the value of the enable variables
#ifdef SOLO_2_FUENTES
                standby.fuentesHab.digital = 0;
 8002b36:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <standbyMotor+0x850>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	725a      	strb	r2, [r3, #9]
#endif
                standby.fuentesHab.motor = 0;
 8002b3c:	4b7a      	ldr	r3, [pc, #488]	; (8002d28 <standbyMotor+0x850>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	729a      	strb	r2, [r3, #10]
                standby.fuentesHab.apl1 = 0;
 8002b42:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <standbyMotor+0x850>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	72da      	strb	r2, [r3, #11]
                standby.fuentesHab.apl2 = 0;
 8002b48:	4b77      	ldr	r3, [pc, #476]	; (8002d28 <standbyMotor+0x850>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	731a      	strb	r2, [r3, #12]

                //We update the value of the module variables on and off
#ifdef SOLO_2_FUENTES
                standby.fuentesOn.digital = 0;
 8002b4e:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <standbyMotor+0x850>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	735a      	strb	r2, [r3, #13]
#endif
                standby.fuentesOn.motor = 0;
 8002b54:	4b74      	ldr	r3, [pc, #464]	; (8002d28 <standbyMotor+0x850>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	739a      	strb	r2, [r3, #14]
                standby.fuentesOn.apl1 = 0;
 8002b5a:	4b73      	ldr	r3, [pc, #460]	; (8002d28 <standbyMotor+0x850>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	73da      	strb	r2, [r3, #15]
                standby.fuentesOn.apl2 = 0;
 8002b60:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <standbyMotor+0x850>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	741a      	strb	r2, [r3, #16]

                //We update the standby status
                standby.state = PCB_STATE_STANDBY;
 8002b66:	4b70      	ldr	r3, [pc, #448]	; (8002d28 <standbyMotor+0x850>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	721a      	strb	r2, [r3, #8]

                //We notify you by protocol that we have turned off all modules except the 24V digital (status: standby)
                MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_STANDBY;
 8002b6c:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <standbyMotor+0x854>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                //LED_Configure(LED1, 0, 2000, 0, 1); //debug: fixe off
                //Ponemos el led rojo
                //ledControl(LED_STANDBY_VERMELL);
                /* INIT DISABLE RED LIGHT */
                LED_Standby_Configure(LED_STANDBY_1, 0xFF, 2000, 100, 0, LED_STANDBY_GREEN);
 8002b74:	2302      	movs	r3, #2
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2364      	movs	r3, #100	; 0x64
 8002b7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b82:	21ff      	movs	r1, #255	; 0xff
 8002b84:	2000      	movs	r0, #0
 8002b86:	f000 fa1f 	bl	8002fc8 <LED_Standby_Configure>
                /* END DISABLE RED LIGHT */
                //COMENT FOR DISABLE RED LIGHT LED_Standby_Configure(LED_STANDBY_1, 0, 0, 2000, 1, LED_STANDBY_VERMELL);
                //We capture the refresh time of the button
                standby.u32Time = TICKS_GetTicks();
 8002b8a:	f000 fe61 	bl	8003850 <TICKS_GetTicks>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4a65      	ldr	r2, [pc, #404]	; (8002d28 <standbyMotor+0x850>)
 8002b92:	6053      	str	r3, [r2, #4]
                //We move on to the next state
                standby.u8Motor++;
 8002b94:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <standbyMotor+0x850>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <standbyMotor+0x850>)
 8002b9e:	701a      	strb	r2, [r3, #0]
                break;
 8002ba0:	e0bb      	b.n	8002d1a <standbyMotor+0x842>


            } else if (identif.IdPCB == PCB2) {
 8002ba2:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <standbyMotor+0x858>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d151      	bne.n	8002c4e <standbyMotor+0x776>
#ifdef SOLO_2_FUENTES
                //ON
                prtEN_FA_MotorN(0); //Modulo 24V digitales
 8002baa:	2200      	movs	r2, #0
 8002bac:	2102      	movs	r1, #2
 8002bae:	4862      	ldr	r0, [pc, #392]	; (8002d38 <standbyMotor+0x860>)
 8002bb0:	f002 fc86 	bl	80054c0 <HAL_GPIO_WritePin>
                //OFF
                prtEN_FA_MotorN(1); //Modulo motores (EV+manipulos)
#endif
//                prtEN_Apl1n = 1; //Aplicador 3 (Apl3Plt1 + Apl3Plt2)
//                prtEN_Apl2n = 1; //Aplicador 4 (Apl4Plt1 + Apl4Plt2)
                prtEN_Apl1n(0); //Peltier module 1 and 2 ON
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bba:	485e      	ldr	r0, [pc, #376]	; (8002d34 <standbyMotor+0x85c>)
 8002bbc:	f002 fc80 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl2n(0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bc6:	485b      	ldr	r0, [pc, #364]	; (8002d34 <standbyMotor+0x85c>)
 8002bc8:	f002 fc7a 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl3n(0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bd2:	4858      	ldr	r0, [pc, #352]	; (8002d34 <standbyMotor+0x85c>)
 8002bd4:	f002 fc74 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl4n(0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bde:	4855      	ldr	r0, [pc, #340]	; (8002d34 <standbyMotor+0x85c>)
 8002be0:	f002 fc6e 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl5n(0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bea:	4852      	ldr	r0, [pc, #328]	; (8002d34 <standbyMotor+0x85c>)
 8002bec:	f002 fc68 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl6n(0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf6:	484f      	ldr	r0, [pc, #316]	; (8002d34 <standbyMotor+0x85c>)
 8002bf8:	f002 fc62 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl7n(0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c02:	484c      	ldr	r0, [pc, #304]	; (8002d34 <standbyMotor+0x85c>)
 8002c04:	f002 fc5c 	bl	80054c0 <HAL_GPIO_WritePin>
                prtEN_Apl8n(0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c0e:	4849      	ldr	r0, [pc, #292]	; (8002d34 <standbyMotor+0x85c>)
 8002c10:	f002 fc56 	bl	80054c0 <HAL_GPIO_WritePin>

                //We update the value of the enable variables
#ifdef SOLO_2_FUENTES
                standby.fuentesHab.motor = 1;
 8002c14:	4b44      	ldr	r3, [pc, #272]	; (8002d28 <standbyMotor+0x850>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	729a      	strb	r2, [r3, #10]
#else
                standby.fuentesHab.motor = 0;
#endif
                standby.fuentesHab.apl1 = 0;
 8002c1a:	4b43      	ldr	r3, [pc, #268]	; (8002d28 <standbyMotor+0x850>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	72da      	strb	r2, [r3, #11]
                standby.fuentesHab.apl2 = 0;
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <standbyMotor+0x850>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	731a      	strb	r2, [r3, #12]

                //We update the value of the module variables on and off
#ifdef SOLO_2_FUENTES
                standby.fuentesOn.motor = 1;
 8002c26:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <standbyMotor+0x850>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	739a      	strb	r2, [r3, #14]
#else
                standby.fuentesOn.motor = 0;
#endif
                standby.fuentesOn.apl1 = 0;
 8002c2c:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <standbyMotor+0x850>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	73da      	strb	r2, [r3, #15]
                standby.fuentesOn.apl2 = 0;
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <standbyMotor+0x850>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	741a      	strb	r2, [r3, #16]


                //We updated the standby status for the pcb2 is directly wait for on
                standby.state = PCB_STATE_WAIT_FOR_ON;
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <standbyMotor+0x850>)
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	721a      	strb	r2, [r3, #8]

                //We report the status of the standby by protocol (estado: wait for on)
                MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_WAIT_FOR_ON;
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <standbyMotor+0x854>)
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                // LED_Standby_Configure(LED_STANDBY_1, 0, 0, 2000, 1, LED_STANDBY_VERMELL);
                //Capturamos el tiempo de refresco del pulsador
                //standby.u32Time = TICKS_GetTicks();

                //We move on to the next state
                standby.u8Motor = 0;
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <standbyMotor+0x850>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
                break;
 8002c4c:	e065      	b.n	8002d1a <standbyMotor+0x842>

            } else {
                //Otherwise it is none of the known pcbs we return to the initial state
                standby.u8Motor = 0;
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <standbyMotor+0x850>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
                break;
 8002c54:	e061      	b.n	8002d1a <standbyMotor+0x842>
            }

        case 17:
            //We are waiting for the button refresh time
            if (TICKS_DiffTicks(standby.u32Time) > PULS_REFRESH_TIME) {
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <standbyMotor+0x850>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fe03 	bl	8003866 <TICKS_DiffTicks>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d956      	bls.n	8002d14 <standbyMotor+0x83c>
                standby.u8Motor++;
 8002c66:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <standbyMotor+0x850>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <standbyMotor+0x850>)
 8002c70:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002c72:	e04f      	b.n	8002d14 <standbyMotor+0x83c>

        case 18:
            //We check if they have released the button
            if (MemoryMap.var.cabecera_fw.board_status.bit_field.switchState == 1) {
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <standbyMotor+0x854>)
 8002c76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <standbyMotor+0x7c4>
                //We update the time and move on to the next state
                standby.u32Time = TICKS_GetTicks();
 8002c84:	f000 fde4 	bl	8003850 <TICKS_GetTicks>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a27      	ldr	r2, [pc, #156]	; (8002d28 <standbyMotor+0x850>)
 8002c8c:	6053      	str	r3, [r2, #4]
                standby.u8Motor++;
 8002c8e:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <standbyMotor+0x850>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <standbyMotor+0x850>)
 8002c98:	701a      	strb	r2, [r3, #0]
                //missing: If this module initialization time is changed, watch out for the refresh time when the button is released,
                // if necessary add any case
                standby.u32Time = TICKS_GetTicks();
                standby.u8Motor = 17;
            }
            break;
 8002c9a:	e03e      	b.n	8002d1a <standbyMotor+0x842>
                standby.u32Time = TICKS_GetTicks();
 8002c9c:	f000 fdd8 	bl	8003850 <TICKS_GetTicks>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <standbyMotor+0x850>)
 8002ca4:	6053      	str	r3, [r2, #4]
                standby.u8Motor = 17;
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <standbyMotor+0x850>)
 8002ca8:	2211      	movs	r2, #17
 8002caa:	701a      	strb	r2, [r3, #0]
            break;
 8002cac:	e035      	b.n	8002d1a <standbyMotor+0x842>

        case 19:
            //We wait 20ms for the value of the pushbutton to be stable, in case it is a bounce or a noise do not change the state of the pushbutton
            if (TICKS_DiffTicks(standby.u32Time) > PULS_DEBOUNCE_TIME) {
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <standbyMotor+0x850>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fdd7 	bl	8003866 <TICKS_DiffTicks>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b14      	cmp	r3, #20
 8002cbc:	d92c      	bls.n	8002d18 <standbyMotor+0x840>
                //Avanzamos al siguiente estado
                standby.u8Motor++;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <standbyMotor+0x850>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <standbyMotor+0x850>)
 8002cc8:	701a      	strb	r2, [r3, #0]
                
                
      
                
            }
            break;
 8002cca:	e025      	b.n	8002d18 <standbyMotor+0x840>

        case 20:
            //We check if they are still releasing the button
            if (MemoryMap.var.cabecera_fw.board_status.bit_field.switchState == 1) {
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <standbyMotor+0x854>)
 8002cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <standbyMotor+0x80c>
                //We return to the initial state
                standby.u8Motor = 0;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <standbyMotor+0x850>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
            } else {
                //We return to the initialization timeout state of the modules
                standby.u8Motor = 17;
            }
            break;
 8002ce2:	e01a      	b.n	8002d1a <standbyMotor+0x842>
                standby.u8Motor = 17;
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <standbyMotor+0x850>)
 8002ce6:	2211      	movs	r2, #17
 8002ce8:	701a      	strb	r2, [r3, #0]
            break;
 8002cea:	e016      	b.n	8002d1a <standbyMotor+0x842>

        default:
            /*By default we return to the initial state*/
            standby.u8Motor = 0;
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <standbyMotor+0x850>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
            break;
 8002cf2:	e012      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002cf4:	bf00      	nop
 8002cf6:	e010      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002cf8:	bf00      	nop
 8002cfa:	e00e      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002cfc:	bf00      	nop
 8002cfe:	e00c      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002d00:	bf00      	nop
 8002d02:	e00a      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002d04:	bf00      	nop
 8002d06:	e008      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002d08:	bf00      	nop
 8002d0a:	e006      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002d0c:	bf00      	nop
 8002d0e:	e004      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002d10:	bf00      	nop
 8002d12:	e002      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <standbyMotor+0x842>
            break;
 8002d18:	bf00      	nop
    }

    //if (identif.IdPCB == PCB1)
    {
    //We call the engine the standBy led
    LED_Standby_Motor(LED_STANDBY_1);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f000 f854 	bl	8002dc8 <LED_Standby_Motor>
    }
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000214 	.word	0x20000214
 8002d2c:	20000234 	.word	0x20000234
 8002d30:	2000002c 	.word	0x2000002c
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40020400 	.word	0x40020400

08002d3c <LED_Standby_Init>:

void LED_Standby_Init(void) {
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0

    // LED1_OFF;
    // LED2_OFF;
    //Actualizamos mapa de memoria
    //MemoryMap.var.cabecera_fw.board_status.bit_field.ledState = prtDL1;
    for (i = 0; i < MAX_NUM_LED_STANDBY; i++) {
 8002d42:	2300      	movs	r3, #0
 8002d44:	71fb      	strb	r3, [r7, #7]
 8002d46:	e032      	b.n	8002dae <LED_Standby_Init+0x72>
        estatledStandBy[i].u8Motor = 0;
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <LED_Standby_Init+0x88>)
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	4413      	add	r3, r2
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
        estatledStandBy[i].u8Repeticions = 0;
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <LED_Standby_Init+0x88>)
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
        estatledStandBy[i].u8Fixe = 0;
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <LED_Standby_Init+0x88>)
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	4413      	add	r3, r2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
        estatledStandBy[i].u8Color = 0;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <LED_Standby_Init+0x88>)
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	4413      	add	r3, r2
 8002d78:	3303      	adds	r3, #3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
        estatledStandBy[i].u8NovaConfig = 0;
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <LED_Standby_Init+0x88>)
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
        estatledStandBy[i].u16TempsOFF = 0;
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <LED_Standby_Init+0x88>)
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	3308      	adds	r3, #8
 8002d96:	2200      	movs	r2, #0
 8002d98:	801a      	strh	r2, [r3, #0]
        estatledStandBy[i].u16TempsON = 0;
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <LED_Standby_Init+0x88>)
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	4413      	add	r3, r2
 8002da2:	3306      	adds	r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < MAX_NUM_LED_STANDBY; i++) {
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	3301      	adds	r3, #1
 8002dac:	71fb      	strb	r3, [r7, #7]
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0c9      	beq.n	8002d48 <LED_Standby_Init+0xc>
    }
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000204 	.word	0x20000204

08002dc8 <LED_Standby_Motor>:

void LED_Standby_Motor(uint8_t u8Channel) {
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
    switch (estatledStandBy[u8Channel].u8Motor) {
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	4a7b      	ldr	r2, [pc, #492]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	f000 80b1 	beq.w	8002f44 <LED_Standby_Motor+0x17c>
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	f300 80dd 	bgt.w	8002fa2 <LED_Standby_Motor+0x1da>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <LED_Standby_Motor+0x2a>
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d07c      	beq.n	8002eea <LED_Standby_Motor+0x122>
 8002df0:	e0d7      	b.n	8002fa2 <LED_Standby_Motor+0x1da>
        case 0:
            //If it is a new fixed LED configuration we change it
            if (estatledStandBy[u8Channel].u8Fixe == 1 && estatledStandBy[u8Channel].u8NovaConfig == 1) {
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	4a73      	ldr	r2, [pc, #460]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d140      	bne.n	8002e84 <LED_Standby_Motor+0xbc>
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	4a6f      	ldr	r2, [pc, #444]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d138      	bne.n	8002e84 <LED_Standby_Motor+0xbc>
                if (estatledStandBy[u8Channel].u16TempsON > 0 && estatledStandBy[u8Channel].u16TempsOFF == 0) {
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	4a6b      	ldr	r2, [pc, #428]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	4413      	add	r3, r2
 8002e1a:	3306      	adds	r3, #6
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d013      	beq.n	8002e4a <LED_Standby_Motor+0x82>
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	4a67      	ldr	r2, [pc, #412]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	4413      	add	r3, r2
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <LED_Standby_Motor+0x82>
                    LED_Standby_CanviLED(u8Channel, estatledStandBy[u8Channel].u8Color);
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	4a63      	ldr	r2, [pc, #396]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	4413      	add	r3, r2
 8002e3a:	3303      	adds	r3, #3
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f900 	bl	8003048 <LED_Standby_CanviLED>
 8002e48:	e014      	b.n	8002e74 <LED_Standby_Motor+0xac>

                } else if (estatledStandBy[u8Channel].u16TempsOFF > 0 && estatledStandBy[u8Channel].u16TempsON == 0) {
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	4a5d      	ldr	r2, [pc, #372]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	4413      	add	r3, r2
 8002e52:	3308      	adds	r3, #8
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <LED_Standby_Motor+0xac>
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	4a59      	ldr	r2, [pc, #356]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	4413      	add	r3, r2
 8002e62:	3306      	adds	r3, #6
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <LED_Standby_Motor+0xac>
                    LED_Standby_CanviLED(u8Channel, LED_STANDBY_TURN_OFF);
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f8ea 	bl	8003048 <LED_Standby_CanviLED>
                }
                estatledStandBy[u8Channel].u8NovaConfig = 0;
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	4a53      	ldr	r2, [pc, #332]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
                LED_Standby_CanviLED(u8Channel, estatledStandBy[u8Channel].u8Color);
                //Actualizamos mapa de memoria
                //MemoryMap.var.cabecera_fw.board_status.bit_field.ledState = prtDL1;
                estatledStandBy[u8Channel].u8Motor++;
            }
            break;
 8002e82:	e095      	b.n	8002fb0 <LED_Standby_Motor+0x1e8>
            } else if (estatledStandBy[u8Channel].u8Fixe == 0 && estatledStandBy[u8Channel].u8Repeticions > 0) {
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	4a4f      	ldr	r2, [pc, #316]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 808d 	bne.w	8002fb0 <LED_Standby_Motor+0x1e8>
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	4a4a      	ldr	r2, [pc, #296]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8084 	beq.w	8002fb0 <LED_Standby_Motor+0x1e8>
                estatledStandBy[u8Channel].u32Timer = TICKS_GetTicks();
 8002ea8:	79fc      	ldrb	r4, [r7, #7]
 8002eaa:	f000 fcd1 	bl	8003850 <TICKS_GetTicks>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4944      	ldr	r1, [pc, #272]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002eb2:	0123      	lsls	r3, r4, #4
 8002eb4:	440b      	add	r3, r1
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	601a      	str	r2, [r3, #0]
                LED_Standby_CanviLED(u8Channel, estatledStandBy[u8Channel].u8Color);
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4a41      	ldr	r2, [pc, #260]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3303      	adds	r3, #3
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f8bc 	bl	8003048 <LED_Standby_CanviLED>
                estatledStandBy[u8Channel].u8Motor++;
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	493c      	ldr	r1, [pc, #240]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002ed4:	011a      	lsls	r2, r3, #4
 8002ed6:	440a      	add	r2, r1
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	3201      	adds	r2, #1
 8002edc:	b2d1      	uxtb	r1, r2
 8002ede:	4a39      	ldr	r2, [pc, #228]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	4413      	add	r3, r2
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	701a      	strb	r2, [r3, #0]
            break;
 8002ee8:	e062      	b.n	8002fb0 <LED_Standby_Motor+0x1e8>
        case 1:
            if (TICKS_DiffTicks(estatledStandBy[u8Channel].u32Timer) > estatledStandBy[u8Channel].u16TempsON) {
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	4a35      	ldr	r2, [pc, #212]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	4413      	add	r3, r2
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fcb5 	bl	8003866 <TICKS_DiffTicks>
 8002efc:	4602      	mov	r2, r0
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4930      	ldr	r1, [pc, #192]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	440b      	add	r3, r1
 8002f06:	3306      	adds	r3, #6
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d952      	bls.n	8002fb4 <LED_Standby_Motor+0x1ec>
                estatledStandBy[u8Channel].u32Timer = TICKS_GetTicks();
 8002f0e:	79fc      	ldrb	r4, [r7, #7]
 8002f10:	f000 fc9e 	bl	8003850 <TICKS_GetTicks>
 8002f14:	4602      	mov	r2, r0
 8002f16:	492b      	ldr	r1, [pc, #172]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f18:	0123      	lsls	r3, r4, #4
 8002f1a:	440b      	add	r3, r1
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	601a      	str	r2, [r3, #0]
                LED_Standby_CanviLED(u8Channel, LED_STANDBY_TURN_OFF);
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f88f 	bl	8003048 <LED_Standby_CanviLED>
                //Actualizamos mapa de memoria
                //MemoryMap.var.cabecera_fw.board_status.bit_field.ledState = prtDL1;
                estatledStandBy[u8Channel].u8Motor++;
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	4925      	ldr	r1, [pc, #148]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f2e:	011a      	lsls	r2, r3, #4
 8002f30:	440a      	add	r2, r1
 8002f32:	7812      	ldrb	r2, [r2, #0]
 8002f34:	3201      	adds	r2, #1
 8002f36:	b2d1      	uxtb	r1, r2
 8002f38:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	4413      	add	r3, r2
 8002f3e:	460a      	mov	r2, r1
 8002f40:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002f42:	e037      	b.n	8002fb4 <LED_Standby_Motor+0x1ec>
        case 2:
            if (TICKS_DiffTicks(estatledStandBy[u8Channel].u32Timer) > estatledStandBy[u8Channel].u16TempsOFF) {
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fc88 	bl	8003866 <TICKS_DiffTicks>
 8002f56:	4602      	mov	r2, r0
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	491a      	ldr	r1, [pc, #104]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	440b      	add	r3, r1
 8002f60:	3308      	adds	r3, #8
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d927      	bls.n	8002fb8 <LED_Standby_Motor+0x1f0>
                //If we put 0xFF repeats, it will be repeated forever
                if (estatledStandBy[u8Channel].u8Repeticions != 0xFF) {
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	4413      	add	r3, r2
 8002f70:	3301      	adds	r3, #1
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2bff      	cmp	r3, #255	; 0xff
 8002f76:	d00d      	beq.n	8002f94 <LED_Standby_Motor+0x1cc>
                    estatledStandBy[u8Channel].u8Repeticions--;
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	4912      	ldr	r1, [pc, #72]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f7c:	011a      	lsls	r2, r3, #4
 8002f7e:	440a      	add	r2, r1
 8002f80:	3201      	adds	r2, #1
 8002f82:	7812      	ldrb	r2, [r2, #0]
 8002f84:	3a01      	subs	r2, #1
 8002f86:	b2d1      	uxtb	r1, r2
 8002f88:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3301      	adds	r3, #1
 8002f90:	460a      	mov	r2, r1
 8002f92:	701a      	strb	r2, [r3, #0]
                }
                estatledStandBy[u8Channel].u8Motor = 0;
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	4413      	add	r3, r2
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002fa0:	e00a      	b.n	8002fb8 <LED_Standby_Motor+0x1f0>
        default:
            estatledStandBy[u8Channel].u8Motor = 0;
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <LED_Standby_Motor+0x1fc>)
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4413      	add	r3, r2
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
            break;
 8002fae:	e004      	b.n	8002fba <LED_Standby_Motor+0x1f2>
            break;
 8002fb0:	bf00      	nop
 8002fb2:	e002      	b.n	8002fba <LED_Standby_Motor+0x1f2>
            break;
 8002fb4:	bf00      	nop
 8002fb6:	e000      	b.n	8002fba <LED_Standby_Motor+0x1f2>
            break;
 8002fb8:	bf00      	nop
    }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd90      	pop	{r4, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000204 	.word	0x20000204

08002fc8 <LED_Standby_Configure>:

void LED_Standby_Configure(uint8_t u8Channel, uint8_t u8Repeats, uint16_t u16TimeOff, uint16_t u16TimeOn, uint8_t u8Fixe, uint8_t u8Color) {
 8002fc8:	b490      	push	{r4, r7}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4604      	mov	r4, r0
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	71fb      	strb	r3, [r7, #7]
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71bb      	strb	r3, [r7, #6]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	80bb      	strh	r3, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	807b      	strh	r3, [r7, #2]
    estatledStandBy[u8Channel].u8Repeticions = u8Repeats;
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	4a16      	ldr	r2, [pc, #88]	; (8003044 <LED_Standby_Configure+0x7c>)
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	4413      	add	r3, r2
 8002fee:	3301      	adds	r3, #1
 8002ff0:	79ba      	ldrb	r2, [r7, #6]
 8002ff2:	701a      	strb	r2, [r3, #0]
    estatledStandBy[u8Channel].u8Fixe = u8Fixe;
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <LED_Standby_Configure+0x7c>)
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	7c3a      	ldrb	r2, [r7, #16]
 8003000:	701a      	strb	r2, [r3, #0]
    estatledStandBy[u8Channel].u8Color = u8Color;
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <LED_Standby_Configure+0x7c>)
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	4413      	add	r3, r2
 800300a:	3303      	adds	r3, #3
 800300c:	7d3a      	ldrb	r2, [r7, #20]
 800300e:	701a      	strb	r2, [r3, #0]
    estatledStandBy[u8Channel].u16TempsOFF = u16TimeOff;
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <LED_Standby_Configure+0x7c>)
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	3308      	adds	r3, #8
 800301a:	88ba      	ldrh	r2, [r7, #4]
 800301c:	801a      	strh	r2, [r3, #0]
    estatledStandBy[u8Channel].u16TempsON = u16TimeOn;
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	4a08      	ldr	r2, [pc, #32]	; (8003044 <LED_Standby_Configure+0x7c>)
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	3306      	adds	r3, #6
 8003028:	887a      	ldrh	r2, [r7, #2]
 800302a:	801a      	strh	r2, [r3, #0]
    estatledStandBy[u8Channel].u8NovaConfig = 1;
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <LED_Standby_Configure+0x7c>)
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	4413      	add	r3, r2
 8003034:	3304      	adds	r3, #4
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bc90      	pop	{r4, r7}
 8003042:	4770      	bx	lr
 8003044:	20000204 	.word	0x20000204

08003048 <LED_Standby_CanviLED>:

void LED_Standby_CanviLED(uint8_t u8Channel, uint8_t u8Estat) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	460a      	mov	r2, r1
 8003052:	71fb      	strb	r3, [r7, #7]
 8003054:	4613      	mov	r3, r2
 8003056:	71bb      	strb	r3, [r7, #6]
    if (u8Channel == LED_STANDBY_1) {
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <LED_Standby_CanviLED+0x1e>
        //prtDL1 = u8Estat;
        ledStandByColor(u8Estat);
 800305e:	79bb      	ldrb	r3, [r7, #6]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f805 	bl	8003070 <ledStandByColor>
    }
    //    else if (u8Channel == LED2) {
    //        prtDL2 = u8Estat;
    //    }
    // else { LED_G_OUT = u8Estat; }
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <ledStandByColor>:

void ledStandByColor(uint8_t ledColor) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]

    if (ledColor == LED_STANDBY_RED) {
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d10a      	bne.n	8003096 <ledStandByColor+0x26>
        /*First I turn off transients and then I turn them on*/
        prtGreenLED(0);
 8003080:	2200      	movs	r2, #0
 8003082:	2102      	movs	r1, #2
 8003084:	4812      	ldr	r0, [pc, #72]	; (80030d0 <ledStandByColor+0x60>)
 8003086:	f002 fa1b 	bl	80054c0 <HAL_GPIO_WritePin>
        prtRedLED(1);
 800308a:	2201      	movs	r2, #1
 800308c:	2101      	movs	r1, #1
 800308e:	4810      	ldr	r0, [pc, #64]	; (80030d0 <ledStandByColor+0x60>)
 8003090:	f002 fa16 	bl	80054c0 <HAL_GPIO_WritePin>
        /*Led switched off*/
        prtGreenLED(0);
        prtRedLED(0);
    }

}
 8003094:	e017      	b.n	80030c6 <ledStandByColor+0x56>
    } else if (ledColor == LED_STANDBY_GREEN) {
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d10a      	bne.n	80030b2 <ledStandByColor+0x42>
        prtGreenLED(1);
 800309c:	2201      	movs	r2, #1
 800309e:	2102      	movs	r1, #2
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <ledStandByColor+0x60>)
 80030a2:	f002 fa0d 	bl	80054c0 <HAL_GPIO_WritePin>
        prtRedLED(0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2101      	movs	r1, #1
 80030aa:	4809      	ldr	r0, [pc, #36]	; (80030d0 <ledStandByColor+0x60>)
 80030ac:	f002 fa08 	bl	80054c0 <HAL_GPIO_WritePin>
}
 80030b0:	e009      	b.n	80030c6 <ledStandByColor+0x56>
        prtGreenLED(0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2102      	movs	r1, #2
 80030b6:	4806      	ldr	r0, [pc, #24]	; (80030d0 <ledStandByColor+0x60>)
 80030b8:	f002 fa02 	bl	80054c0 <HAL_GPIO_WritePin>
        prtRedLED(0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2101      	movs	r1, #1
 80030c0:	4803      	ldr	r0, [pc, #12]	; (80030d0 <ledStandByColor+0x60>)
 80030c2:	f002 f9fd 	bl	80054c0 <HAL_GPIO_WritePin>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000

080030d4 <SWITCH_Detect>:

void SWITCH_Detect(void)
{
 80030d4:	b598      	push	{r3, r4, r7, lr}
 80030d6:	af00      	add	r7, sp, #0
    if(switch_status.u8Value != prtOnOffn)
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <SWITCH_Detect+0x6c>)
 80030da:	781c      	ldrb	r4, [r3, #0]
 80030dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030e0:	4818      	ldr	r0, [pc, #96]	; (8003144 <SWITCH_Detect+0x70>)
 80030e2:	f002 f9d5 	bl	8005490 <HAL_GPIO_ReadPin>
 80030e6:	4603      	mov	r3, r0
 80030e8:	429c      	cmp	r4, r3
 80030ea:	d00e      	beq.n	800310a <SWITCH_Detect+0x36>
    {
        switch_status.u8Value = prtOnOffn;
 80030ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030f0:	4814      	ldr	r0, [pc, #80]	; (8003144 <SWITCH_Detect+0x70>)
 80030f2:	f002 f9cd 	bl	8005490 <HAL_GPIO_ReadPin>
 80030f6:	4603      	mov	r3, r0
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <SWITCH_Detect+0x6c>)
 80030fc:	701a      	strb	r2, [r3, #0]
        switch_status.u32Timer = TICKS_GetTicks();
 80030fe:	f000 fba7 	bl	8003850 <TICKS_GetTicks>
 8003102:	4603      	mov	r3, r0
 8003104:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <SWITCH_Detect+0x6c>)
 8003106:	6053      	str	r3, [r2, #4]
    else if(TICKS_DiffTicks(switch_status.u32Timer) > PULS_DEBOUNCE_TIME)
    {
        MemoryMap.var.cabecera_fw.board_status.bit_field.switchState = switch_status.u8Value;
        switch_status.u32Timer = TICKS_GetTicks();
    }
}
 8003108:	e018      	b.n	800313c <SWITCH_Detect+0x68>
    else if(TICKS_DiffTicks(switch_status.u32Timer) > PULS_DEBOUNCE_TIME)
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <SWITCH_Detect+0x6c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fba9 	bl	8003866 <TICKS_DiffTicks>
 8003114:	4603      	mov	r3, r0
 8003116:	2b14      	cmp	r3, #20
 8003118:	d910      	bls.n	800313c <SWITCH_Detect+0x68>
        MemoryMap.var.cabecera_fw.board_status.bit_field.switchState = switch_status.u8Value;
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <SWITCH_Detect+0x6c>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	b2d9      	uxtb	r1, r3
 8003124:	4a08      	ldr	r2, [pc, #32]	; (8003148 <SWITCH_Detect+0x74>)
 8003126:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800312a:	f361 03c3 	bfi	r3, r1, #3, #1
 800312e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        switch_status.u32Timer = TICKS_GetTicks();
 8003132:	f000 fb8d 	bl	8003850 <TICKS_GetTicks>
 8003136:	4603      	mov	r3, r0
 8003138:	4a01      	ldr	r2, [pc, #4]	; (8003140 <SWITCH_Detect+0x6c>)
 800313a:	6053      	str	r3, [r2, #4]
}
 800313c:	bf00      	nop
 800313e:	bd98      	pop	{r3, r4, r7, pc}
 8003140:	20000228 	.word	0x20000228
 8003144:	40020800 	.word	0x40020800
 8003148:	20000234 	.word	0x20000234

0800314c <SYS_Init>:
uint8_t esLecturaDestructiva(uint16_t u16Addr);

uint8_t isReadOnlyRegister(uint16_t u16Addr);

void SYS_Init(void)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
    uint8_t i;
    
    MemoryMap.var.cabecera_fw.board_definition.u8BoardAddres = FNT_DEFAULT_ADDR;
 8003152:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <SYS_Init+0xb8>)
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
    MemoryMap.var.cabecera_fw.board_definition.u8BoardType = FNT_BOARD_TYPE;
 8003158:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <SYS_Init+0xb8>)
 800315a:	2202      	movs	r2, #2
 800315c:	705a      	strb	r2, [r3, #1]
    MemoryMap.var.cabecera_fw.board_definition.u8BootVers = 5;//u8BootVersion;
 800315e:	4b29      	ldr	r3, [pc, #164]	; (8003204 <SYS_Init+0xb8>)
 8003160:	2205      	movs	r2, #5
 8003162:	70da      	strb	r2, [r3, #3]
    MemoryMap.var.cabecera_fw.board_definition.u8FWVers = FNT_FW_VERSION;
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <SYS_Init+0xb8>)
 8003166:	2215      	movs	r2, #21
 8003168:	711a      	strb	r2, [r3, #4]
    MemoryMap.var.cabecera_fw.board_definition.u8MinSlot = EXP_MIN_SLOT;
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <SYS_Init+0xb8>)
 800316c:	2202      	movs	r2, #2
 800316e:	719a      	strb	r2, [r3, #6]
    MemoryMap.var.cabecera_fw.board_definition.u8MaxSlot = EXP_MAX_SLOT;
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <SYS_Init+0xb8>)
 8003172:	2202      	movs	r2, #2
 8003174:	71da      	strb	r2, [r3, #7]
//    MemoryMap.board_definition.u8ProtVers /* the protocol touches this variable in the initialization */
    MemoryMap.var.cabecera_fw.board_definition.u8MaxBuffRx = CMP_MAX_BUF_RX;
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <SYS_Init+0xb8>)
 8003178:	22ff      	movs	r2, #255	; 0xff
 800317a:	709a      	strb	r2, [r3, #2]
    
    MemoryMap.var.cabecera_fw.board_definition.SizeMemories[CMP_INTERNAL_USED_RAM].u32value = CMP_INTERNAL_USED_RAM_SIZE;
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <SYS_Init+0xb8>)
 800317e:	2264      	movs	r2, #100	; 0x64
 8003180:	609a      	str	r2, [r3, #8]
    MemoryMap.var.cabecera_fw.board_definition.SizeMemories[CMP_INTERNAL_RAM].u32value = CMP_INTERNAL_RAM_SIZE;
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <SYS_Init+0xb8>)
 8003184:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003188:	60da      	str	r2, [r3, #12]
    MemoryMap.var.cabecera_fw.board_definition.SizeMemories[CMP_INTERNAL_FLASH].u32value = CMP_INTERNAL_FLASH_SIZE;
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <SYS_Init+0xb8>)
 800318c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003190:	611a      	str	r2, [r3, #16]
    MemoryMap.var.cabecera_fw.board_definition.SizeMemories[CMP_INTERNAL_EEPROM].u32value = CMP_INTERNAL_EEPROM_SIZE;
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <SYS_Init+0xb8>)
 8003194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003198:	615a      	str	r2, [r3, #20]
    MemoryMap.var.cabecera_fw.board_definition.SizeMemories[CMP_UNDEFINED_4].u32value = EXP_UNDEFINED_4_SIZE;
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <SYS_Init+0xb8>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
    MemoryMap.var.cabecera_fw.board_definition.SizeMemories[CMP_UNDEFINED_5].u32value = EXP_UNDEFINED_5_SIZE;
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <SYS_Init+0xb8>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	61da      	str	r2, [r3, #28]
    MemoryMap.var.cabecera_fw.board_definition.SizeMemories[CMP_UNDEFINED_6].u32value = EXP_UNDEFINED_6_SIZE;
 80031a6:	4b17      	ldr	r3, [pc, #92]	; (8003204 <SYS_Init+0xb8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	621a      	str	r2, [r3, #32]
    MemoryMap.var.cabecera_fw.board_definition.SizeMemories[CMP_UNDEFINED_7].u32value = EXP_UNDEFINED_7_SIZE;
 80031ac:	4b15      	ldr	r3, [pc, #84]	; (8003204 <SYS_Init+0xb8>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24
    
    MemoryMap.var.cabecera_fw.board_status.status = 0;
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <SYS_Init+0xb8>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    MemoryMap.var.cabecera_fw.board_alarms.alarms = 0;
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <SYS_Init+0xb8>)
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    for(i = 0; i < CMP_MAX_MEMORIES; i++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	71fb      	strb	r3, [r7, #7]
 80031c6:	e00e      	b.n	80031e6 <SYS_Init+0x9a>
    {
        MemoryMap.var.cabecera_fw.mems_status[i].status = 0;
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <SYS_Init+0xb8>)
 80031cc:	4413      	add	r3, r2
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        MemoryMap.var.cabecera_fw.mems_alarms[i].alarms = 0;
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <SYS_Init+0xb8>)
 80031d8:	4413      	add	r3, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    for(i = 0; i < CMP_MAX_MEMORIES; i++)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	3301      	adds	r3, #1
 80031e4:	71fb      	strb	r3, [r7, #7]
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	2b07      	cmp	r3, #7
 80031ea:	d9ed      	bls.n	80031c8 <SYS_Init+0x7c>
    }
    MemoryMap.var.cabecera_fw.u16accions = 0;
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <SYS_Init+0xb8>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    MemoryMap.var.cabecera_fw.u16accioactual = 0;
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <SYS_Init+0xb8>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	85da      	strh	r2, [r3, #46]	; 0x2e
		
		
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	20000234 	.word	0x20000234

08003208 <SYS_GetParam_Char>:

returnstatus_t SYS_GetParam_Char(uint16_t u16Parametro, uint8_t *ptu8Value, uint16_t u16NumReg)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	80fb      	strh	r3, [r7, #6]
 8003214:	4613      	mov	r3, r2
 8003216:	80bb      	strh	r3, [r7, #4]
    uint32_t i;
    for (i = 0; i < u16NumReg; i++){
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e01d      	b.n	800325a <SYS_GetParam_Char+0x52>
        if(i >= sizeof(memory_map_t)) return ERROR_HTP;     //write outside the structure
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b63      	cmp	r3, #99	; 0x63
 8003222:	d902      	bls.n	800322a <SYS_GetParam_Char+0x22>
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	e01c      	b.n	8003264 <SYS_GetParam_Char+0x5c>
        ptu8Value[i] = MemoryMap.ptucBytes[u16Parametro];
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	440b      	add	r3, r1
 8003232:	490e      	ldr	r1, [pc, #56]	; (800326c <SYS_GetParam_Char+0x64>)
 8003234:	5c8a      	ldrb	r2, [r1, r2]
 8003236:	701a      	strb	r2, [r3, #0]
        if(esLecturaDestructiva(u16Parametro) != 0)
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f8cc 	bl	80033d8 <esLecturaDestructiva>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <SYS_GetParam_Char+0x46>
        {
            MemoryMap.ptucBytes[u16Parametro] = 0;
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	4a08      	ldr	r2, [pc, #32]	; (800326c <SYS_GetParam_Char+0x64>)
 800324a:	2100      	movs	r1, #0
 800324c:	54d1      	strb	r1, [r2, r3]
        }
        u16Parametro++;
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	3301      	adds	r3, #1
 8003252:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < u16NumReg; i++){
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	88bb      	ldrh	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	429a      	cmp	r2, r3
 8003260:	d3dd      	bcc.n	800321e <SYS_GetParam_Char+0x16>
    }
    return SUCCESS_HTP;
 8003262:	2301      	movs	r3, #1
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000234 	.word	0x20000234

08003270 <SYS_SetParam_Char>:

returnstatus_t SYS_SetParam_Char(uint16_t u16Parametro, uint8_t *ptu8Value, uint16_t u16NumReg)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	80fb      	strh	r3, [r7, #6]
 800327c:	4613      	mov	r3, r2
 800327e:	80bb      	strh	r3, [r7, #4]
    uint32_t i;
    for (i = 0; i < u16NumReg; i++){
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e019      	b.n	80032ba <SYS_SetParam_Char+0x4a>
        if(i >= sizeof(memory_map_t)) return ERROR_HTP;     //write outside the structure
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b63      	cmp	r3, #99	; 0x63
 800328a:	d902      	bls.n	8003292 <SYS_SetParam_Char+0x22>
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
 8003290:	e018      	b.n	80032c4 <SYS_SetParam_Char+0x54>
        if(isReadOnlyRegister(u16Parametro) == 0)
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f8ab 	bl	80033f0 <isReadOnlyRegister>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <SYS_SetParam_Char+0x3e>
        {
            MemoryMap.ptucBytes[u16Parametro] = ptu8Value[i];
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	441a      	add	r2, r3
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	7811      	ldrb	r1, [r2, #0]
 80032aa:	4a08      	ldr	r2, [pc, #32]	; (80032cc <SYS_SetParam_Char+0x5c>)
 80032ac:	54d1      	strb	r1, [r2, r3]
        }
        u16Parametro++;
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	3301      	adds	r3, #1
 80032b2:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < u16NumReg; i++){
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	88bb      	ldrh	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3e1      	bcc.n	8003286 <SYS_SetParam_Char+0x16>
    }
    return SUCCESS_HTP;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000234 	.word	0x20000234

080032d0 <SYS_Action>:

returnstatus_t SYS_Action(uint8_t u8Operation, uint8_t u8Order, uint32_t u32Addr, uint8_t* ptu8Dades, uint16_t u16NumDades)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60ba      	str	r2, [r7, #8]
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	4603      	mov	r3, r0
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	460b      	mov	r3, r1
 80032e0:	73bb      	strb	r3, [r7, #14]
  returnstatus_t temp;
	uint8_t aux;
    
	if((u8Order) == PROTSLV_ORDER_ORDER)
 80032e2:	7bbb      	ldrb	r3, [r7, #14]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d140      	bne.n	800336a <SYS_Action+0x9a>
	{
		if(u8Operation == PROTSLV_OP_READING)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d117      	bne.n	800331e <SYS_Action+0x4e>
		{
			if(SYS_GetParam_Char(u32Addr, ptu8Dades, u16NumDades) == ERROR_HTP)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	8c3a      	ldrh	r2, [r7, #32]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff86 	bl	8003208 <SYS_GetParam_Char>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d109      	bne.n	8003318 <SYS_Action+0x48>
			{
					MemoryMap.var.cabecera_fw.mems_alarms[CMP_INTERNAL_USED_RAM].bit_field.u8AccesForaRang = 1;
 8003304:	4a33      	ldr	r2, [pc, #204]	; (80033d4 <SYS_Action+0x104>)
 8003306:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
					temp = ERROR_HTP;
 8003312:	23ff      	movs	r3, #255	; 0xff
 8003314:	75fb      	strb	r3, [r7, #23]
 8003316:	e057      	b.n	80033c8 <SYS_Action+0xf8>
			}
			else
			{
					temp = SUCCESS_HTP;
 8003318:	2301      	movs	r3, #1
 800331a:	75fb      	strb	r3, [r7, #23]
 800331c:	e054      	b.n	80033c8 <SYS_Action+0xf8>
			}
		}
		else
		{
			if((u32Addr == 24) && (ptu8Dades[0] == 1))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b18      	cmp	r3, #24
 8003322:	d10a      	bne.n	800333a <SYS_Action+0x6a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d106      	bne.n	800333a <SYS_Action+0x6a>
			{
					MemoryMap.var.cabecera_fw.mems_alarms[CMP_INTERNAL_USED_RAM].bit_field.u8AccesForaRang = 0;
 800332c:	4a29      	ldr	r2, [pc, #164]	; (80033d4 <SYS_Action+0x104>)
 800332e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8003332:	f36f 0300 	bfc	r3, #0, #1
 8003336:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
			}
			if(SYS_SetParam_Char(u32Addr, ptu8Dades, u16NumDades) == ERROR_HTP)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	b29b      	uxth	r3, r3
 800333e:	8c3a      	ldrh	r2, [r7, #32]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ff94 	bl	8003270 <SYS_SetParam_Char>
 8003348:	4603      	mov	r3, r0
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d109      	bne.n	8003364 <SYS_Action+0x94>
			{
					MemoryMap.var.cabecera_fw.mems_alarms[CMP_INTERNAL_USED_RAM].bit_field.u8AccesForaRang = 1;
 8003350:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <SYS_Action+0x104>)
 8003352:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
					temp = ERROR_HTP;
 800335e:	23ff      	movs	r3, #255	; 0xff
 8003360:	75fb      	strb	r3, [r7, #23]
 8003362:	e031      	b.n	80033c8 <SYS_Action+0xf8>
			}
			else
			{
					temp = SUCCESS_HTP;
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
 8003368:	e02e      	b.n	80033c8 <SYS_Action+0xf8>
			}
		}
	}
	else if(u8Operation == PROTSLV_MEM_STAT_ABORTED)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d102      	bne.n	8003376 <SYS_Action+0xa6>
	{
		/* it will never be given ... orders end immediately */
		temp = ERROR_HTP;
 8003370:	23ff      	movs	r3, #255	; 0xff
 8003372:	75fb      	strb	r3, [r7, #23]
 8003374:	e028      	b.n	80033c8 <SYS_Action+0xf8>
	}
	else
	{
		aux = MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_USED_RAM].bit_field.stat;
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <SYS_Action+0x104>)
 8003378:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800337c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003380:	b2db      	uxtb	r3, r3
 8003382:	75bb      	strb	r3, [r7, #22]
		if(aux == PROTSLV_MEM_STAT_ABORTED)
 8003384:	7dbb      	ldrb	r3, [r7, #22]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d109      	bne.n	800339e <SYS_Action+0xce>
		{
			MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_USED_RAM].bit_field.stat = PROTSLV_MEM_STAT_IDLE;
 800338a:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <SYS_Action+0x104>)
 800338c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8003390:	f36f 0301 	bfc	r3, #0, #2
 8003394:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
			temp = ERROR_HTP;
 8003398:	23ff      	movs	r3, #255	; 0xff
 800339a:	75fb      	strb	r3, [r7, #23]
 800339c:	e014      	b.n	80033c8 <SYS_Action+0xf8>
		}
		else if(aux == PROTSLV_MEM_STAT_FINISHED)
 800339e:	7dbb      	ldrb	r3, [r7, #22]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d109      	bne.n	80033b8 <SYS_Action+0xe8>
		{
			MemoryMap.var.cabecera_fw.mems_status[CMP_INTERNAL_USED_RAM].bit_field.stat = PROTSLV_MEM_STAT_IDLE;
 80033a4:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <SYS_Action+0x104>)
 80033a6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80033aa:	f36f 0301 	bfc	r3, #0, #2
 80033ae:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
			temp = SUCCESS_HTP;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
 80033b6:	e007      	b.n	80033c8 <SYS_Action+0xf8>
		}
		else if(aux == PROTSLV_MEM_STAT_RUNNING)
 80033b8:	7dbb      	ldrb	r3, [r7, #22]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <SYS_Action+0xf4>
		{
			temp = RUNNING_HTP;
 80033be:	23fe      	movs	r3, #254	; 0xfe
 80033c0:	75fb      	strb	r3, [r7, #23]
 80033c2:	e001      	b.n	80033c8 <SYS_Action+0xf8>
		}
		else
		{
			temp = IDLE_HTP;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]
		}
	}
	return temp;
 80033c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000234 	.word	0x20000234

080033d8 <esLecturaDestructiva>:



uint8_t esLecturaDestructiva(uint16_t u16Addr)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	80fb      	strh	r3, [r7, #6]
	return 0;//(uint8_t)(reg_lect_destructiva.ptucBytes[u16Addr/8]&(1<<u16Addr&0x07));
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <isReadOnlyRegister>:

uint8_t isReadOnlyRegister(uint16_t u16Addr)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	80fb      	strh	r3, [r7, #6]
	return 0;//(uint8_t)(reg_read_only.ptucBytes[u16Addr/8]&(1<<u16Addr&0x07));
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <Delay_us>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
void Delay_us(__IO uint32_t micros) {
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
//    /* Delay till end */
//    while ((DWT->CYCCNT - start) < micros);
//#else
    /* Go to clock cycles */
//    micros *= (SystemCoreClock / 1000000) / 5;
    micros *= ((SystemCoreClock / 1000000) / 8);
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <Delay_us+0x34>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <Delay_us+0x38>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0d5b      	lsrs	r3, r3, #21
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	607b      	str	r3, [r7, #4]
    /* Wait till done */
    do {
//    	   __ASM volatile ("NOP");
    }     while (micros--);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1e5a      	subs	r2, r3, #1
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1fa      	bne.n	8003424 <Delay_us+0x1c>
//#endif
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20000004 	.word	0x20000004
 8003440:	431bde83 	.word	0x431bde83

08003444 <LED_Init>:

led_status_t estatled[MAX_NUM_LED];

void LED_CanviLED(uint8_t u8Channel, uint8_t u8Estat);

void LED_Init(void) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
    //   LEDS_OUTPUT_DIRECTION;

    //    LED_Y_OFF;
    //    LED_R_OFF;
    //    LED_G_OFF;
    LED1_OFF;
 800344a:	2201      	movs	r2, #1
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	4828      	ldr	r0, [pc, #160]	; (80034f0 <LED_Init+0xac>)
 8003450:	f002 f836 	bl	80054c0 <HAL_GPIO_WritePin>
    LED2_OFF;
 8003454:	2201      	movs	r2, #1
 8003456:	2110      	movs	r1, #16
 8003458:	4826      	ldr	r0, [pc, #152]	; (80034f4 <LED_Init+0xb0>)
 800345a:	f002 f831 	bl	80054c0 <HAL_GPIO_WritePin>
    //Actualizamos mapa de memoria
    //MemoryMap.var.cabecera_fw.board_status.bit_field.ledState = prtDL1;
    for (i = 0; i < MAX_NUM_LED; i++) {
 800345e:	2300      	movs	r3, #0
 8003460:	71fb      	strb	r3, [r7, #7]
 8003462:	e03d      	b.n	80034e0 <LED_Init+0x9c>
        estatled[i].u8Motor = 0;
 8003464:	79fa      	ldrb	r2, [r7, #7]
 8003466:	4924      	ldr	r1, [pc, #144]	; (80034f8 <LED_Init+0xb4>)
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
        estatled[i].u8Repeticions = 0;
 8003476:	79fa      	ldrb	r2, [r7, #7]
 8003478:	491f      	ldr	r1, [pc, #124]	; (80034f8 <LED_Init+0xb4>)
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	3301      	adds	r3, #1
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
        estatled[i].u8Fixe = 0;
 800348a:	79fa      	ldrb	r2, [r7, #7]
 800348c:	491a      	ldr	r1, [pc, #104]	; (80034f8 <LED_Init+0xb4>)
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3302      	adds	r3, #2
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]
        estatled[i].u8NovaConfig = 0;
 800349e:	79fa      	ldrb	r2, [r7, #7]
 80034a0:	4915      	ldr	r1, [pc, #84]	; (80034f8 <LED_Init+0xb4>)
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3303      	adds	r3, #3
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
        estatled[i].u16TempsOFF = 0;
 80034b2:	79fa      	ldrb	r2, [r7, #7]
 80034b4:	4910      	ldr	r1, [pc, #64]	; (80034f8 <LED_Init+0xb4>)
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3306      	adds	r3, #6
 80034c2:	2200      	movs	r2, #0
 80034c4:	801a      	strh	r2, [r3, #0]
        estatled[i].u16TempsON = 0;
 80034c6:	79fa      	ldrb	r2, [r7, #7]
 80034c8:	490b      	ldr	r1, [pc, #44]	; (80034f8 <LED_Init+0xb4>)
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3304      	adds	r3, #4
 80034d6:	2200      	movs	r2, #0
 80034d8:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < MAX_NUM_LED; i++) {
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	3301      	adds	r3, #1
 80034de:	71fb      	strb	r3, [r7, #7]
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d9be      	bls.n	8003464 <LED_Init+0x20>
    }
}
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40020c00 	.word	0x40020c00
 80034f4:	40020400 	.word	0x40020400
 80034f8:	20000298 	.word	0x20000298

080034fc <LED_Motor>:

void LED_Motor(uint8_t u8Channel) {
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
    switch (estatled[u8Channel].u8Motor) {
 8003506:	79fa      	ldrb	r2, [r7, #7]
 8003508:	499b      	ldr	r1, [pc, #620]	; (8003778 <LED_Motor+0x27c>)
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	f000 80d9 	beq.w	80036ce <LED_Motor+0x1d2>
 800351c:	2b02      	cmp	r3, #2
 800351e:	f300 8117 	bgt.w	8003750 <LED_Motor+0x254>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <LED_Motor+0x32>
 8003526:	2b01      	cmp	r3, #1
 8003528:	f000 8095 	beq.w	8003656 <LED_Motor+0x15a>
 800352c:	e110      	b.n	8003750 <LED_Motor+0x254>
        case 0:
            //If it is a new fixed led configuration, we change it
            if (estatled[u8Channel].u8Fixe == 1 && estatled[u8Channel].u8NovaConfig == 1) {
 800352e:	79fa      	ldrb	r2, [r7, #7]
 8003530:	4991      	ldr	r1, [pc, #580]	; (8003778 <LED_Motor+0x27c>)
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3302      	adds	r3, #2
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d14c      	bne.n	80035de <LED_Motor+0xe2>
 8003544:	79fa      	ldrb	r2, [r7, #7]
 8003546:	498c      	ldr	r1, [pc, #560]	; (8003778 <LED_Motor+0x27c>)
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3303      	adds	r3, #3
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d141      	bne.n	80035de <LED_Motor+0xe2>
                if (estatled[u8Channel].u16TempsON > 0 && estatled[u8Channel].u16TempsOFF == 0) {
 800355a:	79fa      	ldrb	r2, [r7, #7]
 800355c:	4986      	ldr	r1, [pc, #536]	; (8003778 <LED_Motor+0x27c>)
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3304      	adds	r3, #4
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <LED_Motor+0x96>
 8003570:	79fa      	ldrb	r2, [r7, #7]
 8003572:	4981      	ldr	r1, [pc, #516]	; (8003778 <LED_Motor+0x27c>)
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3306      	adds	r3, #6
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <LED_Motor+0x96>
                    LED_CanviLED(u8Channel, LED_ON);
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f93e 	bl	800380c <LED_CanviLED>
 8003590:	e01a      	b.n	80035c8 <LED_Motor+0xcc>
                } else if (estatled[u8Channel].u16TempsOFF > 0 && estatled[u8Channel].u16TempsON == 0) {
 8003592:	79fa      	ldrb	r2, [r7, #7]
 8003594:	4978      	ldr	r1, [pc, #480]	; (8003778 <LED_Motor+0x27c>)
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3306      	adds	r3, #6
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00f      	beq.n	80035c8 <LED_Motor+0xcc>
 80035a8:	79fa      	ldrb	r2, [r7, #7]
 80035aa:	4973      	ldr	r1, [pc, #460]	; (8003778 <LED_Motor+0x27c>)
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3304      	adds	r3, #4
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <LED_Motor+0xcc>
                    LED_CanviLED(u8Channel, LED_OFF);
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	2101      	movs	r1, #1
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f922 	bl	800380c <LED_CanviLED>
                }
                estatled[u8Channel].u8NovaConfig = 0;
 80035c8:	79fa      	ldrb	r2, [r7, #7]
 80035ca:	496b      	ldr	r1, [pc, #428]	; (8003778 <LED_Motor+0x27c>)
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	3303      	adds	r3, #3
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
                LED_CanviLED(u8Channel, LED_ON);
                //Actualizamos mapa de memoria
                //MemoryMap.var.cabecera_fw.board_status.bit_field.ledState = prtDL1;
                estatled[u8Channel].u8Motor++;
            }
            break;
 80035dc:	e0c2      	b.n	8003764 <LED_Motor+0x268>
            } else if (estatled[u8Channel].u8Fixe == 0 && estatled[u8Channel].u8Repeticions > 0) {
 80035de:	79fa      	ldrb	r2, [r7, #7]
 80035e0:	4965      	ldr	r1, [pc, #404]	; (8003778 <LED_Motor+0x27c>)
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3302      	adds	r3, #2
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f040 80b7 	bne.w	8003764 <LED_Motor+0x268>
 80035f6:	79fa      	ldrb	r2, [r7, #7]
 80035f8:	495f      	ldr	r1, [pc, #380]	; (8003778 <LED_Motor+0x27c>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3301      	adds	r3, #1
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80ab 	beq.w	8003764 <LED_Motor+0x268>
                estatled[u8Channel].u32Timer = TICKS_GetTicks();
 800360e:	79fc      	ldrb	r4, [r7, #7]
 8003610:	f000 f91e 	bl	8003850 <TICKS_GetTicks>
 8003614:	4602      	mov	r2, r0
 8003616:	4958      	ldr	r1, [pc, #352]	; (8003778 <LED_Motor+0x27c>)
 8003618:	4623      	mov	r3, r4
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4423      	add	r3, r4
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3308      	adds	r3, #8
 8003624:	601a      	str	r2, [r3, #0]
                LED_CanviLED(u8Channel, LED_ON);
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f8ee 	bl	800380c <LED_CanviLED>
                estatled[u8Channel].u8Motor++;
 8003630:	79fa      	ldrb	r2, [r7, #7]
 8003632:	4951      	ldr	r1, [pc, #324]	; (8003778 <LED_Motor+0x27c>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	b2d8      	uxtb	r0, r3
 8003644:	494c      	ldr	r1, [pc, #304]	; (8003778 <LED_Motor+0x27c>)
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	4602      	mov	r2, r0
 8003652:	701a      	strb	r2, [r3, #0]
            break;
 8003654:	e086      	b.n	8003764 <LED_Motor+0x268>
        case 1:
            if (TICKS_DiffTicks(estatled[u8Channel].u32Timer) > estatled[u8Channel].u16TempsON) {
 8003656:	79fa      	ldrb	r2, [r7, #7]
 8003658:	4947      	ldr	r1, [pc, #284]	; (8003778 <LED_Motor+0x27c>)
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	3308      	adds	r3, #8
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f8fc 	bl	8003866 <TICKS_DiffTicks>
 800366e:	4601      	mov	r1, r0
 8003670:	79fa      	ldrb	r2, [r7, #7]
 8003672:	4841      	ldr	r0, [pc, #260]	; (8003778 <LED_Motor+0x27c>)
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4403      	add	r3, r0
 800367e:	3304      	adds	r3, #4
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	4299      	cmp	r1, r3
 8003684:	d970      	bls.n	8003768 <LED_Motor+0x26c>
                estatled[u8Channel].u32Timer = TICKS_GetTicks();
 8003686:	79fc      	ldrb	r4, [r7, #7]
 8003688:	f000 f8e2 	bl	8003850 <TICKS_GetTicks>
 800368c:	4602      	mov	r2, r0
 800368e:	493a      	ldr	r1, [pc, #232]	; (8003778 <LED_Motor+0x27c>)
 8003690:	4623      	mov	r3, r4
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4423      	add	r3, r4
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3308      	adds	r3, #8
 800369c:	601a      	str	r2, [r3, #0]
                LED_CanviLED(u8Channel, LED_OFF);
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f8b2 	bl	800380c <LED_CanviLED>
                //Actualizamos mapa de memoria
                //MemoryMap.var.cabecera_fw.board_status.bit_field.ledState = prtDL1;
                estatled[u8Channel].u8Motor++;
 80036a8:	79fa      	ldrb	r2, [r7, #7]
 80036aa:	4933      	ldr	r1, [pc, #204]	; (8003778 <LED_Motor+0x27c>)
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	b2d8      	uxtb	r0, r3
 80036bc:	492e      	ldr	r1, [pc, #184]	; (8003778 <LED_Motor+0x27c>)
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	4602      	mov	r2, r0
 80036ca:	701a      	strb	r2, [r3, #0]
            }
            break;
 80036cc:	e04c      	b.n	8003768 <LED_Motor+0x26c>
        case 2:
            if (TICKS_DiffTicks(estatled[u8Channel].u32Timer) > estatled[u8Channel].u16TempsOFF) {
 80036ce:	79fa      	ldrb	r2, [r7, #7]
 80036d0:	4929      	ldr	r1, [pc, #164]	; (8003778 <LED_Motor+0x27c>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3308      	adds	r3, #8
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f8c0 	bl	8003866 <TICKS_DiffTicks>
 80036e6:	4601      	mov	r1, r0
 80036e8:	79fa      	ldrb	r2, [r7, #7]
 80036ea:	4823      	ldr	r0, [pc, #140]	; (8003778 <LED_Motor+0x27c>)
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4403      	add	r3, r0
 80036f6:	3306      	adds	r3, #6
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	4299      	cmp	r1, r3
 80036fc:	d936      	bls.n	800376c <LED_Motor+0x270>
                //If we put 0xFF repetitions, it will repeat forever
                if (estatled[u8Channel].u8Repeticions != 0xFF) {
 80036fe:	79fa      	ldrb	r2, [r7, #7]
 8003700:	491d      	ldr	r1, [pc, #116]	; (8003778 <LED_Motor+0x27c>)
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3301      	adds	r3, #1
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2bff      	cmp	r3, #255	; 0xff
 8003712:	d013      	beq.n	800373c <LED_Motor+0x240>
                    estatled[u8Channel].u8Repeticions--;
 8003714:	79fa      	ldrb	r2, [r7, #7]
 8003716:	4918      	ldr	r1, [pc, #96]	; (8003778 <LED_Motor+0x27c>)
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3301      	adds	r3, #1
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	3b01      	subs	r3, #1
 8003728:	b2d8      	uxtb	r0, r3
 800372a:	4913      	ldr	r1, [pc, #76]	; (8003778 <LED_Motor+0x27c>)
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3301      	adds	r3, #1
 8003738:	4602      	mov	r2, r0
 800373a:	701a      	strb	r2, [r3, #0]
                }
                estatled[u8Channel].u8Motor = 0;
 800373c:	79fa      	ldrb	r2, [r7, #7]
 800373e:	490e      	ldr	r1, [pc, #56]	; (8003778 <LED_Motor+0x27c>)
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800374e:	e00d      	b.n	800376c <LED_Motor+0x270>
        default:
            estatled[u8Channel].u8Motor = 0;
 8003750:	79fa      	ldrb	r2, [r7, #7]
 8003752:	4909      	ldr	r1, [pc, #36]	; (8003778 <LED_Motor+0x27c>)
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
            break;
 8003762:	e004      	b.n	800376e <LED_Motor+0x272>
            break;
 8003764:	bf00      	nop
 8003766:	e002      	b.n	800376e <LED_Motor+0x272>
            break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <LED_Motor+0x272>
            break;
 800376c:	bf00      	nop
    }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bd90      	pop	{r4, r7, pc}
 8003776:	bf00      	nop
 8003778:	20000298 	.word	0x20000298

0800377c <LED_Configure>:

void LED_Configure(uint8_t u8Channel, uint8_t u8Repeats, uint16_t u16TimeOff, uint16_t u16TimeOn, uint8_t u8Fixe) {
 800377c:	b490      	push	{r4, r7}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4623      	mov	r3, r4
 800378c:	71fb      	strb	r3, [r7, #7]
 800378e:	4603      	mov	r3, r0
 8003790:	71bb      	strb	r3, [r7, #6]
 8003792:	460b      	mov	r3, r1
 8003794:	80bb      	strh	r3, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	807b      	strh	r3, [r7, #2]
    estatled[u8Channel].u8Repeticions = u8Repeats;
 800379a:	79fa      	ldrb	r2, [r7, #7]
 800379c:	491a      	ldr	r1, [pc, #104]	; (8003808 <LED_Configure+0x8c>)
 800379e:	4613      	mov	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3301      	adds	r3, #1
 80037aa:	79ba      	ldrb	r2, [r7, #6]
 80037ac:	701a      	strb	r2, [r3, #0]
    estatled[u8Channel].u8Fixe = u8Fixe;
 80037ae:	79fa      	ldrb	r2, [r7, #7]
 80037b0:	4915      	ldr	r1, [pc, #84]	; (8003808 <LED_Configure+0x8c>)
 80037b2:	4613      	mov	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	3302      	adds	r3, #2
 80037be:	7c3a      	ldrb	r2, [r7, #16]
 80037c0:	701a      	strb	r2, [r3, #0]
    estatled[u8Channel].u16TempsOFF = u16TimeOff;
 80037c2:	79fa      	ldrb	r2, [r7, #7]
 80037c4:	4910      	ldr	r1, [pc, #64]	; (8003808 <LED_Configure+0x8c>)
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3306      	adds	r3, #6
 80037d2:	88ba      	ldrh	r2, [r7, #4]
 80037d4:	801a      	strh	r2, [r3, #0]
    estatled[u8Channel].u16TempsON = u16TimeOn;
 80037d6:	79fa      	ldrb	r2, [r7, #7]
 80037d8:	490b      	ldr	r1, [pc, #44]	; (8003808 <LED_Configure+0x8c>)
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3304      	adds	r3, #4
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	801a      	strh	r2, [r3, #0]
    estatled[u8Channel].u8NovaConfig = 1;
 80037ea:	79fa      	ldrb	r2, [r7, #7]
 80037ec:	4906      	ldr	r1, [pc, #24]	; (8003808 <LED_Configure+0x8c>)
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	3303      	adds	r3, #3
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bc90      	pop	{r4, r7}
 8003806:	4770      	bx	lr
 8003808:	20000298 	.word	0x20000298

0800380c <LED_CanviLED>:

void LED_CanviLED(uint8_t u8Channel, uint8_t u8Estat) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	460a      	mov	r2, r1
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	4613      	mov	r3, r2
 800381a:	71bb      	strb	r3, [r7, #6]
    if (u8Channel == LED1) {
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <LED_CanviLED+0x24>
        prtDL1(u8Estat);
 8003822:	79bb      	ldrb	r3, [r7, #6]
 8003824:	461a      	mov	r2, r3
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	4808      	ldr	r0, [pc, #32]	; (800384c <LED_CanviLED+0x40>)
 800382a:	f001 fe49 	bl	80054c0 <HAL_GPIO_WritePin>
    } else if (u8Channel == LED2) {
        prtDL1(u8Estat);
    }
    // else { LED_G_OUT = u8Estat; }
}
 800382e:	e008      	b.n	8003842 <LED_CanviLED+0x36>
    } else if (u8Channel == LED2) {
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d105      	bne.n	8003842 <LED_CanviLED+0x36>
        prtDL1(u8Estat);
 8003836:	79bb      	ldrb	r3, [r7, #6]
 8003838:	461a      	mov	r2, r3
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	4803      	ldr	r0, [pc, #12]	; (800384c <LED_CanviLED+0x40>)
 800383e:	f001 fe3f 	bl	80054c0 <HAL_GPIO_WritePin>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40020c00 	.word	0x40020c00

08003850 <TICKS_GetTicks>:

#include "Ticks.h"

uint32_t TICKS_GetTicks(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
	uint32_t temp;
	//HAL_SuspendTick();
	temp = HAL_GetTick();
 8003856:	f001 fa9f 	bl	8004d98 <HAL_GetTick>
 800385a:	6078      	str	r0, [r7, #4]
	//HAL_ResumeTick();
	return temp;
 800385c:	687b      	ldr	r3, [r7, #4]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <TICKS_DiffTicks>:

uint32_t TICKS_DiffTicks(uint32_t u32Mark)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = TICKS_GetTicks();
 800386e:	f7ff ffef 	bl	8003850 <TICKS_GetTicks>
 8003872:	60f8      	str	r0, [r7, #12]
	temp = (uint32_t)((uint32_t)temp - (uint32_t)u32Mark);
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	60fb      	str	r3, [r7, #12]
	temp = temp + 1;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
	return temp;
 8003882:	68fb      	ldr	r3, [r7, #12]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <UART_Init>:
  * @retval ERROR_HTP		-> uart no definida
	*					SUCCESS_HTP
	*					RUNNING_HTP	-> modulo iniciandose
  */
returnstatus_t UART_Init(UART_nameTypeDef uartChannel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef hal_uart_state;
	returnstatus_t return_uart_init;
	if(uartChannel >= MAX_UARTS)
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d902      	bls.n	80038a2 <UART_Init+0x16>
		return ERROR_HTP;
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	e09d      	b.n	80039de <UART_Init+0x152>
	
	uart_control[uartChannel].status.value = 0;
 80038a2:	79fa      	ldrb	r2, [r7, #7]
 80038a4:	4950      	ldr	r1, [pc, #320]	; (80039e8 <UART_Init+0x15c>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	015b      	lsls	r3, r3, #5
 80038aa:	4413      	add	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	440b      	add	r3, r1
 80038b0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
	
	uart_control[uartChannel].u32InitRXBufferPointer = 0;
 80038b8:	79fa      	ldrb	r2, [r7, #7]
 80038ba:	494b      	ldr	r1, [pc, #300]	; (80039e8 <UART_Init+0x15c>)
 80038bc:	4613      	mov	r3, r2
 80038be:	015b      	lsls	r3, r3, #5
 80038c0:	4413      	add	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	440b      	add	r3, r1
 80038c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
	uart_control[uartChannel].u32EndRXBufferPointer = 0;
 80038ce:	79fa      	ldrb	r2, [r7, #7]
 80038d0:	4945      	ldr	r1, [pc, #276]	; (80039e8 <UART_Init+0x15c>)
 80038d2:	4613      	mov	r3, r2
 80038d4:	015b      	lsls	r3, r3, #5
 80038d6:	4413      	add	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	440b      	add	r3, r1
 80038dc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
	uart_control[uartChannel].u32BytesInRXBuffer = 0;
 80038e4:	79fa      	ldrb	r2, [r7, #7]
 80038e6:	4940      	ldr	r1, [pc, #256]	; (80039e8 <UART_Init+0x15c>)
 80038e8:	4613      	mov	r3, r2
 80038ea:	015b      	lsls	r3, r3, #5
 80038ec:	4413      	add	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	440b      	add	r3, r1
 80038f2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
#ifdef UART_0
	if(uartChannel == INDEX_UART_0)
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d134      	bne.n	800396a <UART_Init+0xde>
	{
		if(huart1.gState == HAL_UART_STATE_RESET)
 8003900:	4b3a      	ldr	r3, [pc, #232]	; (80039ec <UART_Init+0x160>)
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <UART_Init+0x84>
		{
			/* si no se ha iniciado lo incio */
			MX_USART1_UART_Init();
 800390c:	f000 fcbc 	bl	8004288 <MX_USART1_UART_Init>
		}
		hal_uart_state = HAL_UART_Receive_IT(&huart1, (uint8_t *)(uart_control[uartChannel].ptu8BufferRX+uart_control[uartChannel].u32InitRXBufferPointer), 1);
 8003910:	79fa      	ldrb	r2, [r7, #7]
 8003912:	4613      	mov	r3, r2
 8003914:	015b      	lsls	r3, r3, #5
 8003916:	4413      	add	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800391e:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <UART_Init+0x15c>)
 8003920:	4413      	add	r3, r2
 8003922:	1d19      	adds	r1, r3, #4
 8003924:	79fa      	ldrb	r2, [r7, #7]
 8003926:	4830      	ldr	r0, [pc, #192]	; (80039e8 <UART_Init+0x15c>)
 8003928:	4613      	mov	r3, r2
 800392a:	015b      	lsls	r3, r3, #5
 800392c:	4413      	add	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4403      	add	r3, r0
 8003932:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	440b      	add	r3, r1
 800393a:	2201      	movs	r2, #1
 800393c:	4619      	mov	r1, r3
 800393e:	482b      	ldr	r0, [pc, #172]	; (80039ec <UART_Init+0x160>)
 8003940:	f002 feae 	bl	80066a0 <HAL_UART_Receive_IT>
 8003944:	4603      	mov	r3, r0
 8003946:	73bb      	strb	r3, [r7, #14]
		switch(hal_uart_state)
 8003948:	7bbb      	ldrb	r3, [r7, #14]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <UART_Init+0xcc>
 800394e:	2b02      	cmp	r3, #2
 8003950:	d005      	beq.n	800395e <UART_Init+0xd2>
		{
			default:
			case HAL_ERROR: return_uart_init = ERROR_HTP; break;
 8003952:	23ff      	movs	r3, #255	; 0xff
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	e005      	b.n	8003964 <UART_Init+0xd8>
			case HAL_OK: return_uart_init = SUCCESS_HTP; break;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	e002      	b.n	8003964 <UART_Init+0xd8>
			case HAL_BUSY: return_uart_init = RUNNING_HTP; break;
 800395e:	23fe      	movs	r3, #254	; 0xfe
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	bf00      	nop
		}
		
		return return_uart_init;
 8003964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003968:	e039      	b.n	80039de <UART_Init+0x152>
		
		return return_uart_init;
	}
#endif
#ifdef UART_3
	if(uartChannel == INDEX_UART_3)
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d134      	bne.n	80039da <UART_Init+0x14e>
	{
		if(huart4.gState == HAL_UART_STATE_RESET)
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <UART_Init+0x164>)
 8003972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <UART_Init+0xf4>
		{
			/* si no se ha iniciado lo incio */
			MX_UART4_Init();
 800397c:	f000 fc58 	bl	8004230 <MX_UART4_Init>
		}
		hal_uart_state = HAL_UART_Receive_IT(&huart4, (uint8_t *)(uart_control[uartChannel].ptu8BufferRX+uart_control[uartChannel].u32InitRXBufferPointer), 1);
 8003980:	79fa      	ldrb	r2, [r7, #7]
 8003982:	4613      	mov	r3, r2
 8003984:	015b      	lsls	r3, r3, #5
 8003986:	4413      	add	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800398e:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <UART_Init+0x15c>)
 8003990:	4413      	add	r3, r2
 8003992:	1d19      	adds	r1, r3, #4
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4814      	ldr	r0, [pc, #80]	; (80039e8 <UART_Init+0x15c>)
 8003998:	4613      	mov	r3, r2
 800399a:	015b      	lsls	r3, r3, #5
 800399c:	4413      	add	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4403      	add	r3, r0
 80039a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	440b      	add	r3, r1
 80039aa:	2201      	movs	r2, #1
 80039ac:	4619      	mov	r1, r3
 80039ae:	4810      	ldr	r0, [pc, #64]	; (80039f0 <UART_Init+0x164>)
 80039b0:	f002 fe76 	bl	80066a0 <HAL_UART_Receive_IT>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73bb      	strb	r3, [r7, #14]
		switch(hal_uart_state)
 80039b8:	7bbb      	ldrb	r3, [r7, #14]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <UART_Init+0x13c>
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d005      	beq.n	80039ce <UART_Init+0x142>
		{
			default:
			case HAL_ERROR: return_uart_init = ERROR_HTP; break;
 80039c2:	23ff      	movs	r3, #255	; 0xff
 80039c4:	73fb      	strb	r3, [r7, #15]
 80039c6:	e005      	b.n	80039d4 <UART_Init+0x148>
			case HAL_OK: return_uart_init = SUCCESS_HTP; break;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
 80039cc:	e002      	b.n	80039d4 <UART_Init+0x148>
			case HAL_BUSY: return_uart_init = RUNNING_HTP; break;
 80039ce:	23fe      	movs	r3, #254	; 0xfe
 80039d0:	73fb      	strb	r3, [r7, #15]
 80039d2:	bf00      	nop
		}
		
		return return_uart_init;
 80039d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d8:	e001      	b.n	80039de <UART_Init+0x152>
		}
		
		return return_uart_init;
	}
#endif
	return ERROR_HTP;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200002b0 	.word	0x200002b0
 80039ec:	200007c4 	.word	0x200007c4
 80039f0:	20000780 	.word	0x20000780

080039f4 <UART_QuantsBytesBufferRX>:
  * @param uartChannel INDEX_UART_x, donde x puede ser un valor entre 0 y 7 y que este definido en UART.h
  * @note   deshabilita la interrupcion de recepcion para acceder a u32BytesInRXBuffer.
  * @retval HAL status
  */
uint32_t UART_QuantsBytesBufferRX(UART_nameTypeDef uartChannel)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
	uint32_t temp;
	UART_HandleTypeDef* uartHandle = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
	if(uartChannel >= MAX_UARTS)
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d901      	bls.n	8003a0c <UART_QuantsBytesBufferRX+0x18>
		return 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e02a      	b.n	8003a62 <UART_QuantsBytesBufferRX+0x6e>

#ifdef UART_0	
	if(uartChannel == INDEX_UART_0)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <UART_QuantsBytesBufferRX+0x22>
	{
		uartHandle = &huart1;
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <UART_QuantsBytesBufferRX+0x7c>)
 8003a14:	60fb      	str	r3, [r7, #12]
	{
		uartHandle = &huart3;
	}
#endif
#ifdef UART_3	
	if(uartChannel == INDEX_UART_3)
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <UART_QuantsBytesBufferRX+0x2c>
	{
		uartHandle = &huart4;
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <UART_QuantsBytesBufferRX+0x80>)
 8003a1e:	60fb      	str	r3, [r7, #12]
	{
		uartHandle = &huart8;
	}
#endif
	
	if(uartHandle == NULL)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <UART_QuantsBytesBufferRX+0x36>
	{
		return 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e01b      	b.n	8003a62 <UART_QuantsBytesBufferRX+0x6e>
	}
	__HAL_UART_DISABLE_IT(uartHandle, UART_IT_RXNE);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0220 	bic.w	r2, r2, #32
 8003a38:	60da      	str	r2, [r3, #12]
	temp = uart_control[uartChannel].u32BytesInRXBuffer;
 8003a3a:	79fa      	ldrb	r2, [r7, #7]
 8003a3c:	490e      	ldr	r1, [pc, #56]	; (8003a78 <UART_QuantsBytesBufferRX+0x84>)
 8003a3e:	4613      	mov	r3, r2
 8003a40:	015b      	lsls	r3, r3, #5
 8003a42:	4413      	add	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	440b      	add	r3, r1
 8003a48:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60bb      	str	r3, [r7, #8]
	__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0220 	orr.w	r2, r2, #32
 8003a5e:	60da      	str	r2, [r3, #12]
	
	return temp;
 8003a60:	68bb      	ldr	r3, [r7, #8]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	200007c4 	.word	0x200007c4
 8003a74:	20000780 	.word	0x20000780
 8003a78:	200002b0 	.word	0x200002b0

08003a7c <UART_Transmit>:
  * @param NumDades numero de datos a enviar.
  * @note   Copia en el buffer interno los datos a enviar e inicia proceso.
  * @retval returnstatus_t
  */
returnstatus_t UART_Transmit(UART_nameTypeDef uartChannel, uint8_t* ptu8Dades, uint32_t NumDades)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	73fb      	strb	r3, [r7, #15]
	returnstatus_t return_uart_tx;
	HAL_StatusTypeDef hal_uart_state = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	74fb      	strb	r3, [r7, #19]
	UART_HandleTypeDef* uartHandle = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
	uint32_t i;
	
	if(uartChannel >= MAX_UARTS)
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d902      	bls.n	8003a9e <UART_Transmit+0x22>
		return ERROR_HTP;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	e065      	b.n	8003b6a <UART_Transmit+0xee>
	#ifdef UART_0	
	if(uartChannel == INDEX_UART_0)
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <UART_Transmit+0x2c>
	{
		uartHandle = &huart1;
 8003aa4:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <UART_Transmit+0xf8>)
 8003aa6:	61bb      	str	r3, [r7, #24]
	{
		uartHandle = &huart3;
	}
#endif
#ifdef UART_3	
	if(uartChannel == INDEX_UART_3)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <UART_Transmit+0x36>
	{
		uartHandle = &huart4;
 8003aae:	4b32      	ldr	r3, [pc, #200]	; (8003b78 <UART_Transmit+0xfc>)
 8003ab0:	61bb      	str	r3, [r7, #24]
	{
		uartHandle = &huart8;
	}
#endif
	
	if(uartHandle == NULL)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <UART_Transmit+0x42>
	{
		return ERROR_HTP;
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	e055      	b.n	8003b6a <UART_Transmit+0xee>
	}
	
	if(uart_control[uartChannel].status.bit_field.u32TransmitNotFinished == 0)
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	492e      	ldr	r1, [pc, #184]	; (8003b7c <UART_Transmit+0x100>)
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	015b      	lsls	r3, r3, #5
 8003ac6:	4413      	add	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	440b      	add	r3, r1
 8003acc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ad0:	791b      	ldrb	r3, [r3, #4]
 8003ad2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d142      	bne.n	8003b62 <UART_Transmit+0xe6>
	{
		for(i = 0; i < NumDades; i++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	e011      	b.n	8003b06 <UART_Transmit+0x8a>
		{
			uart_control[uartChannel].ptu8BufferTX[i] = ptu8Dades[i];
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	7818      	ldrb	r0, [r3, #0]
 8003aec:	4923      	ldr	r1, [pc, #140]	; (8003b7c <UART_Transmit+0x100>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	015b      	lsls	r3, r3, #5
 8003af2:	4413      	add	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	18ca      	adds	r2, r1, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4413      	add	r3, r2
 8003afc:	4602      	mov	r2, r0
 8003afe:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < NumDades; i++)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	3301      	adds	r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d3e9      	bcc.n	8003ae2 <UART_Transmit+0x66>
		}
		
		hal_uart_state = HAL_UART_Transmit_IT(uartHandle, uart_control[uartChannel].ptu8BufferTX, NumDades);
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	4613      	mov	r3, r2
 8003b12:	015b      	lsls	r3, r3, #5
 8003b14:	4413      	add	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <UART_Transmit+0x100>)
 8003b1a:	4413      	add	r3, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	69b8      	ldr	r0, [r7, #24]
 8003b24:	f002 fd77 	bl	8006616 <HAL_UART_Transmit_IT>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]
		
		switch(hal_uart_state)
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <UART_Transmit+0xc6>
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d002      	beq.n	8003b3c <UART_Transmit+0xc0>
		{
			default:
			case HAL_ERROR: return_uart_tx = ERROR_HTP; break;	/* tamanyo 0 o no hay buffer definido o buffer no alineado */
 8003b36:	23ff      	movs	r3, #255	; 0xff
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e014      	b.n	8003b66 <UART_Transmit+0xea>
			case HAL_BUSY: return_uart_tx = RUNNING_HTP; break;	/* solo puede dar si no esta disponible para transmitir, pero ya he comprobado no estar transmitiendo */
 8003b3c:	23fe      	movs	r3, #254	; 0xfe
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e011      	b.n	8003b66 <UART_Transmit+0xea>
			case HAL_OK: 
				uart_control[uartChannel].status.bit_field.u32TransmitNotFinished = 1; 
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	490d      	ldr	r1, [pc, #52]	; (8003b7c <UART_Transmit+0x100>)
 8003b46:	4613      	mov	r3, r2
 8003b48:	015b      	lsls	r3, r3, #5
 8003b4a:	4413      	add	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	440b      	add	r3, r1
 8003b50:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8003b54:	7913      	ldrb	r3, [r2, #4]
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	7113      	strb	r3, [r2, #4]
				return_uart_tx = SUCCESS_HTP;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	77fb      	strb	r3, [r7, #31]
				break;
 8003b60:	e001      	b.n	8003b66 <UART_Transmit+0xea>
		}
	}
	else
	{
		return_uart_tx = RUNNING_HTP;
 8003b62:	23fe      	movs	r3, #254	; 0xfe
 8003b64:	77fb      	strb	r3, [r7, #31]
	}
	
	return return_uart_tx;
 8003b66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	200007c4 	.word	0x200007c4
 8003b78:	20000780 	.word	0x20000780
 8003b7c:	200002b0 	.word	0x200002b0

08003b80 <UART_Receive>:
  * @param NumDades numero de datos a recibir.
  * @note   deshabilita interrupcion de recepcion para decrementar u32BytesInRXBuffer.
  * @retval returnstatus_t
  */
returnstatus_t UART_Receive(UART_nameTypeDef uartChannel, uint8_t* ptu8Dades, uint32_t NumDades)
{
 8003b80:	b4b0      	push	{r4, r5, r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	73fb      	strb	r3, [r7, #15]
	returnstatus_t temp;
	UART_HandleTypeDef* uartHandle = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
	uint32_t i;
	
#ifdef UART_0	
	if(uartChannel == INDEX_UART_0)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <UART_Receive+0x1c>
	{
		uartHandle = &huart1;
 8003b98:	4b46      	ldr	r3, [pc, #280]	; (8003cb4 <UART_Receive+0x134>)
 8003b9a:	61bb      	str	r3, [r7, #24]
	{
		uartHandle = &huart3;
	}
#endif
#ifdef UART_3	
	if(uartChannel == INDEX_UART_3)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <UART_Receive+0x26>
	{
		uartHandle = &huart4;
 8003ba2:	4b45      	ldr	r3, [pc, #276]	; (8003cb8 <UART_Receive+0x138>)
 8003ba4:	61bb      	str	r3, [r7, #24]
	{
		uartHandle = &huart8;
	}
#endif
	
	if(uartHandle == NULL)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <UART_Receive+0x32>
	{
		return ERROR_HTP;
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	e07b      	b.n	8003caa <UART_Receive+0x12a>
	}
	
	if(NumDades > uart_control[uartChannel].u32BytesInRXBuffer)
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	4941      	ldr	r1, [pc, #260]	; (8003cbc <UART_Receive+0x13c>)
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	015b      	lsls	r3, r3, #5
 8003bba:	4413      	add	r3, r2
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d902      	bls.n	8003bd2 <UART_Receive+0x52>
	{
		temp = ERROR_HTP;
 8003bcc:	23ff      	movs	r3, #255	; 0xff
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e069      	b.n	8003ca6 <UART_Receive+0x126>
	}
	else{
		for(i = 0; i < NumDades; i++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e03a      	b.n	8003c4e <UART_Receive+0xce>
		{
			ptu8Dades[i] = uart_control[uartChannel].ptu8BufferRX[uart_control[uartChannel].u32InitRXBufferPointer++];
 8003bd8:	7bf8      	ldrb	r0, [r7, #15]
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	4937      	ldr	r1, [pc, #220]	; (8003cbc <UART_Receive+0x13c>)
 8003bde:	4613      	mov	r3, r2
 8003be0:	015b      	lsls	r3, r3, #5
 8003be2:	4413      	add	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	440b      	add	r3, r1
 8003be8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	1c4c      	adds	r4, r1, #1
 8003bf0:	4d32      	ldr	r5, [pc, #200]	; (8003cbc <UART_Receive+0x13c>)
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	015b      	lsls	r3, r3, #5
 8003bf6:	4413      	add	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	442b      	add	r3, r5
 8003bfc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c00:	601c      	str	r4, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	441a      	add	r2, r3
 8003c08:	4c2c      	ldr	r4, [pc, #176]	; (8003cbc <UART_Receive+0x13c>)
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	015b      	lsls	r3, r3, #5
 8003c0e:	4403      	add	r3, r0
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	4423      	add	r3, r4
 8003c14:	440b      	add	r3, r1
 8003c16:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	7013      	strb	r3, [r2, #0]
			uart_control[uartChannel].u32InitRXBufferPointer = uart_control[uartChannel].u32InitRXBufferPointer&(UART_MAX_BUFFER_SIZE-1);
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	4926      	ldr	r1, [pc, #152]	; (8003cbc <UART_Receive+0x13c>)
 8003c22:	4613      	mov	r3, r2
 8003c24:	015b      	lsls	r3, r3, #5
 8003c26:	4413      	add	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	b2d9      	uxtb	r1, r3
 8003c36:	4821      	ldr	r0, [pc, #132]	; (8003cbc <UART_Receive+0x13c>)
 8003c38:	4613      	mov	r3, r2
 8003c3a:	015b      	lsls	r3, r3, #5
 8003c3c:	4413      	add	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4403      	add	r3, r0
 8003c42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c46:	6019      	str	r1, [r3, #0]
		for(i = 0; i < NumDades; i++)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3c0      	bcc.n	8003bd8 <UART_Receive+0x58>
		}

		__HAL_UART_DISABLE_IT(uartHandle, UART_IT_RXNE);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0220 	bic.w	r2, r2, #32
 8003c64:	60da      	str	r2, [r3, #12]
		uart_control[uartChannel].u32BytesInRXBuffer -= NumDades;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	4914      	ldr	r1, [pc, #80]	; (8003cbc <UART_Receive+0x13c>)
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	015b      	lsls	r3, r3, #5
 8003c6e:	4413      	add	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	440b      	add	r3, r1
 8003c74:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	7bfa      	ldrb	r2, [r7, #15]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	1ac9      	subs	r1, r1, r3
 8003c80:	480e      	ldr	r0, [pc, #56]	; (8003cbc <UART_Receive+0x13c>)
 8003c82:	4613      	mov	r3, r2
 8003c84:	015b      	lsls	r3, r3, #5
 8003c86:	4413      	add	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	4403      	add	r3, r0
 8003c8c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c90:	6019      	str	r1, [r3, #0]
		__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0220 	orr.w	r2, r2, #32
 8003ca0:	60da      	str	r2, [r3, #12]
		
		temp = SUCCESS_HTP;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	77fb      	strb	r3, [r7, #31]
	}
	return temp;
 8003ca6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	; 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bcb0      	pop	{r4, r5, r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	200007c4 	.word	0x200007c4
 8003cb8:	20000780 	.word	0x20000780
 8003cbc:	200002b0 	.word	0x200002b0

08003cc0 <UART_ResetTX>:
  * @param uartChannel INDEX_UART_x, donde x puede ser un valor entre 0 y 7 y que este definido en UART.h
  * @note   aborta transimision que estuviera en curso
  * @retval none
  */
void UART_ResetTX(UART_nameTypeDef uartChannel)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]

#ifdef UART_0
	if(uartChannel == INDEX_UART_0)
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <UART_ResetTX+0x16>
	{
		HAL_UART_AbortTransmit(&huart1);
 8003cd0:	480c      	ldr	r0, [pc, #48]	; (8003d04 <UART_ResetTX+0x44>)
 8003cd2:	f002 fd15 	bl	8006700 <HAL_UART_AbortTransmit>
	{
		HAL_UART_AbortTransmit(&huart3);
	}
#endif
#ifdef UART_3
	if(uartChannel == INDEX_UART_3)
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <UART_ResetTX+0x22>
	{
		HAL_UART_AbortTransmit(&huart4);
 8003cdc:	480a      	ldr	r0, [pc, #40]	; (8003d08 <UART_ResetTX+0x48>)
 8003cde:	f002 fd0f 	bl	8006700 <HAL_UART_AbortTransmit>
	{
		HAL_UART_AbortTransmit(&huart8);
	}
#endif
	
	uart_control[uartChannel].status.bit_field.u32TransmitNotFinished = 0;
 8003ce2:	79fa      	ldrb	r2, [r7, #7]
 8003ce4:	4909      	ldr	r1, [pc, #36]	; (8003d0c <UART_ResetTX+0x4c>)
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	015b      	lsls	r3, r3, #5
 8003cea:	4413      	add	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	440b      	add	r3, r1
 8003cf0:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8003cf4:	7913      	ldrb	r3, [r2, #4]
 8003cf6:	f36f 0300 	bfc	r3, #0, #1
 8003cfa:	7113      	strb	r3, [r2, #4]
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200007c4 	.word	0x200007c4
 8003d08:	20000780 	.word	0x20000780
 8003d0c:	200002b0 	.word	0x200002b0

08003d10 <UART_ResetRX>:
  * @param uartChannel INDEX_UART_x, donde x puede ser un valor entre 0 y 7 y que este definido en UART.h
  * @note   aborta recepcion en curso y vuelve a lanzar proceso de recepcion
  * @retval none
  */
void UART_ResetRX(UART_nameTypeDef uartChannel)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef* uartHandle = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
	
#ifdef UART_0	
	if(uartChannel == INDEX_UART_0)
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <UART_ResetRX+0x18>
	{
		uartHandle = &huart1;
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <UART_ResetRX+0xc8>)
 8003d26:	60fb      	str	r3, [r7, #12]
	{
		uartHandle = &huart3;
	}
#endif
#ifdef UART_3	
	if(uartChannel == INDEX_UART_3)
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <UART_ResetRX+0x22>
	{
		uartHandle = &huart4;
 8003d2e:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <UART_ResetRX+0xcc>)
 8003d30:	60fb      	str	r3, [r7, #12]
	{
		uartHandle = &huart8;
	}
#endif
	
	if(uartHandle == NULL)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d04b      	beq.n	8003dd0 <UART_ResetRX+0xc0>
	{
		return;
	}
	uart_control[uartChannel].u32BytesInRXBuffer = 0;
 8003d38:	79fa      	ldrb	r2, [r7, #7]
 8003d3a:	4929      	ldr	r1, [pc, #164]	; (8003de0 <UART_ResetRX+0xd0>)
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	015b      	lsls	r3, r3, #5
 8003d40:	4413      	add	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
	uart_control[uartChannel].u32InitRXBufferPointer = 0;
 8003d4e:	79fa      	ldrb	r2, [r7, #7]
 8003d50:	4923      	ldr	r1, [pc, #140]	; (8003de0 <UART_ResetRX+0xd0>)
 8003d52:	4613      	mov	r3, r2
 8003d54:	015b      	lsls	r3, r3, #5
 8003d56:	4413      	add	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
	uart_control[uartChannel].u32EndRXBufferPointer = 0;
 8003d64:	79fa      	ldrb	r2, [r7, #7]
 8003d66:	491e      	ldr	r1, [pc, #120]	; (8003de0 <UART_ResetRX+0xd0>)
 8003d68:	4613      	mov	r3, r2
 8003d6a:	015b      	lsls	r3, r3, #5
 8003d6c:	4413      	add	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	440b      	add	r3, r1
 8003d72:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
	uart_control[uartChannel].status.bit_field.u32OverflowRX = 0;
 8003d7a:	79fa      	ldrb	r2, [r7, #7]
 8003d7c:	4918      	ldr	r1, [pc, #96]	; (8003de0 <UART_ResetRX+0xd0>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	015b      	lsls	r3, r3, #5
 8003d82:	4413      	add	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	440b      	add	r3, r1
 8003d88:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8003d8c:	7913      	ldrb	r3, [r2, #4]
 8003d8e:	f36f 0341 	bfc	r3, #1, #1
 8003d92:	7113      	strb	r3, [r2, #4]
	
	HAL_UART_AbortReceive(uartHandle);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f002 fd1b 	bl	80067d0 <HAL_UART_AbortReceive>
	HAL_UART_Receive_IT(uartHandle, (uint8_t *)(uart_control[uartChannel].ptu8BufferRX+uart_control[uartChannel].u32InitRXBufferPointer), 1);
 8003d9a:	79fa      	ldrb	r2, [r7, #7]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	015b      	lsls	r3, r3, #5
 8003da0:	4413      	add	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003da8:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <UART_ResetRX+0xd0>)
 8003daa:	4413      	add	r3, r2
 8003dac:	1d19      	adds	r1, r3, #4
 8003dae:	79fa      	ldrb	r2, [r7, #7]
 8003db0:	480b      	ldr	r0, [pc, #44]	; (8003de0 <UART_ResetRX+0xd0>)
 8003db2:	4613      	mov	r3, r2
 8003db4:	015b      	lsls	r3, r3, #5
 8003db6:	4413      	add	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	4403      	add	r3, r0
 8003dbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	440b      	add	r3, r1
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f002 fc69 	bl	80066a0 <HAL_UART_Receive_IT>
 8003dce:	e000      	b.n	8003dd2 <UART_ResetRX+0xc2>
		return;
 8003dd0:	bf00      	nop
	
}
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	200007c4 	.word	0x200007c4
 8003ddc:	20000780 	.word	0x20000780
 8003de0:	200002b0 	.word	0x200002b0

08003de4 <UART_TransmitNOTFinished>:
  * @note   
  * @retval 0, envio completado
	*					1, envio en curso
  */
uint8_t UART_TransmitNOTFinished(UART_nameTypeDef uartChannel)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
	return uart_control[uartChannel].status.bit_field.u32TransmitNotFinished;
 8003dee:	79fa      	ldrb	r2, [r7, #7]
 8003df0:	4908      	ldr	r1, [pc, #32]	; (8003e14 <UART_TransmitNOTFinished+0x30>)
 8003df2:	4613      	mov	r3, r2
 8003df4:	015b      	lsls	r3, r3, #5
 8003df6:	4413      	add	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e00:	791b      	ldrb	r3, [r3, #4]
 8003e02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e06:	b2db      	uxtb	r3, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	200002b0 	.word	0x200002b0

08003e18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	UART_nameTypeDef uartChannel = MAX_UARTS;
 8003e20:	2302      	movs	r3, #2
 8003e22:	73fb      	strb	r3, [r7, #15]
#ifdef UART_0
	if(huart->Instance == USART1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <HAL_UART_TxCpltCallback+0x58>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_TxCpltCallback+0x1a>
	{
			uartChannel = INDEX_UART_0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
	{
		uartChannel = INDEX_UART_2;
	}
#endif
#ifdef UART_3
	if(huart->Instance == UART4)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <HAL_UART_TxCpltCallback+0x5c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d101      	bne.n	8003e40 <HAL_UART_TxCpltCallback+0x28>
	{
		uartChannel = INDEX_UART_3;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
	if(huart->Instance == USART8)
	{
		uartChannel = INDEX_UART_7;
	}
#endif
	if(uartChannel >= MAX_UARTS)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d80d      	bhi.n	8003e62 <HAL_UART_TxCpltCallback+0x4a>
	{
		return;
	}
	uart_control[uartChannel].status.bit_field.u32TransmitNotFinished = 0;
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	490b      	ldr	r1, [pc, #44]	; (8003e78 <HAL_UART_TxCpltCallback+0x60>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	015b      	lsls	r3, r3, #5
 8003e4e:	4413      	add	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	440b      	add	r3, r1
 8003e54:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8003e58:	7913      	ldrb	r3, [r2, #4]
 8003e5a:	f36f 0300 	bfc	r3, #0, #1
 8003e5e:	7113      	strb	r3, [r2, #4]
 8003e60:	e000      	b.n	8003e64 <HAL_UART_TxCpltCallback+0x4c>
		return;
 8003e62:	bf00      	nop
}
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40011000 	.word	0x40011000
 8003e74:	40004c00 	.word	0x40004c00
 8003e78:	200002b0 	.word	0x200002b0

08003e7c <HAL_UART_RxCpltCallback>:
  * @note   Anyade en el buffer interno el byte recibido. Activa flag de overflow en caso de buffer lleno
	*					si no hay overflow vuelve a activar proceso de recepcion
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	/* se ha recibido 1 byte */
	UART_nameTypeDef uartChannel = MAX_UARTS;
 8003e84:	2302      	movs	r3, #2
 8003e86:	73fb      	strb	r3, [r7, #15]
#ifdef UART_0
	if(huart->Instance == USART1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a38      	ldr	r2, [pc, #224]	; (8003f70 <HAL_UART_RxCpltCallback+0xf4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_RxCpltCallback+0x1a>
	{
			uartChannel = INDEX_UART_0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
	{
		uartChannel = INDEX_UART_2;
	}
#endif
#ifdef UART_3
	if(huart->Instance == UART4)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a36      	ldr	r2, [pc, #216]	; (8003f74 <HAL_UART_RxCpltCallback+0xf8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <HAL_UART_RxCpltCallback+0x28>
	{
		uartChannel = INDEX_UART_3;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
	if(huart->Instance == USART8)
	{
		uartChannel = INDEX_UART_7;
	}
#endif
	if(uartChannel >= MAX_UARTS)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d85e      	bhi.n	8003f68 <HAL_UART_RxCpltCallback+0xec>
	{
		return;
	}
	
	if(uart_control[uartChannel].u32BytesInRXBuffer < UART_MAX_BUFFER_SIZE)
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	4932      	ldr	r1, [pc, #200]	; (8003f78 <HAL_UART_RxCpltCallback+0xfc>)
 8003eae:	4613      	mov	r3, r2
 8003eb0:	015b      	lsls	r3, r3, #5
 8003eb2:	4413      	add	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2bff      	cmp	r3, #255	; 0xff
 8003ec0:	d844      	bhi.n	8003f4c <HAL_UART_RxCpltCallback+0xd0>
	{
		uart_control[uartChannel].u32EndRXBufferPointer = (uart_control[uartChannel].u32EndRXBufferPointer+1)&(UART_MAX_BUFFER_SIZE-1);
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	492c      	ldr	r1, [pc, #176]	; (8003f78 <HAL_UART_RxCpltCallback+0xfc>)
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	015b      	lsls	r3, r3, #5
 8003eca:	4413      	add	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	440b      	add	r3, r1
 8003ed0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	b2d9      	uxtb	r1, r3
 8003edc:	4826      	ldr	r0, [pc, #152]	; (8003f78 <HAL_UART_RxCpltCallback+0xfc>)
 8003ede:	4613      	mov	r3, r2
 8003ee0:	015b      	lsls	r3, r3, #5
 8003ee2:	4413      	add	r3, r2
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	4403      	add	r3, r0
 8003ee8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003eec:	6019      	str	r1, [r3, #0]
		uart_control[uartChannel].u32BytesInRXBuffer++;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	4921      	ldr	r1, [pc, #132]	; (8003f78 <HAL_UART_RxCpltCallback+0xfc>)
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	015b      	lsls	r3, r3, #5
 8003ef6:	4413      	add	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	440b      	add	r3, r1
 8003efc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	1c59      	adds	r1, r3, #1
 8003f04:	481c      	ldr	r0, [pc, #112]	; (8003f78 <HAL_UART_RxCpltCallback+0xfc>)
 8003f06:	4613      	mov	r3, r2
 8003f08:	015b      	lsls	r3, r3, #5
 8003f0a:	4413      	add	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	4403      	add	r3, r0
 8003f10:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003f14:	6019      	str	r1, [r3, #0]
		HAL_UART_Receive_IT(huart, (uint8_t *)(uart_control[uartChannel].ptu8BufferRX+uart_control[uartChannel].u32EndRXBufferPointer), 1);
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	015b      	lsls	r3, r3, #5
 8003f1c:	4413      	add	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <HAL_UART_RxCpltCallback+0xfc>)
 8003f26:	4413      	add	r3, r2
 8003f28:	1d19      	adds	r1, r3, #4
 8003f2a:	7bfa      	ldrb	r2, [r7, #15]
 8003f2c:	4812      	ldr	r0, [pc, #72]	; (8003f78 <HAL_UART_RxCpltCallback+0xfc>)
 8003f2e:	4613      	mov	r3, r2
 8003f30:	015b      	lsls	r3, r3, #5
 8003f32:	4413      	add	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	4403      	add	r3, r0
 8003f38:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	440b      	add	r3, r1
 8003f40:	2201      	movs	r2, #1
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f002 fbab 	bl	80066a0 <HAL_UART_Receive_IT>
 8003f4a:	e00e      	b.n	8003f6a <HAL_UART_RxCpltCallback+0xee>
	}
	else
	{
		uart_control[uartChannel].status.bit_field.u32OverflowRX = 1; // Hi ha error d'overflow.
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	490a      	ldr	r1, [pc, #40]	; (8003f78 <HAL_UART_RxCpltCallback+0xfc>)
 8003f50:	4613      	mov	r3, r2
 8003f52:	015b      	lsls	r3, r3, #5
 8003f54:	4413      	add	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	440b      	add	r3, r1
 8003f5a:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8003f5e:	7913      	ldrb	r3, [r2, #4]
 8003f60:	f043 0302 	orr.w	r3, r3, #2
 8003f64:	7113      	strb	r3, [r2, #4]
 8003f66:	e000      	b.n	8003f6a <HAL_UART_RxCpltCallback+0xee>
		return;
 8003f68:	bf00      	nop
	}
}
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40011000 	.word	0x40011000
 8003f74:	40004c00 	.word	0x40004c00
 8003f78:	200002b0 	.word	0x200002b0

08003f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  char buf_arr[5] = {'a','b','c','d','e'};
 8003f82:	4a3b      	ldr	r2, [pc, #236]	; (8004070 <main+0xf4>)
 8003f84:	463b      	mov	r3, r7
 8003f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f8a:	6018      	str	r0, [r3, #0]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	7019      	strb	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f90:	f000 fe9c 	bl	8004ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f94:	f000 f876 	bl	8004084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f98:	f000 f9ce 	bl	8004338 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003f9c:	f000 f8dc 	bl	8004158 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003fa0:	f000 f910 	bl	80041c4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003fa4:	f000 f970 	bl	8004288 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003fa8:	f000 f998 	bl	80042dc <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8003fac:	f000 f940 	bl	8004230 <MX_UART4_Init>
  //MemoryMap.var.cabecera_fw.board_definition.u8BoardType = 1;



  //We initialize the variables: sourcesStatus, of the protocol (MemoryMap)
  vars_Init();
 8003fb0:	f000 fb84 	bl	80046bc <vars_Init>

  // initialize the system
  SYS_Init();
 8003fb4:	f7ff f8ca 	bl	800314c <SYS_Init>

  //Initialize alarm control
  alarmsControl_init();
 8003fb8:	f7fc fe8e 	bl	8000cd8 <alarmsControl_init>

  // initialize the protocol
  PROTSLV_Init();
 8003fbc:	f7fd fc24 	bl	8001808 <PROTSLV_Init>

  //Initialization of the LED engine
  LED_Init();
 8003fc0:	f7ff fa40 	bl	8003444 <LED_Init>

  u32TicksMain = TICKS_GetTicks();
 8003fc4:	f7ff fc44 	bl	8003850 <TICKS_GetTicks>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <main+0xf8>)
 8003fcc:	6013      	str	r3, [r2, #0]
  //while(TICKS_DiffTicks(u32TicksMain) < 200); //wait to ensure the correct detection of the source, without this wait when the equipment started up the 2 PCB's remained as PCB1
  // We identify the PCB and the connected sources
  CTR_identif();
 8003fce:	f7fc fe5d 	bl	8000c8c <CTR_identif>





  standbyInit();
 8003fd2:	f7fe fa55 	bl	8002480 <standbyInit>

  appSPI_init();
 8003fd6:	f7fd f9cb 	bl	8001370 <appSPI_init>

  appLED_Init();
 8003fda:	f000 fbd1 	bl	8004780 <appLED_Init>

  CTR_fuentes_ON_OFF_init();
 8003fde:	f7fc ffdd 	bl	8000f9c <CTR_fuentes_ON_OFF_init>

  u32TicksMain = TICKS_GetTicks();
 8003fe2:	f7ff fc35 	bl	8003850 <TICKS_GetTicks>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a22      	ldr	r2, [pc, #136]	; (8004074 <main+0xf8>)
 8003fea:	6013      	str	r3, [r2, #0]

  (void)AD5676R_init();
 8003fec:	f7fc fda4 	bl	8000b38 <AD5676R_init>

  prtGreenLED(0);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	4820      	ldr	r0, [pc, #128]	; (8004078 <main+0xfc>)
 8003ff6:	f001 fa63 	bl	80054c0 <HAL_GPIO_WritePin>
  prtRedLED(1);
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	481e      	ldr	r0, [pc, #120]	; (8004078 <main+0xfc>)
 8004000:	f001 fa5e 	bl	80054c0 <HAL_GPIO_WritePin>

  prtGreenLED(1);
 8004004:	2201      	movs	r2, #1
 8004006:	2102      	movs	r1, #2
 8004008:	481b      	ldr	r0, [pc, #108]	; (8004078 <main+0xfc>)
 800400a:	f001 fa59 	bl	80054c0 <HAL_GPIO_WritePin>
  prtRedLED(0);
 800400e:	2200      	movs	r2, #0
 8004010:	2101      	movs	r1, #1
 8004012:	4819      	ldr	r0, [pc, #100]	; (8004078 <main+0xfc>)
 8004014:	f001 fa54 	bl	80054c0 <HAL_GPIO_WritePin>

  prtGreenLED(1);
 8004018:	2201      	movs	r2, #1
 800401a:	2102      	movs	r1, #2
 800401c:	4816      	ldr	r0, [pc, #88]	; (8004078 <main+0xfc>)
 800401e:	f001 fa4f 	bl	80054c0 <HAL_GPIO_WritePin>
  prtRedLED(1);
 8004022:	2201      	movs	r2, #1
 8004024:	2101      	movs	r1, #1
 8004026:	4814      	ldr	r0, [pc, #80]	; (8004078 <main+0xfc>)
 8004028:	f001 fa4a 	bl	80054c0 <HAL_GPIO_WritePin>
//	  HAL_UART_Transmit(&huart4, buf_arr, 5, 100);
//
//		HAL_Delay(200);


      APP_Accions();
 800402c:	f000 fbfc 	bl	8004828 <APP_Accions>
      if (fuentesStatus.alarmsOn == 1) {
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <main+0x100>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <main+0xc0>
          alarmsControl_motor();
 8004038:	f7fc fe86 	bl	8000d48 <alarmsControl_motor>


      }

      //We call the LED application engine
      appLED_Motor(); //internal led of the board, identifies if it is PCB1 or 2
 800403c:	f000 fbac 	bl	8004798 <appLED_Motor>

		//We call the engine of led 1
      LED_Motor(LED1);
 8004040:	2000      	movs	r0, #0
 8004042:	f7ff fa5b 	bl	80034fc <LED_Motor>
		//We call the engine of led 2
      LED_Motor(LED2);
 8004046:	2001      	movs	r0, #1
 8004048:	f7ff fa58 	bl	80034fc <LED_Motor>

		//We call the SPI engine
      standbyMotor();
 800404c:	f7fe fa44 	bl	80024d8 <standbyMotor>

		//We call the protocol engine, slave
      PROTSLV_Motor();
 8004050:	f7fd fc34 	bl	80018bc <PROTSLV_Motor>

      // if (prtEN_Apl1n == 0) //debug peltiers 1
      if ((standby.state == PCB_STATE_ON) || (standby.state == PCB_STATE_WAIT_FOR_STANDBY)) //faltaaa: or PCB_STATE_WAIT_FOR_STANDBY, to be able to turn them off smoothly iii TODO
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <main+0x104>)
 8004056:	7a1b      	ldrb	r3, [r3, #8]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d003      	beq.n	8004064 <main+0xe8>
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <main+0x104>)
 800405e:	7a1b      	ldrb	r3, [r3, #8]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d101      	bne.n	8004068 <main+0xec>
      {
          appSPI_motor();
 8004064:	f7fd f9c4 	bl	80013f0 <appSPI_motor>
      }

      CTR_fuentes_ON_OFF_motor();
 8004068:	f7fc ffa4 	bl	8000fb4 <CTR_fuentes_ON_OFF_motor>
      APP_Accions();
 800406c:	e7de      	b.n	800402c <main+0xb0>
 800406e:	bf00      	nop
 8004070:	08007d74 	.word	0x08007d74
 8004074:	20000d14 	.word	0x20000d14
 8004078:	40021000 	.word	0x40021000
 800407c:	20000030 	.word	0x20000030
 8004080:	20000214 	.word	0x20000214

08004084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b094      	sub	sp, #80	; 0x50
 8004088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800408a:	f107 0320 	add.w	r3, r7, #32
 800408e:	2230      	movs	r2, #48	; 0x30
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f003 fe56 	bl	8007d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004098:	f107 030c 	add.w	r3, r7, #12
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	4b28      	ldr	r3, [pc, #160]	; (8004150 <SystemClock_Config+0xcc>)
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	4a27      	ldr	r2, [pc, #156]	; (8004150 <SystemClock_Config+0xcc>)
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b6:	6413      	str	r3, [r2, #64]	; 0x40
 80040b8:	4b25      	ldr	r3, [pc, #148]	; (8004150 <SystemClock_Config+0xcc>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040c4:	2300      	movs	r3, #0
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	4b22      	ldr	r3, [pc, #136]	; (8004154 <SystemClock_Config+0xd0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a21      	ldr	r2, [pc, #132]	; (8004154 <SystemClock_Config+0xd0>)
 80040ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4b1f      	ldr	r3, [pc, #124]	; (8004154 <SystemClock_Config+0xd0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040e0:	2301      	movs	r3, #1
 80040e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040ea:	2302      	movs	r3, #2
 80040ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80040f4:	2304      	movs	r3, #4
 80040f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80040f8:	2360      	movs	r3, #96	; 0x60
 80040fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040fc:	2302      	movs	r3, #2
 80040fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004100:	2304      	movs	r3, #4
 8004102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004104:	f107 0320 	add.w	r3, r7, #32
 8004108:	4618      	mov	r0, r3
 800410a:	f001 fb0f 	bl	800572c <HAL_RCC_OscConfig>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004114:	f000 fbcc 	bl	80048b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004118:	230f      	movs	r3, #15
 800411a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800411c:	2302      	movs	r3, #2
 800411e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004124:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800412a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800412e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004130:	f107 030c 	add.w	r3, r7, #12
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f001 fd70 	bl	8005c1c <HAL_RCC_ClockConfig>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004142:	f000 fbb5 	bl	80048b0 <Error_Handler>
  }
}
 8004146:	bf00      	nop
 8004148:	3750      	adds	r7, #80	; 0x50
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	40007000 	.word	0x40007000

08004158 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <MX_SPI1_Init+0x64>)
 800415e:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <MX_SPI1_Init+0x68>)
 8004160:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004162:	4b16      	ldr	r3, [pc, #88]	; (80041bc <MX_SPI1_Init+0x64>)
 8004164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004168:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800416a:	4b14      	ldr	r3, [pc, #80]	; (80041bc <MX_SPI1_Init+0x64>)
 800416c:	2200      	movs	r2, #0
 800416e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <MX_SPI1_Init+0x64>)
 8004172:	2200      	movs	r2, #0
 8004174:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004176:	4b11      	ldr	r3, [pc, #68]	; (80041bc <MX_SPI1_Init+0x64>)
 8004178:	2200      	movs	r2, #0
 800417a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800417c:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <MX_SPI1_Init+0x64>)
 800417e:	2201      	movs	r2, #1
 8004180:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004182:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <MX_SPI1_Init+0x64>)
 8004184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004188:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <MX_SPI1_Init+0x64>)
 800418c:	2218      	movs	r2, #24
 800418e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004190:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <MX_SPI1_Init+0x64>)
 8004192:	2200      	movs	r2, #0
 8004194:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <MX_SPI1_Init+0x64>)
 8004198:	2200      	movs	r2, #0
 800419a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <MX_SPI1_Init+0x64>)
 800419e:	2200      	movs	r2, #0
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <MX_SPI1_Init+0x64>)
 80041a4:	220a      	movs	r2, #10
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041a8:	4804      	ldr	r0, [pc, #16]	; (80041bc <MX_SPI1_Init+0x64>)
 80041aa:	f001 ff57 	bl	800605c <HAL_SPI_Init>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80041b4:	f000 fb7c 	bl	80048b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200006d0 	.word	0x200006d0
 80041c0:	40013000 	.word	0x40013000

080041c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <MX_SPI2_Init+0x64>)
 80041ca:	4a18      	ldr	r2, [pc, #96]	; (800422c <MX_SPI2_Init+0x68>)
 80041cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <MX_SPI2_Init+0x64>)
 80041d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80041d6:	4b14      	ldr	r3, [pc, #80]	; (8004228 <MX_SPI2_Init+0x64>)
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <MX_SPI2_Init+0x64>)
 80041de:	2200      	movs	r2, #0
 80041e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <MX_SPI2_Init+0x64>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <MX_SPI2_Init+0x64>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <MX_SPI2_Init+0x64>)
 80041f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80041f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <MX_SPI2_Init+0x64>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <MX_SPI2_Init+0x64>)
 80041fe:	2200      	movs	r2, #0
 8004200:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <MX_SPI2_Init+0x64>)
 8004204:	2200      	movs	r2, #0
 8004206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <MX_SPI2_Init+0x64>)
 800420a:	2200      	movs	r2, #0
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <MX_SPI2_Init+0x64>)
 8004210:	220a      	movs	r2, #10
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004214:	4804      	ldr	r0, [pc, #16]	; (8004228 <MX_SPI2_Init+0x64>)
 8004216:	f001 ff21 	bl	800605c <HAL_SPI_Init>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004220:	f000 fb46 	bl	80048b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004224:	bf00      	nop
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20000728 	.word	0x20000728
 800422c:	40003800 	.word	0x40003800

08004230 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <MX_UART4_Init+0x50>)
 8004236:	4a13      	ldr	r2, [pc, #76]	; (8004284 <MX_UART4_Init+0x54>)
 8004238:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <MX_UART4_Init+0x50>)
 800423c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004240:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8004242:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <MX_UART4_Init+0x50>)
 8004244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004248:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <MX_UART4_Init+0x50>)
 800424c:	2200      	movs	r2, #0
 800424e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <MX_UART4_Init+0x50>)
 8004252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004256:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <MX_UART4_Init+0x50>)
 800425a:	220c      	movs	r2, #12
 800425c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <MX_UART4_Init+0x50>)
 8004260:	2200      	movs	r2, #0
 8004262:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <MX_UART4_Init+0x50>)
 8004266:	2200      	movs	r2, #0
 8004268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800426a:	4805      	ldr	r0, [pc, #20]	; (8004280 <MX_UART4_Init+0x50>)
 800426c:	f002 f986 	bl	800657c <HAL_UART_Init>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 8004276:	f000 fb1b 	bl	80048b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000780 	.word	0x20000780
 8004284:	40004c00 	.word	0x40004c00

08004288 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <MX_USART1_UART_Init+0x4c>)
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <MX_USART1_UART_Init+0x50>)
 8004290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <MX_USART1_UART_Init+0x4c>)
 8004294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <MX_USART1_UART_Init+0x4c>)
 800429c:	2200      	movs	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042ae:	220c      	movs	r2, #12
 80042b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042be:	4805      	ldr	r0, [pc, #20]	; (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042c0:	f002 f95c 	bl	800657c <HAL_UART_Init>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80042ca:	f000 faf1 	bl	80048b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	200007c4 	.word	0x200007c4
 80042d8:	40011000 	.word	0x40011000

080042dc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80042e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042ea:	2204      	movs	r2, #4
 80042ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042f0:	2202      	movs	r2, #2
 80042f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80042fa:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042fc:	2202      	movs	r2, #2
 80042fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004302:	2200      	movs	r2, #0
 8004304:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004308:	2200      	movs	r2, #0
 800430a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800430e:	2200      	movs	r2, #0
 8004310:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004314:	2201      	movs	r2, #1
 8004316:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800431e:	4805      	ldr	r0, [pc, #20]	; (8004334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004320:	f001 f8e7 	bl	80054f2 <HAL_PCD_Init>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800432a:	f000 fac1 	bl	80048b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000808 	.word	0x20000808

08004338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08c      	sub	sp, #48	; 0x30
 800433c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433e:	f107 031c 	add.w	r3, r7, #28
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	60da      	str	r2, [r3, #12]
 800434c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	4bb8      	ldr	r3, [pc, #736]	; (8004634 <MX_GPIO_Init+0x2fc>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	4ab7      	ldr	r2, [pc, #732]	; (8004634 <MX_GPIO_Init+0x2fc>)
 8004358:	f043 0310 	orr.w	r3, r3, #16
 800435c:	6313      	str	r3, [r2, #48]	; 0x30
 800435e:	4bb5      	ldr	r3, [pc, #724]	; (8004634 <MX_GPIO_Init+0x2fc>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	4bb1      	ldr	r3, [pc, #708]	; (8004634 <MX_GPIO_Init+0x2fc>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	4ab0      	ldr	r2, [pc, #704]	; (8004634 <MX_GPIO_Init+0x2fc>)
 8004374:	f043 0304 	orr.w	r3, r3, #4
 8004378:	6313      	str	r3, [r2, #48]	; 0x30
 800437a:	4bae      	ldr	r3, [pc, #696]	; (8004634 <MX_GPIO_Init+0x2fc>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	4baa      	ldr	r3, [pc, #680]	; (8004634 <MX_GPIO_Init+0x2fc>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4aa9      	ldr	r2, [pc, #676]	; (8004634 <MX_GPIO_Init+0x2fc>)
 8004390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004394:	6313      	str	r3, [r2, #48]	; 0x30
 8004396:	4ba7      	ldr	r3, [pc, #668]	; (8004634 <MX_GPIO_Init+0x2fc>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	4ba3      	ldr	r3, [pc, #652]	; (8004634 <MX_GPIO_Init+0x2fc>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	4aa2      	ldr	r2, [pc, #648]	; (8004634 <MX_GPIO_Init+0x2fc>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	6313      	str	r3, [r2, #48]	; 0x30
 80043b2:	4ba0      	ldr	r3, [pc, #640]	; (8004634 <MX_GPIO_Init+0x2fc>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	4b9c      	ldr	r3, [pc, #624]	; (8004634 <MX_GPIO_Init+0x2fc>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	4a9b      	ldr	r2, [pc, #620]	; (8004634 <MX_GPIO_Init+0x2fc>)
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	6313      	str	r3, [r2, #48]	; 0x30
 80043ce:	4b99      	ldr	r3, [pc, #612]	; (8004634 <MX_GPIO_Init+0x2fc>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	4b95      	ldr	r3, [pc, #596]	; (8004634 <MX_GPIO_Init+0x2fc>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	4a94      	ldr	r2, [pc, #592]	; (8004634 <MX_GPIO_Init+0x2fc>)
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ea:	4b92      	ldr	r3, [pc, #584]	; (8004634 <MX_GPIO_Init+0x2fc>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|R_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 80043f6:	2200      	movs	r2, #0
 80043f8:	210b      	movs	r1, #11
 80043fa:	488f      	ldr	r0, [pc, #572]	; (8004638 <MX_GPIO_Init+0x300>)
 80043fc:	f001 f860 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_TEMP_2ERR_Pin|LED_AC2_ERR_Pin|LED_FAN_2ERR_Pin|EN_24V_DIG_Pin
 8004400:	2201      	movs	r2, #1
 8004402:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8004406:	488c      	ldr	r0, [pc, #560]	; (8004638 <MX_GPIO_Init+0x300>)
 8004408:	f001 f85a 	bl	80054c0 <HAL_GPIO_WritePin>
                          |EN_APL_5_Pin|EN_APL_6_Pin|EN_APL_7_Pin|EN_APL_8_Pin
                          |EN_APL_1_Pin|EN_APL_2_Pin|EN_APL_3_Pin|EN_APL_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_TEMP_1ERR_Pin|LED_AC1_ERR_Pin|LED_FAN1_ERR_Pin|CS_DAC_FAN_Pin
 800440c:	2201      	movs	r2, #1
 800440e:	2137      	movs	r1, #55	; 0x37
 8004410:	488a      	ldr	r0, [pc, #552]	; (800463c <MX_GPIO_Init+0x304>)
 8004412:	f001 f855 	bl	80054c0 <HAL_GPIO_WritePin>
                          |CS_DAC_FANC5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PS2_EN_Pin|EN_485_Pin, GPIO_PIN_RESET);
 8004416:	2200      	movs	r2, #0
 8004418:	f248 0108 	movw	r1, #32776	; 0x8008
 800441c:	4888      	ldr	r0, [pc, #544]	; (8004640 <MX_GPIO_Init+0x308>)
 800441e:	f001 f84f 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DAC_GPIO_Port, CS_DAC_Pin, GPIO_PIN_SET);
 8004422:	2201      	movs	r2, #1
 8004424:	2110      	movs	r1, #16
 8004426:	4886      	ldr	r0, [pc, #536]	; (8004640 <MX_GPIO_Init+0x308>)
 8004428:	f001 f84a 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOAD_DAC_Pin|EN_24V_FAN_Pin|EN_PS_GLOBAL_Pin|LED_Y_Pin
 800442c:	2201      	movs	r2, #1
 800442e:	f240 4133 	movw	r1, #1075	; 0x433
 8004432:	4884      	ldr	r0, [pc, #528]	; (8004644 <MX_GPIO_Init+0x30c>)
 8004434:	f001 f844 	bl	80054c0 <HAL_GPIO_WritePin>
                          |LED_ALARM_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MEM_WP_Pin|LED_G_Pin, GPIO_PIN_SET);
 8004438:	2201      	movs	r2, #1
 800443a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800443e:	4882      	ldr	r0, [pc, #520]	; (8004648 <MX_GPIO_Init+0x310>)
 8004440:	f001 f83e 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALARMA_OUT_GPIO_Port, ALARMA_OUT_Pin, GPIO_PIN_RESET);
 8004444:	2200      	movs	r2, #0
 8004446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800444a:	487e      	ldr	r0, [pc, #504]	; (8004644 <MX_GPIO_Init+0x30c>)
 800444c:	f001 f838 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PS1_FAN_FAIL_Pin */
  GPIO_InitStruct.Pin = PS1_FAN_FAIL_Pin;
 8004450:	2304      	movs	r3, #4
 8004452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004454:	2300      	movs	r3, #0
 8004456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PS1_FAN_FAIL_GPIO_Port, &GPIO_InitStruct);
 800445c:	f107 031c 	add.w	r3, r7, #28
 8004460:	4619      	mov	r1, r3
 8004462:	4875      	ldr	r0, [pc, #468]	; (8004638 <MX_GPIO_Init+0x300>)
 8004464:	f000 fe78 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 LED_TEMP_2ERR_Pin LED_AC2_ERR_Pin LED_FAN_2ERR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LED_TEMP_2ERR_Pin|LED_AC2_ERR_Pin|LED_FAN_2ERR_Pin;
 8004468:	2378      	movs	r3, #120	; 0x78
 800446a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800446c:	2301      	movs	r3, #1
 800446e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	2300      	movs	r3, #0
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004478:	f107 031c 	add.w	r3, r7, #28
 800447c:	4619      	mov	r1, r3
 800447e:	486e      	ldr	r0, [pc, #440]	; (8004638 <MX_GPIO_Init+0x300>)
 8004480:	f000 fe6a 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS1_TEMP_ALARM_Pin PS1_AC_FAIL_Pin PS1_A1_Pin PS1_A0_Pin
                           PG_PLT_4_Pin PG_PLT_3_Pin */
  GPIO_InitStruct.Pin = PS1_TEMP_ALARM_Pin|PS1_AC_FAIL_Pin|PS1_A1_Pin|PS1_A0_Pin
 8004484:	f24a 33c0 	movw	r3, #41920	; 0xa3c0
 8004488:	61fb      	str	r3, [r7, #28]
                          |PG_PLT_4_Pin|PG_PLT_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800448a:	2300      	movs	r3, #0
 800448c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800448e:	2301      	movs	r3, #1
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004492:	f107 031c 	add.w	r3, r7, #28
 8004496:	4619      	mov	r1, r3
 8004498:	4868      	ldr	r0, [pc, #416]	; (800463c <MX_GPIO_Init+0x304>)
 800449a:	f000 fe5d 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 800449e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044a4:	2300      	movs	r3, #0
 80044a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 80044ac:	f107 031c 	add.w	r3, r7, #28
 80044b0:	4619      	mov	r1, r3
 80044b2:	4862      	ldr	r0, [pc, #392]	; (800463c <MX_GPIO_Init+0x304>)
 80044b4:	f000 fe50 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TEMP_1ERR_Pin LED_AC1_ERR_Pin LED_FAN1_ERR_Pin */
  GPIO_InitStruct.Pin = LED_TEMP_1ERR_Pin|LED_AC1_ERR_Pin|LED_FAN1_ERR_Pin;
 80044b8:	2307      	movs	r3, #7
 80044ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044bc:	2301      	movs	r3, #1
 80044be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c8:	f107 031c 	add.w	r3, r7, #28
 80044cc:	4619      	mov	r1, r3
 80044ce:	485b      	ldr	r0, [pc, #364]	; (800463c <MX_GPIO_Init+0x304>)
 80044d0:	f000 fe42 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_PS_EXIST_Pin */
  GPIO_InitStruct.Pin = FAN_PS_EXIST_Pin;
 80044d4:	2308      	movs	r3, #8
 80044d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d8:	2300      	movs	r3, #0
 80044da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80044dc:	2302      	movs	r3, #2
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAN_PS_EXIST_GPIO_Port, &GPIO_InitStruct);
 80044e0:	f107 031c 	add.w	r3, r7, #28
 80044e4:	4619      	mov	r1, r3
 80044e6:	4855      	ldr	r0, [pc, #340]	; (800463c <MX_GPIO_Init+0x304>)
 80044e8:	f000 fe36 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS2_AC_FAIL_Pin PS2_FAN_FAIL_Pin */
  GPIO_InitStruct.Pin = PS2_AC_FAIL_Pin|PS2_FAN_FAIL_Pin;
 80044ec:	2305      	movs	r3, #5
 80044ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044f0:	2300      	movs	r3, #0
 80044f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f8:	f107 031c 	add.w	r3, r7, #28
 80044fc:	4619      	mov	r1, r3
 80044fe:	4850      	ldr	r0, [pc, #320]	; (8004640 <MX_GPIO_Init+0x308>)
 8004500:	f000 fe2a 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_TEMP_ALARM_Pin */
  GPIO_InitStruct.Pin = PS2_TEMP_ALARM_Pin;
 8004504:	2302      	movs	r3, #2
 8004506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004508:	2300      	movs	r3, #0
 800450a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800450c:	2302      	movs	r3, #2
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PS2_TEMP_ALARM_GPIO_Port, &GPIO_InitStruct);
 8004510:	f107 031c 	add.w	r3, r7, #28
 8004514:	4619      	mov	r1, r3
 8004516:	484a      	ldr	r0, [pc, #296]	; (8004640 <MX_GPIO_Init+0x308>)
 8004518:	f000 fe1e 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS2_EN_Pin CS_DAC_Pin */
  GPIO_InitStruct.Pin = PS2_EN_Pin|CS_DAC_Pin;
 800451c:	2318      	movs	r3, #24
 800451e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004520:	2301      	movs	r3, #1
 8004522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004524:	2301      	movs	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004528:	2300      	movs	r3, #0
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800452c:	f107 031c 	add.w	r3, r7, #28
 8004530:	4619      	mov	r1, r3
 8004532:	4843      	ldr	r0, [pc, #268]	; (8004640 <MX_GPIO_Init+0x308>)
 8004534:	f000 fe10 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DAC_FAN_Pin CS_DAC_FANC5_Pin */
  GPIO_InitStruct.Pin = CS_DAC_FAN_Pin|CS_DAC_FANC5_Pin;
 8004538:	2330      	movs	r3, #48	; 0x30
 800453a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800453c:	2301      	movs	r3, #1
 800453e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004540:	2301      	movs	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004544:	2300      	movs	r3, #0
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	4619      	mov	r1, r3
 800454e:	483b      	ldr	r0, [pc, #236]	; (800463c <MX_GPIO_Init+0x304>)
 8004550:	f000 fe02 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_DAC_Pin EN_24V_FAN_Pin EN_PS_GLOBAL_Pin */
  GPIO_InitStruct.Pin = LOAD_DAC_Pin|EN_24V_FAN_Pin|EN_PS_GLOBAL_Pin;
 8004554:	f240 4303 	movw	r3, #1027	; 0x403
 8004558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800455a:	2301      	movs	r3, #1
 800455c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800455e:	2301      	movs	r3, #1
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	2300      	movs	r3, #0
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004566:	f107 031c 	add.w	r3, r7, #28
 800456a:	4619      	mov	r1, r3
 800456c:	4835      	ldr	r0, [pc, #212]	; (8004644 <MX_GPIO_Init+0x30c>)
 800456e:	f000 fdf3 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_24V_DIG_Pin EN_APL_5_Pin EN_APL_6_Pin EN_APL_7_Pin
                           EN_APL_8_Pin EN_APL_1_Pin EN_APL_2_Pin EN_APL_3_Pin
                           EN_APL_4_Pin */
  GPIO_InitStruct.Pin = EN_24V_DIG_Pin|EN_APL_5_Pin|EN_APL_6_Pin|EN_APL_7_Pin
 8004572:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004576:	61fb      	str	r3, [r7, #28]
                          |EN_APL_8_Pin|EN_APL_1_Pin|EN_APL_2_Pin|EN_APL_3_Pin
                          |EN_APL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004578:	2301      	movs	r3, #1
 800457a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800457c:	2301      	movs	r3, #1
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004580:	2300      	movs	r3, #0
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004584:	f107 031c 	add.w	r3, r7, #28
 8004588:	4619      	mov	r1, r3
 800458a:	482b      	ldr	r0, [pc, #172]	; (8004638 <MX_GPIO_Init+0x300>)
 800458c:	f000 fde4 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_Pin ALARMA__IN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin|ALARMA__IN_Pin;
 8004590:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004596:	2300      	movs	r3, #0
 8004598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800459a:	2301      	movs	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459e:	f107 031c 	add.w	r3, r7, #28
 80045a2:	4619      	mov	r1, r3
 80045a4:	4827      	ldr	r0, [pc, #156]	; (8004644 <MX_GPIO_Init+0x30c>)
 80045a6:	f000 fdd7 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEM_WP_Pin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 80045aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b0:	2301      	movs	r3, #1
 80045b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b8:	2300      	movs	r3, #0
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 80045bc:	f107 031c 	add.w	r3, r7, #28
 80045c0:	4619      	mov	r1, r3
 80045c2:	4821      	ldr	r0, [pc, #132]	; (8004648 <MX_GPIO_Init+0x310>)
 80045c4:	f000 fdc8 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS2_A1_Pin PS2_A0_Pin PG_PLT_8_Pin PG_PLT_7_Pin
                           PG_PLT_6_Pin PG_PLT_5_Pin PG_24_FAN_Pin SEL_2_Pin
                           SEL_1_Pin */
  GPIO_InitStruct.Pin = PS2_A1_Pin|PS2_A0_Pin|PG_PLT_8_Pin|PG_PLT_7_Pin
 80045c8:	f64f 6360 	movw	r3, #65120	; 0xfe60
 80045cc:	61fb      	str	r3, [r7, #28]
                          |PG_PLT_6_Pin|PG_PLT_5_Pin|PG_24_FAN_Pin|SEL_2_Pin
                          |SEL_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045ce:	2300      	movs	r3, #0
 80045d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045d2:	2301      	movs	r3, #1
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045d6:	f107 031c 	add.w	r3, r7, #28
 80045da:	4619      	mov	r1, r3
 80045dc:	481a      	ldr	r0, [pc, #104]	; (8004648 <MX_GPIO_Init+0x310>)
 80045de:	f000 fdbb 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG_PLT_2_Pin PG_PLT_1_Pin */
  GPIO_InitStruct.Pin = PG_PLT_2_Pin|PG_PLT_1_Pin;
 80045e2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80045e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045e8:	2300      	movs	r3, #0
 80045ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ec:	2301      	movs	r3, #1
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f0:	f107 031c 	add.w	r3, r7, #28
 80045f4:	4619      	mov	r1, r3
 80045f6:	4812      	ldr	r0, [pc, #72]	; (8004640 <MX_GPIO_Init+0x308>)
 80045f8:	f000 fdae 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_485_Pin */
  GPIO_InitStruct.Pin = EN_485_Pin;
 80045fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004602:	2301      	movs	r3, #1
 8004604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004606:	2302      	movs	r3, #2
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460a:	2300      	movs	r3, #0
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN_485_GPIO_Port, &GPIO_InitStruct);
 800460e:	f107 031c 	add.w	r3, r7, #28
 8004612:	4619      	mov	r1, r3
 8004614:	480a      	ldr	r0, [pc, #40]	; (8004640 <MX_GPIO_Init+0x308>)
 8004616:	f000 fd9f 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800461e:	2301      	movs	r3, #1
 8004620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004622:	2300      	movs	r3, #0
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004626:	2300      	movs	r3, #0
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800462a:	f107 031c 	add.w	r3, r7, #28
 800462e:	4619      	mov	r1, r3
 8004630:	e00c      	b.n	800464c <MX_GPIO_Init+0x314>
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	40021000 	.word	0x40021000
 800463c:	40020800 	.word	0x40020800
 8004640:	40020000 	.word	0x40020000
 8004644:	40020400 	.word	0x40020400
 8004648:	40020c00 	.word	0x40020c00
 800464c:	4818      	ldr	r0, [pc, #96]	; (80046b0 <MX_GPIO_Init+0x378>)
 800464e:	f000 fd83 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_ALARM_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_ALARM_Pin;
 8004652:	2330      	movs	r3, #48	; 0x30
 8004654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004656:	2301      	movs	r3, #1
 8004658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465e:	2300      	movs	r3, #0
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004662:	f107 031c 	add.w	r3, r7, #28
 8004666:	4619      	mov	r1, r3
 8004668:	4812      	ldr	r0, [pc, #72]	; (80046b4 <MX_GPIO_Init+0x37c>)
 800466a:	f000 fd75 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARMA_OUT_Pin */
  GPIO_InitStruct.Pin = ALARMA_OUT_Pin;
 800466e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004674:	2301      	movs	r3, #1
 8004676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004678:	2302      	movs	r3, #2
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467c:	2300      	movs	r3, #0
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ALARMA_OUT_GPIO_Port, &GPIO_InitStruct);
 8004680:	f107 031c 	add.w	r3, r7, #28
 8004684:	4619      	mov	r1, r3
 8004686:	480b      	ldr	r0, [pc, #44]	; (80046b4 <MX_GPIO_Init+0x37c>)
 8004688:	f000 fd66 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|G_LED_Pin;
 800468c:	2303      	movs	r3, #3
 800468e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004690:	2301      	movs	r3, #1
 8004692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004694:	2302      	movs	r3, #2
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004698:	2300      	movs	r3, #0
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800469c:	f107 031c 	add.w	r3, r7, #28
 80046a0:	4619      	mov	r1, r3
 80046a2:	4805      	ldr	r0, [pc, #20]	; (80046b8 <MX_GPIO_Init+0x380>)
 80046a4:	f000 fd58 	bl	8005158 <HAL_GPIO_Init>

}
 80046a8:	bf00      	nop
 80046aa:	3730      	adds	r7, #48	; 0x30
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40020c00 	.word	0x40020c00
 80046b4:	40020400 	.word	0x40020400
 80046b8:	40021000 	.word	0x40021000

080046bc <vars_Init>:

/* USER CODE BEGIN 4 */
void vars_Init(void) {
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0

    uint8_t i;

    //fuentesStatus
    fuentesStatus.alarmsOn = 0;
 80046c2:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <vars_Init+0xbc>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
    //   fuentesStatus.tempFail1 = 0;
    //   fuentesStatus.tempFail2 = 0;
    for (i = 0; i < FNT_NUM_TEMP_FAIL; i++) {
 80046c8:	2300      	movs	r3, #0
 80046ca:	71fb      	strb	r3, [r7, #7]
 80046cc:	e00c      	b.n	80046e8 <vars_Init+0x2c>
        fuentesStatus.atempFail1[i] = 0;
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	4a29      	ldr	r2, [pc, #164]	; (8004778 <vars_Init+0xbc>)
 80046d2:	4413      	add	r3, r2
 80046d4:	2200      	movs	r2, #0
 80046d6:	709a      	strb	r2, [r3, #2]
        fuentesStatus.atempFail2[i] = 0;
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	4a27      	ldr	r2, [pc, #156]	; (8004778 <vars_Init+0xbc>)
 80046dc:	4413      	add	r3, r2
 80046de:	2200      	movs	r2, #0
 80046e0:	71da      	strb	r2, [r3, #7]
    for (i = 0; i < FNT_NUM_TEMP_FAIL; i++) {
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	3301      	adds	r3, #1
 80046e6:	71fb      	strb	r3, [r7, #7]
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d9ef      	bls.n	80046ce <vars_Init+0x12>
    }

    //MemoryMap
    MemoryMap.var.cabecera_fw.board_alarms.alarms = 0;
 80046ee:	4b23      	ldr	r3, [pc, #140]	; (800477c <vars_Init+0xc0>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MemoryMap.var.cabecera_fw.board_status.status = PCB_STATE_OFF;
 80046f6:	4b21      	ldr	r3, [pc, #132]	; (800477c <vars_Init+0xc0>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    MemoryMap.var.cabecera_fw.u16accions = 0; //Accion idle
 80046fe:	4b1f      	ldr	r3, [pc, #124]	; (800477c <vars_Init+0xc0>)
 8004700:	2200      	movs	r2, #0
 8004702:	859a      	strh	r2, [r3, #44]	; 0x2c
    MemoryMap.var.cabecera_fw.u16accioactual = 0;
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <vars_Init+0xc0>)
 8004706:	2200      	movs	r2, #0
 8004708:	85da      	strh	r2, [r3, #46]	; 0x2e
    MemoryMap.var.fuentes.estadoModulos = 0;
 800470a:	4b1c      	ldr	r3, [pc, #112]	; (800477c <vars_Init+0xc0>)
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    MemoryMap.var.fuentes.powerGoods = 0;
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <vars_Init+0xc0>)
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    MemoryMap.var.fuentes.mainStatus = MAIN_STATE_OFF;
 800471a:	4b18      	ldr	r3, [pc, #96]	; (800477c <vars_Init+0xc0>)
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    //4  MemoryMap.var.fuentes.modulos_ON_OFF = 0b00000000; //modules off
    MemoryMap.var.fuentes.alarma = FNT_MAIN_ALARM_NONE;
 8004722:	4b16      	ldr	r3, [pc, #88]	; (800477c <vars_Init+0xc0>)
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42


    for (i = 0; i < FNT_NUM_MODULES; i++) {
 800472a:	2300      	movs	r3, #0
 800472c:	71fb      	strb	r3, [r7, #7]
 800472e:	e008      	b.n	8004742 <vars_Init+0x86>
        MemoryMap.var.fuentes.aModulos_ON_OFF[i] = 0;
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <vars_Init+0xc0>)
 8004734:	4413      	add	r3, r2
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    for (i = 0; i < FNT_NUM_MODULES; i++) {
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	3301      	adds	r3, #1
 8004740:	71fb      	strb	r3, [r7, #7]
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d9f3      	bls.n	8004730 <vars_Init+0x74>
    }

    for (i = 0; i < MAX_NUM_SPI_CH; i++) {
 8004748:	2300      	movs	r3, #0
 800474a:	71fb      	strb	r3, [r7, #7]
 800474c:	e00a      	b.n	8004764 <vars_Init+0xa8>
        MemoryMap.var.fuentes.aVoltagePercent[i].fvalue = 0;
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	4a0a      	ldr	r2, [pc, #40]	; (800477c <vars_Init+0xc0>)
 8004752:	3312      	adds	r3, #18
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_NUM_SPI_CH; i++) {
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	3301      	adds	r3, #1
 8004762:	71fb      	strb	r3, [r7, #7]
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	2b03      	cmp	r3, #3
 8004768:	d9f1      	bls.n	800474e <vars_Init+0x92>
    }
    //  Alarms initialized on interrupts and control
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	20000030 	.word	0x20000030
 800477c:	20000234 	.word	0x20000234

08004780 <appLED_Init>:
    uint32_t u32Timer;
} appLed_t;

appLed_t appLed;

void appLED_Init(void) {
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
    appLed.u8Motor = 0;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <appLED_Init+0x14>)
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	20000d1c 	.word	0x20000d1c

08004798 <appLED_Motor>:

void appLED_Motor(void) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af02      	add	r7, sp, #8

    switch (appLed.u8Motor) {
 800479e:	4b20      	ldr	r3, [pc, #128]	; (8004820 <appLED_Motor+0x88>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <appLED_Motor+0x14>
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d00c      	beq.n	80047c4 <appLED_Motor+0x2c>
                appLed.u8Motor = 0;
            }
            break;

    }
}
 80047aa:	e036      	b.n	800481a <appLED_Motor+0x82>
            appLed.u32Timer = TICKS_GetTicks();
 80047ac:	f7ff f850 	bl	8003850 <TICKS_GetTicks>
 80047b0:	4603      	mov	r3, r0
 80047b2:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <appLED_Motor+0x88>)
 80047b4:	6053      	str	r3, [r2, #4]
            appLed.u8Motor++;
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <appLED_Motor+0x88>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	3301      	adds	r3, #1
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <appLED_Motor+0x88>)
 80047c0:	701a      	strb	r2, [r3, #0]
            break;
 80047c2:	e02a      	b.n	800481a <appLED_Motor+0x82>
            if (TICKS_DiffTicks(appLed.u32Timer) > 1000) {
 80047c4:	4b16      	ldr	r3, [pc, #88]	; (8004820 <appLED_Motor+0x88>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f84c 	bl	8003866 <TICKS_DiffTicks>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d4:	d920      	bls.n	8004818 <appLED_Motor+0x80>
                if (identif.IdPCB == PCB1) {
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <appLED_Motor+0x8c>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d108      	bne.n	80047f0 <appLED_Motor+0x58>
                    LED_Configure(LED2, 1, 100, 100, 0); //Green LED: single flash
 80047de:	2300      	movs	r3, #0
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2364      	movs	r3, #100	; 0x64
 80047e4:	2264      	movs	r2, #100	; 0x64
 80047e6:	2101      	movs	r1, #1
 80047e8:	2001      	movs	r0, #1
 80047ea:	f7fe ffc7 	bl	800377c <LED_Configure>
 80047ee:	e00b      	b.n	8004808 <appLED_Motor+0x70>
                } else if (identif.IdPCB == PCB2) {
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <appLED_Motor+0x8c>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d107      	bne.n	8004808 <appLED_Motor+0x70>
                    LED_Configure(LED2, 2, 100, 100, 0); //Green LED: double flash
 80047f8:	2300      	movs	r3, #0
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	2364      	movs	r3, #100	; 0x64
 80047fe:	2264      	movs	r2, #100	; 0x64
 8004800:	2102      	movs	r1, #2
 8004802:	2001      	movs	r0, #1
 8004804:	f7fe ffba 	bl	800377c <LED_Configure>
                appLed.u32Timer = TICKS_GetTicks();
 8004808:	f7ff f822 	bl	8003850 <TICKS_GetTicks>
 800480c:	4603      	mov	r3, r0
 800480e:	4a04      	ldr	r2, [pc, #16]	; (8004820 <appLED_Motor+0x88>)
 8004810:	6053      	str	r3, [r2, #4]
                appLed.u8Motor = 0;
 8004812:	4b03      	ldr	r3, [pc, #12]	; (8004820 <appLED_Motor+0x88>)
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
            break;
 8004818:	bf00      	nop
}
 800481a:	bf00      	nop
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000d1c 	.word	0x20000d1c
 8004824:	2000002c 	.word	0x2000002c

08004828 <APP_Accions>:
    }

}


void APP_Accions(void) {
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
    switch (MemoryMap.var.cabecera_fw.u16accions) {
 800482c:	4b1e      	ldr	r3, [pc, #120]	; (80048a8 <APP_Accions+0x80>)
 800482e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004830:	2b03      	cmp	r3, #3
 8004832:	d818      	bhi.n	8004866 <APP_Accions+0x3e>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <APP_Accions+0x14>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	0800486f 	.word	0x0800486f
 8004840:	0800484d 	.word	0x0800484d
 8004844:	0800486f 	.word	0x0800486f
 8004848:	0800486f 	.word	0x0800486f
            /*accion idle*/
            break;
        case 1:
            /* accion de reset */
            // if (MemoryMap.var.cabecera_fw.u16accioactual == 0) {
            MemoryMap.var.cabecera_fw.u16accioactual = MemoryMap.var.cabecera_fw.u16accions;
 800484c:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <APP_Accions+0x80>)
 800484e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004850:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <APP_Accions+0x80>)
 8004852:	85da      	strh	r2, [r3, #46]	; 0x2e
            //  LED_Configure(LED_VERMELL, 100, 80, 20);
            //  LED_Configure(LED_GROC, 100, 80, 20);
            //Tiempo para poder responder a la trama
            u32TicksReset = TICKS_GetTicks();
 8004854:	f7fe fffc 	bl	8003850 <TICKS_GetTicks>
 8004858:	4603      	mov	r3, r0
 800485a:	4a14      	ldr	r2, [pc, #80]	; (80048ac <APP_Accions+0x84>)
 800485c:	6013      	str	r3, [r2, #0]
            MemoryMap.var.cabecera_fw.u16accions = 0;
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <APP_Accions+0x80>)
 8004860:	2200      	movs	r2, #0
 8004862:	859a      	strh	r2, [r3, #44]	; 0x2c
            break;
 8004864:	e004      	b.n	8004870 <APP_Accions+0x48>
            //
            //
            //            break;

        default:
            MemoryMap.var.cabecera_fw.u16accions = 0;
 8004866:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <APP_Accions+0x80>)
 8004868:	2200      	movs	r2, #0
 800486a:	859a      	strh	r2, [r3, #44]	; 0x2c
            break;
 800486c:	e000      	b.n	8004870 <APP_Accions+0x48>
            break;
 800486e:	bf00      	nop
    }

    switch (MemoryMap.var.cabecera_fw.u16accioactual) {
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <APP_Accions+0x80>)
 8004872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004874:	2b05      	cmp	r3, #5
 8004876:	d80f      	bhi.n	8004898 <APP_Accions+0x70>
 8004878:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <APP_Accions+0x58>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048a1 	.word	0x080048a1
 8004884:	080048a1 	.word	0x080048a1
 8004888:	080048a1 	.word	0x080048a1
 800488c:	080048a1 	.word	0x080048a1
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048a1 	.word	0x080048a1

        case 5:
            /* accion abrir EV temporizada */
            break;
        default:
            MemoryMap.var.cabecera_fw.u16accioactual = 0;
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <APP_Accions+0x80>)
 800489a:	2200      	movs	r2, #0
 800489c:	85da      	strh	r2, [r3, #46]	; 0x2e
            break;
 800489e:	e000      	b.n	80048a2 <APP_Accions+0x7a>
            break;
 80048a0:	bf00      	nop
    }
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000234 	.word	0x20000234
 80048ac:	20000d18 	.word	0x20000d18

080048b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048b4:	b672      	cpsid	i
}
 80048b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048b8:	e7fe      	b.n	80048b8 <Error_Handler+0x8>
	...

080048bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	4b10      	ldr	r3, [pc, #64]	; (8004908 <HAL_MspInit+0x4c>)
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	4a0f      	ldr	r2, [pc, #60]	; (8004908 <HAL_MspInit+0x4c>)
 80048cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d0:	6453      	str	r3, [r2, #68]	; 0x44
 80048d2:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <HAL_MspInit+0x4c>)
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_MspInit+0x4c>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	4a08      	ldr	r2, [pc, #32]	; (8004908 <HAL_MspInit+0x4c>)
 80048e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ec:	6413      	str	r3, [r2, #64]	; 0x40
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_MspInit+0x4c>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800

0800490c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08c      	sub	sp, #48	; 0x30
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004914:	f107 031c 	add.w	r3, r7, #28
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a32      	ldr	r2, [pc, #200]	; (80049f4 <HAL_SPI_MspInit+0xe8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d12c      	bne.n	8004988 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	4a30      	ldr	r2, [pc, #192]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 8004938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800493c:	6453      	str	r3, [r2, #68]	; 0x44
 800493e:	4b2e      	ldr	r3, [pc, #184]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	6313      	str	r3, [r2, #48]	; 0x30
 800495a:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CLK_DAC_Pin|MOSI_DAC_Pin;
 8004966:	23a0      	movs	r3, #160	; 0xa0
 8004968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496a:	2302      	movs	r3, #2
 800496c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004972:	2303      	movs	r3, #3
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004976:	2305      	movs	r3, #5
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800497a:	f107 031c 	add.w	r3, r7, #28
 800497e:	4619      	mov	r1, r3
 8004980:	481e      	ldr	r0, [pc, #120]	; (80049fc <HAL_SPI_MspInit+0xf0>)
 8004982:	f000 fbe9 	bl	8005158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004986:	e031      	b.n	80049ec <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_SPI_MspInit+0xf4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d12c      	bne.n	80049ec <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 800499c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a0:	6413      	str	r3, [r2, #64]	; 0x40
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	4a10      	ldr	r2, [pc, #64]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 80049b8:	f043 0302 	orr.w	r3, r3, #2
 80049bc:	6313      	str	r3, [r2, #48]	; 0x30
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <HAL_SPI_MspInit+0xec>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MEM_CS_Pin|MEM_SCK_Pin|MEM_MISO_Pin|MEM_MOSI_Pin;
 80049ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80049ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d0:	2302      	movs	r3, #2
 80049d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d8:	2303      	movs	r3, #3
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049dc:	2305      	movs	r3, #5
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e0:	f107 031c 	add.w	r3, r7, #28
 80049e4:	4619      	mov	r1, r3
 80049e6:	4807      	ldr	r0, [pc, #28]	; (8004a04 <HAL_SPI_MspInit+0xf8>)
 80049e8:	f000 fbb6 	bl	8005158 <HAL_GPIO_Init>
}
 80049ec:	bf00      	nop
 80049ee:	3730      	adds	r7, #48	; 0x30
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40013000 	.word	0x40013000
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40020000 	.word	0x40020000
 8004a00:	40003800 	.word	0x40003800
 8004a04:	40020400 	.word	0x40020400

08004a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08c      	sub	sp, #48	; 0x30
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a10:	f107 031c 	add.w	r3, r7, #28
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3a      	ldr	r2, [pc, #232]	; (8004b10 <HAL_UART_MspInit+0x108>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d135      	bne.n	8004a96 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	4a38      	ldr	r2, [pc, #224]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a38:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3a:	4b36      	ldr	r3, [pc, #216]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	4a31      	ldr	r2, [pc, #196]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004a50:	f043 0304 	orr.w	r3, r3, #4
 8004a54:	6313      	str	r3, [r2, #48]	; 0x30
 8004a56:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_485_Pin|RX_485_Pin;
 8004a62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a70:	2303      	movs	r3, #3
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004a74:	2308      	movs	r3, #8
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a78:	f107 031c 	add.w	r3, r7, #28
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4826      	ldr	r0, [pc, #152]	; (8004b18 <HAL_UART_MspInit+0x110>)
 8004a80:	f000 fb6a 	bl	8005158 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004a84:	2200      	movs	r2, #0
 8004a86:	2100      	movs	r1, #0
 8004a88:	2034      	movs	r0, #52	; 0x34
 8004a8a:	f000 fa90 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004a8e:	2034      	movs	r0, #52	; 0x34
 8004a90:	f000 faa9 	bl	8004fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a94:	e038      	b.n	8004b08 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a20      	ldr	r2, [pc, #128]	; (8004b1c <HAL_UART_MspInit+0x114>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d133      	bne.n	8004b08 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004aaa:	f043 0310 	orr.w	r3, r3, #16
 8004aae:	6453      	str	r3, [r2, #68]	; 0x44
 8004ab0:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004ac6:	f043 0302 	orr.w	r3, r3, #2
 8004aca:	6313      	str	r3, [r2, #48]	; 0x30
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <HAL_UART_MspInit+0x10c>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ad8:	23c0      	movs	r3, #192	; 0xc0
 8004ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004adc:	2302      	movs	r3, #2
 8004ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ae8:	2307      	movs	r3, #7
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aec:	f107 031c 	add.w	r3, r7, #28
 8004af0:	4619      	mov	r1, r3
 8004af2:	480b      	ldr	r0, [pc, #44]	; (8004b20 <HAL_UART_MspInit+0x118>)
 8004af4:	f000 fb30 	bl	8005158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004af8:	2200      	movs	r2, #0
 8004afa:	2100      	movs	r1, #0
 8004afc:	2025      	movs	r0, #37	; 0x25
 8004afe:	f000 fa56 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b02:	2025      	movs	r0, #37	; 0x25
 8004b04:	f000 fa6f 	bl	8004fe6 <HAL_NVIC_EnableIRQ>
}
 8004b08:	bf00      	nop
 8004b0a:	3730      	adds	r7, #48	; 0x30
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40004c00 	.word	0x40004c00
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40020800 	.word	0x40020800
 8004b1c:	40011000 	.word	0x40011000
 8004b20:	40020400 	.word	0x40020400

08004b24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2c:	f107 0314 	add.w	r3, r7, #20
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b44:	d13f      	bne.n	8004bc6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <HAL_PCD_MspInit+0xac>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <HAL_PCD_MspInit+0xac>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	6313      	str	r3, [r2, #48]	; 0x30
 8004b56:	4b1e      	ldr	r3, [pc, #120]	; (8004bd0 <HAL_PCD_MspInit+0xac>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b70:	f107 0314 	add.w	r3, r7, #20
 8004b74:	4619      	mov	r1, r3
 8004b76:	4817      	ldr	r0, [pc, #92]	; (8004bd4 <HAL_PCD_MspInit+0xb0>)
 8004b78:	f000 faee 	bl	8005158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004b7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b82:	2302      	movs	r3, #2
 8004b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004b8e:	230a      	movs	r3, #10
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b92:	f107 0314 	add.w	r3, r7, #20
 8004b96:	4619      	mov	r1, r3
 8004b98:	480e      	ldr	r0, [pc, #56]	; (8004bd4 <HAL_PCD_MspInit+0xb0>)
 8004b9a:	f000 fadd 	bl	8005158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <HAL_PCD_MspInit+0xac>)
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <HAL_PCD_MspInit+0xac>)
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba8:	6353      	str	r3, [r2, #52]	; 0x34
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_PCD_MspInit+0xac>)
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <HAL_PCD_MspInit+0xac>)
 8004bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_PCD_MspInit+0xac>)
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004bc6:	bf00      	nop
 8004bc8:	3728      	adds	r7, #40	; 0x28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	40020000 	.word	0x40020000

08004bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bdc:	e7fe      	b.n	8004bdc <NMI_Handler+0x4>

08004bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004be2:	e7fe      	b.n	8004be2 <HardFault_Handler+0x4>

08004be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004be8:	e7fe      	b.n	8004be8 <MemManage_Handler+0x4>

08004bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bea:	b480      	push	{r7}
 8004bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bee:	e7fe      	b.n	8004bee <BusFault_Handler+0x4>

08004bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bf4:	e7fe      	b.n	8004bf4 <UsageFault_Handler+0x4>

08004bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bfa:	bf00      	nop
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c08:	bf00      	nop
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c12:	b480      	push	{r7}
 8004c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c16:	bf00      	nop
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c24:	f000 f8a4 	bl	8004d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c28:	bf00      	nop
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c30:	4802      	ldr	r0, [pc, #8]	; (8004c3c <USART1_IRQHandler+0x10>)
 8004c32:	f001 fe71 	bl	8006918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	200007c4 	.word	0x200007c4

08004c40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <UART4_IRQHandler+0x10>)
 8004c46:	f001 fe67 	bl	8006918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000780 	.word	0x20000780

08004c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <SystemInit+0x20>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	4a05      	ldr	r2, [pc, #20]	; (8004c74 <SystemInit+0x20>)
 8004c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c7c:	480d      	ldr	r0, [pc, #52]	; (8004cb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c7e:	490e      	ldr	r1, [pc, #56]	; (8004cb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c80:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c84:	e002      	b.n	8004c8c <LoopCopyDataInit>

08004c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c8a:	3304      	adds	r3, #4

08004c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c90:	d3f9      	bcc.n	8004c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c92:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c94:	4c0b      	ldr	r4, [pc, #44]	; (8004cc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c98:	e001      	b.n	8004c9e <LoopFillZerobss>

08004c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c9c:	3204      	adds	r2, #4

08004c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ca0:	d3fb      	bcc.n	8004c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ca2:	f7ff ffd7 	bl	8004c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ca6:	f003 f829 	bl	8007cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004caa:	f7ff f967 	bl	8003f7c <main>
  bx  lr    
 8004cae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cb8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8004cbc:	08007da4 	.word	0x08007da4
  ldr r2, =_sbss
 8004cc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004cc4:	20000d28 	.word	0x20000d28

08004cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cc8:	e7fe      	b.n	8004cc8 <ADC_IRQHandler>
	...

08004ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <HAL_Init+0x40>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <HAL_Init+0x40>)
 8004cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_Init+0x40>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <HAL_Init+0x40>)
 8004ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ce8:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <HAL_Init+0x40>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a07      	ldr	r2, [pc, #28]	; (8004d0c <HAL_Init+0x40>)
 8004cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cf4:	2003      	movs	r0, #3
 8004cf6:	f000 f94f 	bl	8004f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cfa:	200f      	movs	r0, #15
 8004cfc:	f000 f808 	bl	8004d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d00:	f7ff fddc 	bl	80048bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023c00 	.word	0x40023c00

08004d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d18:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_InitTick+0x54>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <HAL_InitTick+0x58>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	4619      	mov	r1, r3
 8004d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f967 	bl	8005002 <HAL_SYSTICK_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e00e      	b.n	8004d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b0f      	cmp	r3, #15
 8004d42:	d80a      	bhi.n	8004d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d44:	2200      	movs	r2, #0
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	f000 f92f 	bl	8004fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d50:	4a06      	ldr	r2, [pc, #24]	; (8004d6c <HAL_InitTick+0x5c>)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20000004 	.word	0x20000004
 8004d68:	2000000c 	.word	0x2000000c
 8004d6c:	20000008 	.word	0x20000008

08004d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_IncTick+0x20>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_IncTick+0x24>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4413      	add	r3, r2
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <HAL_IncTick+0x24>)
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	2000000c 	.word	0x2000000c
 8004d94:	20000d24 	.word	0x20000d24

08004d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d9c:	4b03      	ldr	r3, [pc, #12]	; (8004dac <HAL_GetTick+0x14>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000d24 	.word	0x20000d24

08004db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004db8:	f7ff ffee 	bl	8004d98 <HAL_GetTick>
 8004dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d005      	beq.n	8004dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_Delay+0x44>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004dd6:	bf00      	nop
 8004dd8:	f7ff ffde 	bl	8004d98 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d8f7      	bhi.n	8004dd8 <HAL_Delay+0x28>
  {
  }
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	2000000c 	.word	0x2000000c

08004df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <__NVIC_SetPriorityGrouping+0x44>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e14:	4013      	ands	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e2a:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <__NVIC_SetPriorityGrouping+0x44>)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	60d3      	str	r3, [r2, #12]
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	e000ed00 	.word	0xe000ed00

08004e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <__NVIC_GetPriorityGrouping+0x18>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	0a1b      	lsrs	r3, r3, #8
 8004e4a:	f003 0307 	and.w	r3, r3, #7
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	e000ed00 	.word	0xe000ed00

08004e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	db0b      	blt.n	8004e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	f003 021f 	and.w	r2, r3, #31
 8004e74:	4907      	ldr	r1, [pc, #28]	; (8004e94 <__NVIC_EnableIRQ+0x38>)
 8004e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	e000e100 	.word	0xe000e100

08004e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	6039      	str	r1, [r7, #0]
 8004ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	db0a      	blt.n	8004ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	490c      	ldr	r1, [pc, #48]	; (8004ee4 <__NVIC_SetPriority+0x4c>)
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	0112      	lsls	r2, r2, #4
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	440b      	add	r3, r1
 8004ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ec0:	e00a      	b.n	8004ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	4908      	ldr	r1, [pc, #32]	; (8004ee8 <__NVIC_SetPriority+0x50>)
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	3b04      	subs	r3, #4
 8004ed0:	0112      	lsls	r2, r2, #4
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	761a      	strb	r2, [r3, #24]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	e000e100 	.word	0xe000e100
 8004ee8:	e000ed00 	.word	0xe000ed00

08004eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b089      	sub	sp, #36	; 0x24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f1c3 0307 	rsb	r3, r3, #7
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	bf28      	it	cs
 8004f0a:	2304      	movcs	r3, #4
 8004f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3304      	adds	r3, #4
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d902      	bls.n	8004f1c <NVIC_EncodePriority+0x30>
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3b03      	subs	r3, #3
 8004f1a:	e000      	b.n	8004f1e <NVIC_EncodePriority+0x32>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f20:	f04f 32ff 	mov.w	r2, #4294967295
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	401a      	ands	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f34:	f04f 31ff 	mov.w	r1, #4294967295
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3e:	43d9      	mvns	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f44:	4313      	orrs	r3, r2
         );
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3724      	adds	r7, #36	; 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f64:	d301      	bcc.n	8004f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f66:	2301      	movs	r3, #1
 8004f68:	e00f      	b.n	8004f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <SysTick_Config+0x40>)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f72:	210f      	movs	r1, #15
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	f7ff ff8e 	bl	8004e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <SysTick_Config+0x40>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f82:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <SysTick_Config+0x40>)
 8004f84:	2207      	movs	r2, #7
 8004f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	e000e010 	.word	0xe000e010

08004f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ff29 	bl	8004df8 <__NVIC_SetPriorityGrouping>
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b086      	sub	sp, #24
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fc0:	f7ff ff3e 	bl	8004e40 <__NVIC_GetPriorityGrouping>
 8004fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	6978      	ldr	r0, [r7, #20]
 8004fcc:	f7ff ff8e 	bl	8004eec <NVIC_EncodePriority>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff ff5d 	bl	8004e98 <__NVIC_SetPriority>
}
 8004fde:	bf00      	nop
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	4603      	mov	r3, r0
 8004fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff ff31 	bl	8004e5c <__NVIC_EnableIRQ>
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff ffa2 	bl	8004f54 <SysTick_Config>
 8005010:	4603      	mov	r3, r0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005026:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005028:	f7ff feb6 	bl	8004d98 <HAL_GetTick>
 800502c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d008      	beq.n	800504c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e052      	b.n	80050f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0216 	bic.w	r2, r2, #22
 800505a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800506a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d103      	bne.n	800507c <HAL_DMA_Abort+0x62>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0208 	bic.w	r2, r2, #8
 800508a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800509c:	e013      	b.n	80050c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800509e:	f7ff fe7b 	bl	8004d98 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	d90c      	bls.n	80050c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2203      	movs	r2, #3
 80050b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e015      	b.n	80050f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e4      	bne.n	800509e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d8:	223f      	movs	r2, #63	; 0x3f
 80050da:	409a      	lsls	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d004      	beq.n	8005118 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2280      	movs	r2, #128	; 0x80
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e00c      	b.n	8005132 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2205      	movs	r2, #5
 800511c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0201 	bic.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	; 0x24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005166:	2300      	movs	r3, #0
 8005168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e16b      	b.n	800544c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005174:	2201      	movs	r2, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4013      	ands	r3, r2
 8005186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	429a      	cmp	r2, r3
 800518e:	f040 815a 	bne.w	8005446 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d005      	beq.n	80051aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d130      	bne.n	800520c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	2203      	movs	r2, #3
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051e0:	2201      	movs	r2, #1
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 0201 	and.w	r2, r3, #1
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4313      	orrs	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	2b03      	cmp	r3, #3
 8005216:	d017      	beq.n	8005248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	2203      	movs	r2, #3
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	4313      	orrs	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d123      	bne.n	800529c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	08da      	lsrs	r2, r3, #3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3208      	adds	r2, #8
 800525c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	220f      	movs	r2, #15
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	43db      	mvns	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4313      	orrs	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	08da      	lsrs	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3208      	adds	r2, #8
 8005296:	69b9      	ldr	r1, [r7, #24]
 8005298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	2203      	movs	r2, #3
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0203 	and.w	r2, r3, #3
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80b4 	beq.w	8005446 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	4b60      	ldr	r3, [pc, #384]	; (8005464 <HAL_GPIO_Init+0x30c>)
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	4a5f      	ldr	r2, [pc, #380]	; (8005464 <HAL_GPIO_Init+0x30c>)
 80052e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052ec:	6453      	str	r3, [r2, #68]	; 0x44
 80052ee:	4b5d      	ldr	r3, [pc, #372]	; (8005464 <HAL_GPIO_Init+0x30c>)
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052fa:	4a5b      	ldr	r2, [pc, #364]	; (8005468 <HAL_GPIO_Init+0x310>)
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	089b      	lsrs	r3, r3, #2
 8005300:	3302      	adds	r3, #2
 8005302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	220f      	movs	r2, #15
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	43db      	mvns	r3, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	4013      	ands	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a52      	ldr	r2, [pc, #328]	; (800546c <HAL_GPIO_Init+0x314>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d02b      	beq.n	800537e <HAL_GPIO_Init+0x226>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a51      	ldr	r2, [pc, #324]	; (8005470 <HAL_GPIO_Init+0x318>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d025      	beq.n	800537a <HAL_GPIO_Init+0x222>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a50      	ldr	r2, [pc, #320]	; (8005474 <HAL_GPIO_Init+0x31c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01f      	beq.n	8005376 <HAL_GPIO_Init+0x21e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a4f      	ldr	r2, [pc, #316]	; (8005478 <HAL_GPIO_Init+0x320>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d019      	beq.n	8005372 <HAL_GPIO_Init+0x21a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a4e      	ldr	r2, [pc, #312]	; (800547c <HAL_GPIO_Init+0x324>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_GPIO_Init+0x216>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4d      	ldr	r2, [pc, #308]	; (8005480 <HAL_GPIO_Init+0x328>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00d      	beq.n	800536a <HAL_GPIO_Init+0x212>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a4c      	ldr	r2, [pc, #304]	; (8005484 <HAL_GPIO_Init+0x32c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <HAL_GPIO_Init+0x20e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a4b      	ldr	r2, [pc, #300]	; (8005488 <HAL_GPIO_Init+0x330>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <HAL_GPIO_Init+0x20a>
 800535e:	2307      	movs	r3, #7
 8005360:	e00e      	b.n	8005380 <HAL_GPIO_Init+0x228>
 8005362:	2308      	movs	r3, #8
 8005364:	e00c      	b.n	8005380 <HAL_GPIO_Init+0x228>
 8005366:	2306      	movs	r3, #6
 8005368:	e00a      	b.n	8005380 <HAL_GPIO_Init+0x228>
 800536a:	2305      	movs	r3, #5
 800536c:	e008      	b.n	8005380 <HAL_GPIO_Init+0x228>
 800536e:	2304      	movs	r3, #4
 8005370:	e006      	b.n	8005380 <HAL_GPIO_Init+0x228>
 8005372:	2303      	movs	r3, #3
 8005374:	e004      	b.n	8005380 <HAL_GPIO_Init+0x228>
 8005376:	2302      	movs	r3, #2
 8005378:	e002      	b.n	8005380 <HAL_GPIO_Init+0x228>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <HAL_GPIO_Init+0x228>
 800537e:	2300      	movs	r3, #0
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	f002 0203 	and.w	r2, r2, #3
 8005386:	0092      	lsls	r2, r2, #2
 8005388:	4093      	lsls	r3, r2
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005390:	4935      	ldr	r1, [pc, #212]	; (8005468 <HAL_GPIO_Init+0x310>)
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	089b      	lsrs	r3, r3, #2
 8005396:	3302      	adds	r3, #2
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800539e:	4b3b      	ldr	r3, [pc, #236]	; (800548c <HAL_GPIO_Init+0x334>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053c2:	4a32      	ldr	r2, [pc, #200]	; (800548c <HAL_GPIO_Init+0x334>)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053c8:	4b30      	ldr	r3, [pc, #192]	; (800548c <HAL_GPIO_Init+0x334>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053ec:	4a27      	ldr	r2, [pc, #156]	; (800548c <HAL_GPIO_Init+0x334>)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <HAL_GPIO_Init+0x334>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	43db      	mvns	r3, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4013      	ands	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005416:	4a1d      	ldr	r2, [pc, #116]	; (800548c <HAL_GPIO_Init+0x334>)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800541c:	4b1b      	ldr	r3, [pc, #108]	; (800548c <HAL_GPIO_Init+0x334>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	43db      	mvns	r3, r3
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4013      	ands	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005440:	4a12      	ldr	r2, [pc, #72]	; (800548c <HAL_GPIO_Init+0x334>)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	3301      	adds	r3, #1
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b0f      	cmp	r3, #15
 8005450:	f67f ae90 	bls.w	8005174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	3724      	adds	r7, #36	; 0x24
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800
 8005468:	40013800 	.word	0x40013800
 800546c:	40020000 	.word	0x40020000
 8005470:	40020400 	.word	0x40020400
 8005474:	40020800 	.word	0x40020800
 8005478:	40020c00 	.word	0x40020c00
 800547c:	40021000 	.word	0x40021000
 8005480:	40021400 	.word	0x40021400
 8005484:	40021800 	.word	0x40021800
 8005488:	40021c00 	.word	0x40021c00
 800548c:	40013c00 	.word	0x40013c00

08005490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	887b      	ldrh	r3, [r7, #2]
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	e001      	b.n	80054b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	807b      	strh	r3, [r7, #2]
 80054cc:	4613      	mov	r3, r2
 80054ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054d0:	787b      	ldrb	r3, [r7, #1]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054d6:	887a      	ldrh	r2, [r7, #2]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054dc:	e003      	b.n	80054e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054de:	887b      	ldrh	r3, [r7, #2]
 80054e0:	041a      	lsls	r2, r3, #16
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	619a      	str	r2, [r3, #24]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f4:	b08f      	sub	sp, #60	; 0x3c
 80054f6:	af0a      	add	r7, sp, #40	; 0x28
 80054f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e10f      	b.n	8005724 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff fb00 	bl	8004b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2203      	movs	r2, #3
 8005528:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f002 f939 	bl	80077ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	687e      	ldr	r6, [r7, #4]
 8005550:	466d      	mov	r5, sp
 8005552:	f106 0410 	add.w	r4, r6, #16
 8005556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800555a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800555c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800555e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005562:	e885 0003 	stmia.w	r5, {r0, r1}
 8005566:	1d33      	adds	r3, r6, #4
 8005568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800556a:	6838      	ldr	r0, [r7, #0]
 800556c:	f002 f8c4 	bl	80076f8 <USB_CoreInit>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e0d0      	b.n	8005724 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f002 f927 	bl	80077dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
 8005592:	e04a      	b.n	800562a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005594:	7bfa      	ldrb	r2, [r7, #15]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	333d      	adds	r3, #61	; 0x3d
 80055a4:	2201      	movs	r2, #1
 80055a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055a8:	7bfa      	ldrb	r2, [r7, #15]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	333c      	adds	r3, #60	; 0x3c
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80055bc:	7bfa      	ldrb	r2, [r7, #15]
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	b298      	uxth	r0, r3
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	3344      	adds	r3, #68	; 0x44
 80055d0:	4602      	mov	r2, r0
 80055d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055d4:	7bfa      	ldrb	r2, [r7, #15]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	3340      	adds	r3, #64	; 0x40
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055e8:	7bfa      	ldrb	r2, [r7, #15]
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	3348      	adds	r3, #72	; 0x48
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055fc:	7bfa      	ldrb	r2, [r7, #15]
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	334c      	adds	r3, #76	; 0x4c
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005610:	7bfa      	ldrb	r2, [r7, #15]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	3354      	adds	r3, #84	; 0x54
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	3301      	adds	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
 800562a:	7bfa      	ldrb	r2, [r7, #15]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d3af      	bcc.n	8005594 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]
 8005638:	e044      	b.n	80056c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800563a:	7bfa      	ldrb	r2, [r7, #15]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005650:	7bfa      	ldrb	r2, [r7, #15]
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005662:	7bfa      	ldrb	r2, [r7, #15]
 8005664:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005666:	7bfa      	ldrb	r2, [r7, #15]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005692:	7bfa      	ldrb	r2, [r7, #15]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80056a8:	7bfa      	ldrb	r2, [r7, #15]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	3301      	adds	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d3b5      	bcc.n	800563a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	687e      	ldr	r6, [r7, #4]
 80056d6:	466d      	mov	r5, sp
 80056d8:	f106 0410 	add.w	r4, r6, #16
 80056dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80056ec:	1d33      	adds	r3, r6, #4
 80056ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056f0:	6838      	ldr	r0, [r7, #0]
 80056f2:	f002 f8bf 	bl	8007874 <USB_DevInit>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e00d      	b.n	8005724 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f002 fa8a 	bl	8007c36 <USB_DevDisconnect>

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800572c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e267      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d075      	beq.n	8005836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800574a:	4b88      	ldr	r3, [pc, #544]	; (800596c <HAL_RCC_OscConfig+0x240>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	2b04      	cmp	r3, #4
 8005754:	d00c      	beq.n	8005770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005756:	4b85      	ldr	r3, [pc, #532]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800575e:	2b08      	cmp	r3, #8
 8005760:	d112      	bne.n	8005788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005762:	4b82      	ldr	r3, [pc, #520]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800576e:	d10b      	bne.n	8005788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005770:	4b7e      	ldr	r3, [pc, #504]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d05b      	beq.n	8005834 <HAL_RCC_OscConfig+0x108>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d157      	bne.n	8005834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e242      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d106      	bne.n	80057a0 <HAL_RCC_OscConfig+0x74>
 8005792:	4b76      	ldr	r3, [pc, #472]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a75      	ldr	r2, [pc, #468]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e01d      	b.n	80057dc <HAL_RCC_OscConfig+0xb0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x98>
 80057aa:	4b70      	ldr	r3, [pc, #448]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a6f      	ldr	r2, [pc, #444]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80057b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	4b6d      	ldr	r3, [pc, #436]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a6c      	ldr	r2, [pc, #432]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80057bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e00b      	b.n	80057dc <HAL_RCC_OscConfig+0xb0>
 80057c4:	4b69      	ldr	r3, [pc, #420]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a68      	ldr	r2, [pc, #416]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80057ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	4b66      	ldr	r3, [pc, #408]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a65      	ldr	r2, [pc, #404]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80057d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d013      	beq.n	800580c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7ff fad8 	bl	8004d98 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ec:	f7ff fad4 	bl	8004d98 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b64      	cmp	r3, #100	; 0x64
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e207      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b5b      	ldr	r3, [pc, #364]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0xc0>
 800580a:	e014      	b.n	8005836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580c:	f7ff fac4 	bl	8004d98 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005814:	f7ff fac0 	bl	8004d98 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b64      	cmp	r3, #100	; 0x64
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e1f3      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005826:	4b51      	ldr	r3, [pc, #324]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0xe8>
 8005832:	e000      	b.n	8005836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d063      	beq.n	800590a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005842:	4b4a      	ldr	r3, [pc, #296]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 030c 	and.w	r3, r3, #12
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005856:	2b08      	cmp	r3, #8
 8005858:	d11c      	bne.n	8005894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800585a:	4b44      	ldr	r3, [pc, #272]	; (800596c <HAL_RCC_OscConfig+0x240>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d116      	bne.n	8005894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005866:	4b41      	ldr	r3, [pc, #260]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_RCC_OscConfig+0x152>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d001      	beq.n	800587e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e1c7      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587e:	4b3b      	ldr	r3, [pc, #236]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4937      	ldr	r1, [pc, #220]	; (800596c <HAL_RCC_OscConfig+0x240>)
 800588e:	4313      	orrs	r3, r2
 8005890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005892:	e03a      	b.n	800590a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d020      	beq.n	80058de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800589c:	4b34      	ldr	r3, [pc, #208]	; (8005970 <HAL_RCC_OscConfig+0x244>)
 800589e:	2201      	movs	r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a2:	f7ff fa79 	bl	8004d98 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058aa:	f7ff fa75 	bl	8004d98 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e1a8      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058bc:	4b2b      	ldr	r3, [pc, #172]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c8:	4b28      	ldr	r3, [pc, #160]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	4925      	ldr	r1, [pc, #148]	; (800596c <HAL_RCC_OscConfig+0x240>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	600b      	str	r3, [r1, #0]
 80058dc:	e015      	b.n	800590a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058de:	4b24      	ldr	r3, [pc, #144]	; (8005970 <HAL_RCC_OscConfig+0x244>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7ff fa58 	bl	8004d98 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ec:	f7ff fa54 	bl	8004d98 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e187      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fe:	4b1b      	ldr	r3, [pc, #108]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d036      	beq.n	8005984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800591e:	4b15      	ldr	r3, [pc, #84]	; (8005974 <HAL_RCC_OscConfig+0x248>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005924:	f7ff fa38 	bl	8004d98 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800592c:	f7ff fa34 	bl	8004d98 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e167      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593e:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCC_OscConfig+0x240>)
 8005940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0x200>
 800594a:	e01b      	b.n	8005984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800594c:	4b09      	ldr	r3, [pc, #36]	; (8005974 <HAL_RCC_OscConfig+0x248>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005952:	f7ff fa21 	bl	8004d98 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005958:	e00e      	b.n	8005978 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800595a:	f7ff fa1d 	bl	8004d98 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d907      	bls.n	8005978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e150      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
 800596c:	40023800 	.word	0x40023800
 8005970:	42470000 	.word	0x42470000
 8005974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005978:	4b88      	ldr	r3, [pc, #544]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 800597a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1ea      	bne.n	800595a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8097 	beq.w	8005ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005992:	2300      	movs	r3, #0
 8005994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005996:	4b81      	ldr	r3, [pc, #516]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10f      	bne.n	80059c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a2:	2300      	movs	r3, #0
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	4b7d      	ldr	r3, [pc, #500]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	4a7c      	ldr	r2, [pc, #496]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b0:	6413      	str	r3, [r2, #64]	; 0x40
 80059b2:	4b7a      	ldr	r3, [pc, #488]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c2:	4b77      	ldr	r3, [pc, #476]	; (8005ba0 <HAL_RCC_OscConfig+0x474>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d118      	bne.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ce:	4b74      	ldr	r3, [pc, #464]	; (8005ba0 <HAL_RCC_OscConfig+0x474>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a73      	ldr	r2, [pc, #460]	; (8005ba0 <HAL_RCC_OscConfig+0x474>)
 80059d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059da:	f7ff f9dd 	bl	8004d98 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059e2:	f7ff f9d9 	bl	8004d98 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e10c      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f4:	4b6a      	ldr	r3, [pc, #424]	; (8005ba0 <HAL_RCC_OscConfig+0x474>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0f0      	beq.n	80059e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d106      	bne.n	8005a16 <HAL_RCC_OscConfig+0x2ea>
 8005a08:	4b64      	ldr	r3, [pc, #400]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0c:	4a63      	ldr	r2, [pc, #396]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	6713      	str	r3, [r2, #112]	; 0x70
 8005a14:	e01c      	b.n	8005a50 <HAL_RCC_OscConfig+0x324>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCC_OscConfig+0x30c>
 8005a1e:	4b5f      	ldr	r3, [pc, #380]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	4a5e      	ldr	r2, [pc, #376]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a24:	f043 0304 	orr.w	r3, r3, #4
 8005a28:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2a:	4b5c      	ldr	r3, [pc, #368]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	4a5b      	ldr	r2, [pc, #364]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	6713      	str	r3, [r2, #112]	; 0x70
 8005a36:	e00b      	b.n	8005a50 <HAL_RCC_OscConfig+0x324>
 8005a38:	4b58      	ldr	r3, [pc, #352]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3c:	4a57      	ldr	r2, [pc, #348]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a3e:	f023 0301 	bic.w	r3, r3, #1
 8005a42:	6713      	str	r3, [r2, #112]	; 0x70
 8005a44:	4b55      	ldr	r3, [pc, #340]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	4a54      	ldr	r2, [pc, #336]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a4a:	f023 0304 	bic.w	r3, r3, #4
 8005a4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d015      	beq.n	8005a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a58:	f7ff f99e 	bl	8004d98 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5e:	e00a      	b.n	8005a76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a60:	f7ff f99a 	bl	8004d98 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e0cb      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a76:	4b49      	ldr	r3, [pc, #292]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0ee      	beq.n	8005a60 <HAL_RCC_OscConfig+0x334>
 8005a82:	e014      	b.n	8005aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a84:	f7ff f988 	bl	8004d98 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a8c:	f7ff f984 	bl	8004d98 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e0b5      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa2:	4b3e      	ldr	r3, [pc, #248]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1ee      	bne.n	8005a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab4:	4b39      	ldr	r3, [pc, #228]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	4a38      	ldr	r2, [pc, #224]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005abe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80a1 	beq.w	8005c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aca:	4b34      	ldr	r3, [pc, #208]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 030c 	and.w	r3, r3, #12
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d05c      	beq.n	8005b90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d141      	bne.n	8005b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ade:	4b31      	ldr	r3, [pc, #196]	; (8005ba4 <HAL_RCC_OscConfig+0x478>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7ff f958 	bl	8004d98 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aec:	f7ff f954 	bl	8004d98 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e087      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afe:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69da      	ldr	r2, [r3, #28]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	019b      	lsls	r3, r3, #6
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	3b01      	subs	r3, #1
 8005b24:	041b      	lsls	r3, r3, #16
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	491b      	ldr	r1, [pc, #108]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <HAL_RCC_OscConfig+0x478>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3a:	f7ff f92d 	bl	8004d98 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b42:	f7ff f929 	bl	8004d98 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e05c      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b54:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <HAL_RCC_OscConfig+0x416>
 8005b60:	e054      	b.n	8005c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <HAL_RCC_OscConfig+0x478>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b68:	f7ff f916 	bl	8004d98 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b70:	f7ff f912 	bl	8004d98 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e045      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <HAL_RCC_OscConfig+0x470>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f0      	bne.n	8005b70 <HAL_RCC_OscConfig+0x444>
 8005b8e:	e03d      	b.n	8005c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e038      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	40007000 	.word	0x40007000
 8005ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_RCC_OscConfig+0x4ec>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d028      	beq.n	8005c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d121      	bne.n	8005c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d11a      	bne.n	8005c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d111      	bne.n	8005c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d107      	bne.n	8005c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40023800 	.word	0x40023800

08005c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0cc      	b.n	8005dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c30:	4b68      	ldr	r3, [pc, #416]	; (8005dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d90c      	bls.n	8005c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b65      	ldr	r3, [pc, #404]	; (8005dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c46:	4b63      	ldr	r3, [pc, #396]	; (8005dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0b8      	b.n	8005dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d020      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c70:	4b59      	ldr	r3, [pc, #356]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	4a58      	ldr	r2, [pc, #352]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c88:	4b53      	ldr	r3, [pc, #332]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4a52      	ldr	r2, [pc, #328]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c94:	4b50      	ldr	r3, [pc, #320]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	494d      	ldr	r1, [pc, #308]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d044      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d107      	bne.n	8005cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cba:	4b47      	ldr	r3, [pc, #284]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d119      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e07f      	b.n	8005dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d003      	beq.n	8005cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d107      	bne.n	8005cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cda:	4b3f      	ldr	r3, [pc, #252]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e06f      	b.n	8005dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cea:	4b3b      	ldr	r3, [pc, #236]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e067      	b.n	8005dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cfa:	4b37      	ldr	r3, [pc, #220]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f023 0203 	bic.w	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4934      	ldr	r1, [pc, #208]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d0c:	f7ff f844 	bl	8004d98 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d12:	e00a      	b.n	8005d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d14:	f7ff f840 	bl	8004d98 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e04f      	b.n	8005dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	4b2b      	ldr	r3, [pc, #172]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 020c 	and.w	r2, r3, #12
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d1eb      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b25      	ldr	r3, [pc, #148]	; (8005dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d20c      	bcs.n	8005d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b22      	ldr	r3, [pc, #136]	; (8005dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d52:	4b20      	ldr	r3, [pc, #128]	; (8005dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e032      	b.n	8005dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d008      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d70:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4916      	ldr	r1, [pc, #88]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d8e:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	490e      	ldr	r1, [pc, #56]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005da2:	f000 f821 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8005da6:	4602      	mov	r2, r0
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	091b      	lsrs	r3, r3, #4
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	490a      	ldr	r1, [pc, #40]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005db4:	5ccb      	ldrb	r3, [r1, r3]
 8005db6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dba:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe ffa4 	bl	8004d10 <HAL_InitTick>

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40023c00 	.word	0x40023c00
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	08007d7c 	.word	0x08007d7c
 8005de0:	20000004 	.word	0x20000004
 8005de4:	20000008 	.word	0x20000008

08005de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dec:	b094      	sub	sp, #80	; 0x50
 8005dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	647b      	str	r3, [r7, #68]	; 0x44
 8005df4:	2300      	movs	r3, #0
 8005df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df8:	2300      	movs	r3, #0
 8005dfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e00:	4b79      	ldr	r3, [pc, #484]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d00d      	beq.n	8005e28 <HAL_RCC_GetSysClockFreq+0x40>
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	f200 80e1 	bhi.w	8005fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x34>
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d003      	beq.n	8005e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e1a:	e0db      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e1c:	4b73      	ldr	r3, [pc, #460]	; (8005fec <HAL_RCC_GetSysClockFreq+0x204>)
 8005e1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e20:	e0db      	b.n	8005fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e22:	4b73      	ldr	r3, [pc, #460]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e26:	e0d8      	b.n	8005fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e28:	4b6f      	ldr	r3, [pc, #444]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e32:	4b6d      	ldr	r3, [pc, #436]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d063      	beq.n	8005f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e3e:	4b6a      	ldr	r3, [pc, #424]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	099b      	lsrs	r3, r3, #6
 8005e44:	2200      	movs	r2, #0
 8005e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e50:	633b      	str	r3, [r7, #48]	; 0x30
 8005e52:	2300      	movs	r3, #0
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34
 8005e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	462b      	mov	r3, r5
 8005e5e:	f04f 0000 	mov.w	r0, #0
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	0159      	lsls	r1, r3, #5
 8005e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e6c:	0150      	lsls	r0, r2, #5
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4621      	mov	r1, r4
 8005e74:	1a51      	subs	r1, r2, r1
 8005e76:	6139      	str	r1, [r7, #16]
 8005e78:	4629      	mov	r1, r5
 8005e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	018b      	lsls	r3, r1, #6
 8005e90:	4651      	mov	r1, sl
 8005e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e96:	4651      	mov	r1, sl
 8005e98:	018a      	lsls	r2, r1, #6
 8005e9a:	4651      	mov	r1, sl
 8005e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ea6:	f04f 0200 	mov.w	r2, #0
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eba:	4690      	mov	r8, r2
 8005ebc:	4699      	mov	r9, r3
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	eb18 0303 	adds.w	r3, r8, r3
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	462b      	mov	r3, r5
 8005ec8:	eb49 0303 	adc.w	r3, r9, r3
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005eda:	4629      	mov	r1, r5
 8005edc:	024b      	lsls	r3, r1, #9
 8005ede:	4621      	mov	r1, r4
 8005ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	024a      	lsls	r2, r1, #9
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4619      	mov	r1, r3
 8005eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eee:	2200      	movs	r2, #0
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ef8:	f7fa fc9c 	bl	8000834 <__aeabi_uldivmod>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4613      	mov	r3, r2
 8005f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f04:	e058      	b.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f06:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	099b      	lsrs	r3, r3, #6
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	4611      	mov	r1, r2
 8005f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f16:	623b      	str	r3, [r7, #32]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f20:	4642      	mov	r2, r8
 8005f22:	464b      	mov	r3, r9
 8005f24:	f04f 0000 	mov.w	r0, #0
 8005f28:	f04f 0100 	mov.w	r1, #0
 8005f2c:	0159      	lsls	r1, r3, #5
 8005f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f32:	0150      	lsls	r0, r2, #5
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4641      	mov	r1, r8
 8005f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f3e:	4649      	mov	r1, r9
 8005f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f58:	ebb2 040a 	subs.w	r4, r2, sl
 8005f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	00eb      	lsls	r3, r5, #3
 8005f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f6e:	00e2      	lsls	r2, r4, #3
 8005f70:	4614      	mov	r4, r2
 8005f72:	461d      	mov	r5, r3
 8005f74:	4643      	mov	r3, r8
 8005f76:	18e3      	adds	r3, r4, r3
 8005f78:	603b      	str	r3, [r7, #0]
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	eb45 0303 	adc.w	r3, r5, r3
 8005f80:	607b      	str	r3, [r7, #4]
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f8e:	4629      	mov	r1, r5
 8005f90:	028b      	lsls	r3, r1, #10
 8005f92:	4621      	mov	r1, r4
 8005f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f98:	4621      	mov	r1, r4
 8005f9a:	028a      	lsls	r2, r1, #10
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	61fa      	str	r2, [r7, #28]
 8005fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fac:	f7fa fc42 	bl	8000834 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	0c1b      	lsrs	r3, r3, #16
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fd2:	e002      	b.n	8005fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_RCC_GetSysClockFreq+0x204>)
 8005fd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3750      	adds	r7, #80	; 0x50
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	00f42400 	.word	0x00f42400
 8005ff0:	007a1200 	.word	0x007a1200

08005ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ff8:	4b03      	ldr	r3, [pc, #12]	; (8006008 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000004 	.word	0x20000004

0800600c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006010:	f7ff fff0 	bl	8005ff4 <HAL_RCC_GetHCLKFreq>
 8006014:	4602      	mov	r2, r0
 8006016:	4b05      	ldr	r3, [pc, #20]	; (800602c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	0a9b      	lsrs	r3, r3, #10
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	4903      	ldr	r1, [pc, #12]	; (8006030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006022:	5ccb      	ldrb	r3, [r1, r3]
 8006024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006028:	4618      	mov	r0, r3
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40023800 	.word	0x40023800
 8006030:	08007d8c 	.word	0x08007d8c

08006034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006038:	f7ff ffdc 	bl	8005ff4 <HAL_RCC_GetHCLKFreq>
 800603c:	4602      	mov	r2, r0
 800603e:	4b05      	ldr	r3, [pc, #20]	; (8006054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	0b5b      	lsrs	r3, r3, #13
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	4903      	ldr	r1, [pc, #12]	; (8006058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800604a:	5ccb      	ldrb	r3, [r1, r3]
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006050:	4618      	mov	r0, r3
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40023800 	.word	0x40023800
 8006058:	08007d8c 	.word	0x08007d8c

0800605c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e07b      	b.n	8006166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b00      	cmp	r3, #0
 8006074:	d108      	bne.n	8006088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800607e:	d009      	beq.n	8006094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	61da      	str	r2, [r3, #28]
 8006086:	e005      	b.n	8006094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fe fc2c 	bl	800490c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006118:	ea42 0103 	orr.w	r1, r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	f003 0104 	and.w	r1, r3, #4
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	f003 0210 	and.w	r2, r3, #16
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b088      	sub	sp, #32
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	4613      	mov	r3, r2
 800617c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_SPI_Transmit+0x22>
 800618c:	2302      	movs	r3, #2
 800618e:	e126      	b.n	80063de <HAL_SPI_Transmit+0x270>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006198:	f7fe fdfe 	bl	8004d98 <HAL_GetTick>
 800619c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d002      	beq.n	80061b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061ae:	2302      	movs	r3, #2
 80061b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061b2:	e10b      	b.n	80063cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_SPI_Transmit+0x52>
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061c4:	e102      	b.n	80063cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2203      	movs	r2, #3
 80061ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	88fa      	ldrh	r2, [r7, #6]
 80061de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	88fa      	ldrh	r2, [r7, #6]
 80061e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620c:	d10f      	bne.n	800622e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800621c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800622c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	d007      	beq.n	800624c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800624a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006254:	d14b      	bne.n	80062ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_SPI_Transmit+0xf6>
 800625e:	8afb      	ldrh	r3, [r7, #22]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d13e      	bne.n	80062e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	881a      	ldrh	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006274:	1c9a      	adds	r2, r3, #2
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006288:	e02b      	b.n	80062e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b02      	cmp	r3, #2
 8006296:	d112      	bne.n	80062be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	881a      	ldrh	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	1c9a      	adds	r2, r3, #2
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80062bc:	e011      	b.n	80062e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062be:	f7fe fd6b 	bl	8004d98 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d803      	bhi.n	80062d6 <HAL_SPI_Transmit+0x168>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d102      	bne.n	80062dc <HAL_SPI_Transmit+0x16e>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062e0:	e074      	b.n	80063cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1ce      	bne.n	800628a <HAL_SPI_Transmit+0x11c>
 80062ec:	e04c      	b.n	8006388 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <HAL_SPI_Transmit+0x18e>
 80062f6:	8afb      	ldrh	r3, [r7, #22]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d140      	bne.n	800637e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006322:	e02c      	b.n	800637e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d113      	bne.n	800635a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	330c      	adds	r3, #12
 800633c:	7812      	ldrb	r2, [r2, #0]
 800633e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	86da      	strh	r2, [r3, #54]	; 0x36
 8006358:	e011      	b.n	800637e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800635a:	f7fe fd1d 	bl	8004d98 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d803      	bhi.n	8006372 <HAL_SPI_Transmit+0x204>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d102      	bne.n	8006378 <HAL_SPI_Transmit+0x20a>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d102      	bne.n	800637e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800637c:	e026      	b.n	80063cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1cd      	bne.n	8006324 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f8b3 	bl	80064f8 <SPI_EndRxTxTransaction>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	e000      	b.n	80063cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80063ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063f8:	f7fe fcce 	bl	8004d98 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	4413      	add	r3, r2
 8006406:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006408:	f7fe fcc6 	bl	8004d98 <HAL_GetTick>
 800640c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800640e:	4b39      	ldr	r3, [pc, #228]	; (80064f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	015b      	lsls	r3, r3, #5
 8006414:	0d1b      	lsrs	r3, r3, #20
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	fb02 f303 	mul.w	r3, r2, r3
 800641c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800641e:	e054      	b.n	80064ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d050      	beq.n	80064ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006428:	f7fe fcb6 	bl	8004d98 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	429a      	cmp	r2, r3
 8006436:	d902      	bls.n	800643e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d13d      	bne.n	80064ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800644c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006456:	d111      	bne.n	800647c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006460:	d004      	beq.n	800646c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646a:	d107      	bne.n	800647c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006484:	d10f      	bne.n	80064a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e017      	b.n	80064ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4013      	ands	r3, r2
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	bf0c      	ite	eq
 80064da:	2301      	moveq	r3, #1
 80064dc:	2300      	movne	r3, #0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d19b      	bne.n	8006420 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3720      	adds	r7, #32
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000004 	.word	0x20000004

080064f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006504:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <SPI_EndRxTxTransaction+0x7c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <SPI_EndRxTxTransaction+0x80>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	0d5b      	lsrs	r3, r3, #21
 8006510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006514:	fb02 f303 	mul.w	r3, r2, r3
 8006518:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006522:	d112      	bne.n	800654a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	2180      	movs	r1, #128	; 0x80
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff ff5a 	bl	80063e8 <SPI_WaitFlagStateUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	f043 0220 	orr.w	r2, r3, #32
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e00f      	b.n	800656a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	3b01      	subs	r3, #1
 8006554:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b80      	cmp	r3, #128	; 0x80
 8006562:	d0f2      	beq.n	800654a <SPI_EndRxTxTransaction+0x52>
 8006564:	e000      	b.n	8006568 <SPI_EndRxTxTransaction+0x70>
        break;
 8006566:	bf00      	nop
  }

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000004 	.word	0x20000004
 8006578:	165e9f81 	.word	0x165e9f81

0800657c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e03f      	b.n	800660e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fe fa30 	bl	8004a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2224      	movs	r2, #36	; 0x24
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fe25 	bl	8007210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695a      	ldr	r2, [r3, #20]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	4613      	mov	r3, r2
 8006622:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b20      	cmp	r3, #32
 800662e:	d130      	bne.n	8006692 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_UART_Transmit_IT+0x26>
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e029      	b.n	8006694 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_UART_Transmit_IT+0x38>
 800664a:	2302      	movs	r3, #2
 800664c:	e022      	b.n	8006694 <HAL_UART_Transmit_IT+0x7e>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	88fa      	ldrh	r2, [r7, #6]
 8006666:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2221      	movs	r2, #33	; 0x21
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800668c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	e000      	b.n	8006694 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006692:	2302      	movs	r3, #2
  }
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d11d      	bne.n	80066f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <HAL_UART_Receive_IT+0x26>
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e016      	b.n	80066f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_UART_Receive_IT+0x38>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e00f      	b.n	80066f8 <HAL_UART_Receive_IT+0x58>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	461a      	mov	r2, r3
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fbb7 	bl	8006e60 <UART_Start_Receive_IT>
 80066f2:	4603      	mov	r3, r0
 80066f4:	e000      	b.n	80066f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80066f6:	2302      	movs	r3, #2
  }
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08e      	sub	sp, #56	; 0x38
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	61fb      	str	r3, [r7, #28]
   return(result);
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800672e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e5      	bne.n	8006708 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d136      	bne.n	80067b8 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3314      	adds	r3, #20
 8006750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	60bb      	str	r3, [r7, #8]
   return(result);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006760:	633b      	str	r3, [r7, #48]	; 0x30
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3314      	adds	r3, #20
 8006768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676a:	61ba      	str	r2, [r7, #24]
 800676c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6979      	ldr	r1, [r7, #20]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	613b      	str	r3, [r7, #16]
   return(result);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e5      	bne.n	800674a <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006782:	2b00      	cmp	r3, #0
 8006784:	d018      	beq.n	80067b8 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678a:	2200      	movs	r2, #0
 800678c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fc41 	bl	800501a <HAL_DMA_Abort>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00c      	beq.n	80067b8 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe fccb 	bl	800513e <HAL_DMA_GetError>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d104      	bne.n	80067b8 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2210      	movs	r2, #16
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e007      	b.n	80067c8 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3738      	adds	r7, #56	; 0x38
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b09a      	sub	sp, #104	; 0x68
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	330c      	adds	r3, #12
 80067de:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80067e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067ee:	667b      	str	r3, [r7, #100]	; 0x64
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	330c      	adds	r3, #12
 80067f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80067f8:	657a      	str	r2, [r7, #84]	; 0x54
 80067fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3314      	adds	r3, #20
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	663b      	str	r3, [r7, #96]	; 0x60
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3314      	adds	r3, #20
 800682a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800682c:	643a      	str	r2, [r7, #64]	; 0x40
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	2b01      	cmp	r3, #1
 8006846:	d119      	bne.n	800687c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	61fb      	str	r3, [r7, #28]
   return(result);
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f023 0310 	bic.w	r3, r3, #16
 800685e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800686e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006870:	e841 2300 	strex	r3, r2, [r1]
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e5      	bne.n	8006848 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d136      	bne.n	80068f8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3314      	adds	r3, #20
 8006890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	60bb      	str	r3, [r7, #8]
   return(result);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3314      	adds	r3, #20
 80068a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068aa:	61ba      	str	r2, [r7, #24]
 80068ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6979      	ldr	r1, [r7, #20]
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	613b      	str	r3, [r7, #16]
   return(result);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d018      	beq.n	80068f8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	2200      	movs	r2, #0
 80068cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fba1 	bl	800501a <HAL_DMA_Abort>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00c      	beq.n	80068f8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fc2b 	bl	800513e <HAL_DMA_GetError>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d104      	bne.n	80068f8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2210      	movs	r2, #16
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e00a      	b.n	800690e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3768      	adds	r7, #104	; 0x68
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b0ba      	sub	sp, #232	; 0xe8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800693e:	2300      	movs	r3, #0
 8006940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006944:	2300      	movs	r3, #0
 8006946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10f      	bne.n	800697e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <HAL_UART_IRQHandler+0x66>
 800696a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fb8f 	bl	800709a <UART_Receive_IT>
      return;
 800697c:	e256      	b.n	8006e2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800697e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80de 	beq.w	8006b44 <HAL_UART_IRQHandler+0x22c>
 8006988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d106      	bne.n	80069a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006998:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 80d1 	beq.w	8006b44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_UART_IRQHandler+0xae>
 80069ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f043 0201 	orr.w	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ca:	f003 0304 	and.w	r3, r3, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00b      	beq.n	80069ea <HAL_UART_IRQHandler+0xd2>
 80069d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f043 0202 	orr.w	r2, r3, #2
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <HAL_UART_IRQHandler+0xf6>
 80069f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d005      	beq.n	8006a0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	f043 0204 	orr.w	r2, r3, #4
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d011      	beq.n	8006a3e <HAL_UART_IRQHandler+0x126>
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d105      	bne.n	8006a32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	f043 0208 	orr.w	r2, r3, #8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 81ed 	beq.w	8006e22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d008      	beq.n	8006a66 <HAL_UART_IRQHandler+0x14e>
 8006a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fb1a 	bl	800709a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b40      	cmp	r3, #64	; 0x40
 8006a72:	bf0c      	ite	eq
 8006a74:	2301      	moveq	r3, #1
 8006a76:	2300      	movne	r3, #0
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d103      	bne.n	8006a92 <HAL_UART_IRQHandler+0x17a>
 8006a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d04f      	beq.n	8006b32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa22 	bl	8006edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d141      	bne.n	8006b2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3314      	adds	r3, #20
 8006aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1d9      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d013      	beq.n	8006b22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	4a7d      	ldr	r2, [pc, #500]	; (8006cf4 <HAL_UART_IRQHandler+0x3dc>)
 8006b00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe faf7 	bl	80050fa <HAL_DMA_Abort_IT>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d016      	beq.n	8006b40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b20:	e00e      	b.n	8006b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f986 	bl	8006e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b28:	e00a      	b.n	8006b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f982 	bl	8006e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b30:	e006      	b.n	8006b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f97e 	bl	8006e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b3e:	e170      	b.n	8006e22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b40:	bf00      	nop
    return;
 8006b42:	e16e      	b.n	8006e22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	f040 814a 	bne.w	8006de2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 8143 	beq.w	8006de2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 813c 	beq.w	8006de2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8a:	2b40      	cmp	r3, #64	; 0x40
 8006b8c:	f040 80b4 	bne.w	8006cf8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8140 	beq.w	8006e26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	f080 8139 	bcs.w	8006e26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc6:	f000 8088 	beq.w	8006cda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	330c      	adds	r3, #12
 8006bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1d9      	bne.n	8006bca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3314      	adds	r3, #20
 8006c1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e1      	bne.n	8006c16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3314      	adds	r3, #20
 8006c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3314      	adds	r3, #20
 8006c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e3      	bne.n	8006c52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006caa:	f023 0310 	bic.w	r3, r3, #16
 8006cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e3      	bne.n	8006c98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fe f9a0 	bl	800501a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f8ac 	bl	8006e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cf0:	e099      	b.n	8006e26 <HAL_UART_IRQHandler+0x50e>
 8006cf2:	bf00      	nop
 8006cf4:	08006fa3 	.word	0x08006fa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 808b 	beq.w	8006e2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8086 	beq.w	8006e2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	330c      	adds	r3, #12
 8006d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	330c      	adds	r3, #12
 8006d3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d42:	647a      	str	r2, [r7, #68]	; 0x44
 8006d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e3      	bne.n	8006d1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	623b      	str	r3, [r7, #32]
   return(result);
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3314      	adds	r3, #20
 8006d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e3      	bne.n	8006d56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	330c      	adds	r3, #12
 8006da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0310 	bic.w	r3, r3, #16
 8006db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006dc0:	61fa      	str	r2, [r7, #28]
 8006dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	69b9      	ldr	r1, [r7, #24]
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e3      	bne.n	8006d9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f834 	bl	8006e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006de0:	e023      	b.n	8006e2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d009      	beq.n	8006e02 <HAL_UART_IRQHandler+0x4ea>
 8006dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f8e5 	bl	8006fca <UART_Transmit_IT>
    return;
 8006e00:	e014      	b.n	8006e2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00e      	beq.n	8006e2c <HAL_UART_IRQHandler+0x514>
 8006e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d008      	beq.n	8006e2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f925 	bl	800706a <UART_EndTransmit_IT>
    return;
 8006e20:	e004      	b.n	8006e2c <HAL_UART_IRQHandler+0x514>
    return;
 8006e22:	bf00      	nop
 8006e24:	e002      	b.n	8006e2c <HAL_UART_IRQHandler+0x514>
      return;
 8006e26:	bf00      	nop
 8006e28:	e000      	b.n	8006e2c <HAL_UART_IRQHandler+0x514>
      return;
 8006e2a:	bf00      	nop
  }
}
 8006e2c:	37e8      	adds	r7, #232	; 0xe8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop

08006e34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	88fa      	ldrh	r2, [r7, #6]
 8006e78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	88fa      	ldrh	r2, [r7, #6]
 8006e7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2222      	movs	r2, #34	; 0x22
 8006e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695a      	ldr	r2, [r3, #20]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0201 	orr.w	r2, r2, #1
 8006ebc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f042 0220 	orr.w	r2, r2, #32
 8006ecc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b095      	sub	sp, #84	; 0x54
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f04:	643a      	str	r2, [r7, #64]	; 0x40
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e5      	bne.n	8006ee4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3314      	adds	r3, #20
 8006f1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f023 0301 	bic.w	r3, r3, #1
 8006f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3314      	adds	r3, #20
 8006f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e5      	bne.n	8006f18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d119      	bne.n	8006f88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f023 0310 	bic.w	r3, r3, #16
 8006f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f74:	61ba      	str	r2, [r7, #24]
 8006f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6979      	ldr	r1, [r7, #20]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	613b      	str	r3, [r7, #16]
   return(result);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f96:	bf00      	nop
 8006f98:	3754      	adds	r7, #84	; 0x54
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7ff ff39 	bl	8006e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b21      	cmp	r3, #33	; 0x21
 8006fdc:	d13e      	bne.n	800705c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe6:	d114      	bne.n	8007012 <UART_Transmit_IT+0x48>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d110      	bne.n	8007012 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007004:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	621a      	str	r2, [r3, #32]
 8007010:	e008      	b.n	8007024 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	1c59      	adds	r1, r3, #1
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6211      	str	r1, [r2, #32]
 800701c:	781a      	ldrb	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29b      	uxth	r3, r3
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	4619      	mov	r1, r3
 8007032:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10f      	bne.n	8007058 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007046:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007056:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	e000      	b.n	800705e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800705c:	2302      	movs	r3, #2
  }
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007080:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7fc fec4 	bl	8003e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b08c      	sub	sp, #48	; 0x30
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b22      	cmp	r3, #34	; 0x22
 80070ac:	f040 80ab 	bne.w	8007206 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b8:	d117      	bne.n	80070ea <UART_Receive_IT+0x50>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d113      	bne.n	80070ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d8:	b29a      	uxth	r2, r3
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	1c9a      	adds	r2, r3, #2
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	629a      	str	r2, [r3, #40]	; 0x28
 80070e8:	e026      	b.n	8007138 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fc:	d007      	beq.n	800710e <UART_Receive_IT+0x74>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <UART_Receive_IT+0x82>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e008      	b.n	800712e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007128:	b2da      	uxtb	r2, r3
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	4619      	mov	r1, r3
 8007146:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007148:	2b00      	cmp	r3, #0
 800714a:	d15a      	bne.n	8007202 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0220 	bic.w	r2, r2, #32
 800715a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800716a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695a      	ldr	r2, [r3, #20]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0201 	bic.w	r2, r2, #1
 800717a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007188:	2b01      	cmp	r3, #1
 800718a:	d135      	bne.n	80071f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	613b      	str	r3, [r7, #16]
   return(result);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f023 0310 	bic.w	r3, r3, #16
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	330c      	adds	r3, #12
 80071b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b2:	623a      	str	r2, [r7, #32]
 80071b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	69f9      	ldr	r1, [r7, #28]
 80071b8:	6a3a      	ldr	r2, [r7, #32]
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	61bb      	str	r3, [r7, #24]
   return(result);
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e5      	bne.n	8007192 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	d10a      	bne.n	80071ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff fe29 	bl	8006e48 <HAL_UARTEx_RxEventCallback>
 80071f6:	e002      	b.n	80071fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fc fe3f 	bl	8003e7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	e002      	b.n	8007208 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	e000      	b.n	8007208 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007206:	2302      	movs	r3, #2
  }
}
 8007208:	4618      	mov	r0, r3
 800720a:	3730      	adds	r7, #48	; 0x30
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007214:	b0c0      	sub	sp, #256	; 0x100
 8007216:	af00      	add	r7, sp, #0
 8007218:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	68d9      	ldr	r1, [r3, #12]
 800722e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	ea40 0301 	orr.w	r3, r0, r1
 8007238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800723a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	431a      	orrs	r2, r3
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	431a      	orrs	r2, r3
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007268:	f021 010c 	bic.w	r1, r1, #12
 800726c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007276:	430b      	orrs	r3, r1
 8007278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728a:	6999      	ldr	r1, [r3, #24]
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	ea40 0301 	orr.w	r3, r0, r1
 8007296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b8f      	ldr	r3, [pc, #572]	; (80074dc <UART_SetConfig+0x2cc>)
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d005      	beq.n	80072b0 <UART_SetConfig+0xa0>
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b8d      	ldr	r3, [pc, #564]	; (80074e0 <UART_SetConfig+0x2d0>)
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d104      	bne.n	80072ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072b0:	f7fe fec0 	bl	8006034 <HAL_RCC_GetPCLK2Freq>
 80072b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072b8:	e003      	b.n	80072c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072ba:	f7fe fea7 	bl	800600c <HAL_RCC_GetPCLK1Freq>
 80072be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072cc:	f040 810c 	bne.w	80074e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072e2:	4622      	mov	r2, r4
 80072e4:	462b      	mov	r3, r5
 80072e6:	1891      	adds	r1, r2, r2
 80072e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80072ea:	415b      	adcs	r3, r3
 80072ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072f2:	4621      	mov	r1, r4
 80072f4:	eb12 0801 	adds.w	r8, r2, r1
 80072f8:	4629      	mov	r1, r5
 80072fa:	eb43 0901 	adc.w	r9, r3, r1
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800730a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800730e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007312:	4690      	mov	r8, r2
 8007314:	4699      	mov	r9, r3
 8007316:	4623      	mov	r3, r4
 8007318:	eb18 0303 	adds.w	r3, r8, r3
 800731c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007320:	462b      	mov	r3, r5
 8007322:	eb49 0303 	adc.w	r3, r9, r3
 8007326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800732a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007336:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800733a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800733e:	460b      	mov	r3, r1
 8007340:	18db      	adds	r3, r3, r3
 8007342:	653b      	str	r3, [r7, #80]	; 0x50
 8007344:	4613      	mov	r3, r2
 8007346:	eb42 0303 	adc.w	r3, r2, r3
 800734a:	657b      	str	r3, [r7, #84]	; 0x54
 800734c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007354:	f7f9 fa6e 	bl	8000834 <__aeabi_uldivmod>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4b61      	ldr	r3, [pc, #388]	; (80074e4 <UART_SetConfig+0x2d4>)
 800735e:	fba3 2302 	umull	r2, r3, r3, r2
 8007362:	095b      	lsrs	r3, r3, #5
 8007364:	011c      	lsls	r4, r3, #4
 8007366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800736a:	2200      	movs	r2, #0
 800736c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007370:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007378:	4642      	mov	r2, r8
 800737a:	464b      	mov	r3, r9
 800737c:	1891      	adds	r1, r2, r2
 800737e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007380:	415b      	adcs	r3, r3
 8007382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007388:	4641      	mov	r1, r8
 800738a:	eb12 0a01 	adds.w	sl, r2, r1
 800738e:	4649      	mov	r1, r9
 8007390:	eb43 0b01 	adc.w	fp, r3, r1
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073a8:	4692      	mov	sl, r2
 80073aa:	469b      	mov	fp, r3
 80073ac:	4643      	mov	r3, r8
 80073ae:	eb1a 0303 	adds.w	r3, sl, r3
 80073b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073b6:	464b      	mov	r3, r9
 80073b8:	eb4b 0303 	adc.w	r3, fp, r3
 80073bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073d4:	460b      	mov	r3, r1
 80073d6:	18db      	adds	r3, r3, r3
 80073d8:	643b      	str	r3, [r7, #64]	; 0x40
 80073da:	4613      	mov	r3, r2
 80073dc:	eb42 0303 	adc.w	r3, r2, r3
 80073e0:	647b      	str	r3, [r7, #68]	; 0x44
 80073e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073ea:	f7f9 fa23 	bl	8000834 <__aeabi_uldivmod>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4611      	mov	r1, r2
 80073f4:	4b3b      	ldr	r3, [pc, #236]	; (80074e4 <UART_SetConfig+0x2d4>)
 80073f6:	fba3 2301 	umull	r2, r3, r3, r1
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	2264      	movs	r2, #100	; 0x64
 80073fe:	fb02 f303 	mul.w	r3, r2, r3
 8007402:	1acb      	subs	r3, r1, r3
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800740a:	4b36      	ldr	r3, [pc, #216]	; (80074e4 <UART_SetConfig+0x2d4>)
 800740c:	fba3 2302 	umull	r2, r3, r3, r2
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007418:	441c      	add	r4, r3
 800741a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800741e:	2200      	movs	r2, #0
 8007420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007424:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800742c:	4642      	mov	r2, r8
 800742e:	464b      	mov	r3, r9
 8007430:	1891      	adds	r1, r2, r2
 8007432:	63b9      	str	r1, [r7, #56]	; 0x38
 8007434:	415b      	adcs	r3, r3
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800743c:	4641      	mov	r1, r8
 800743e:	1851      	adds	r1, r2, r1
 8007440:	6339      	str	r1, [r7, #48]	; 0x30
 8007442:	4649      	mov	r1, r9
 8007444:	414b      	adcs	r3, r1
 8007446:	637b      	str	r3, [r7, #52]	; 0x34
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007454:	4659      	mov	r1, fp
 8007456:	00cb      	lsls	r3, r1, #3
 8007458:	4651      	mov	r1, sl
 800745a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800745e:	4651      	mov	r1, sl
 8007460:	00ca      	lsls	r2, r1, #3
 8007462:	4610      	mov	r0, r2
 8007464:	4619      	mov	r1, r3
 8007466:	4603      	mov	r3, r0
 8007468:	4642      	mov	r2, r8
 800746a:	189b      	adds	r3, r3, r2
 800746c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007470:	464b      	mov	r3, r9
 8007472:	460a      	mov	r2, r1
 8007474:	eb42 0303 	adc.w	r3, r2, r3
 8007478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007488:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800748c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007490:	460b      	mov	r3, r1
 8007492:	18db      	adds	r3, r3, r3
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
 8007496:	4613      	mov	r3, r2
 8007498:	eb42 0303 	adc.w	r3, r2, r3
 800749c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800749e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074a6:	f7f9 f9c5 	bl	8000834 <__aeabi_uldivmod>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <UART_SetConfig+0x2d4>)
 80074b0:	fba3 1302 	umull	r1, r3, r3, r2
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	2164      	movs	r1, #100	; 0x64
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	3332      	adds	r3, #50	; 0x32
 80074c2:	4a08      	ldr	r2, [pc, #32]	; (80074e4 <UART_SetConfig+0x2d4>)
 80074c4:	fba2 2303 	umull	r2, r3, r2, r3
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	f003 0207 	and.w	r2, r3, #7
 80074ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4422      	add	r2, r4
 80074d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074d8:	e105      	b.n	80076e6 <UART_SetConfig+0x4d6>
 80074da:	bf00      	nop
 80074dc:	40011000 	.word	0x40011000
 80074e0:	40011400 	.word	0x40011400
 80074e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074fa:	4642      	mov	r2, r8
 80074fc:	464b      	mov	r3, r9
 80074fe:	1891      	adds	r1, r2, r2
 8007500:	6239      	str	r1, [r7, #32]
 8007502:	415b      	adcs	r3, r3
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
 8007506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800750a:	4641      	mov	r1, r8
 800750c:	1854      	adds	r4, r2, r1
 800750e:	4649      	mov	r1, r9
 8007510:	eb43 0501 	adc.w	r5, r3, r1
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	00eb      	lsls	r3, r5, #3
 800751e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007522:	00e2      	lsls	r2, r4, #3
 8007524:	4614      	mov	r4, r2
 8007526:	461d      	mov	r5, r3
 8007528:	4643      	mov	r3, r8
 800752a:	18e3      	adds	r3, r4, r3
 800752c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007530:	464b      	mov	r3, r9
 8007532:	eb45 0303 	adc.w	r3, r5, r3
 8007536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800753a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007546:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007556:	4629      	mov	r1, r5
 8007558:	008b      	lsls	r3, r1, #2
 800755a:	4621      	mov	r1, r4
 800755c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007560:	4621      	mov	r1, r4
 8007562:	008a      	lsls	r2, r1, #2
 8007564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007568:	f7f9 f964 	bl	8000834 <__aeabi_uldivmod>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4b60      	ldr	r3, [pc, #384]	; (80076f4 <UART_SetConfig+0x4e4>)
 8007572:	fba3 2302 	umull	r2, r3, r3, r2
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	011c      	lsls	r4, r3, #4
 800757a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800757e:	2200      	movs	r2, #0
 8007580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007584:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800758c:	4642      	mov	r2, r8
 800758e:	464b      	mov	r3, r9
 8007590:	1891      	adds	r1, r2, r2
 8007592:	61b9      	str	r1, [r7, #24]
 8007594:	415b      	adcs	r3, r3
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800759c:	4641      	mov	r1, r8
 800759e:	1851      	adds	r1, r2, r1
 80075a0:	6139      	str	r1, [r7, #16]
 80075a2:	4649      	mov	r1, r9
 80075a4:	414b      	adcs	r3, r1
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075b4:	4659      	mov	r1, fp
 80075b6:	00cb      	lsls	r3, r1, #3
 80075b8:	4651      	mov	r1, sl
 80075ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075be:	4651      	mov	r1, sl
 80075c0:	00ca      	lsls	r2, r1, #3
 80075c2:	4610      	mov	r0, r2
 80075c4:	4619      	mov	r1, r3
 80075c6:	4603      	mov	r3, r0
 80075c8:	4642      	mov	r2, r8
 80075ca:	189b      	adds	r3, r3, r2
 80075cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075d0:	464b      	mov	r3, r9
 80075d2:	460a      	mov	r2, r1
 80075d4:	eb42 0303 	adc.w	r3, r2, r3
 80075d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80075e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075f4:	4649      	mov	r1, r9
 80075f6:	008b      	lsls	r3, r1, #2
 80075f8:	4641      	mov	r1, r8
 80075fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075fe:	4641      	mov	r1, r8
 8007600:	008a      	lsls	r2, r1, #2
 8007602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007606:	f7f9 f915 	bl	8000834 <__aeabi_uldivmod>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4b39      	ldr	r3, [pc, #228]	; (80076f4 <UART_SetConfig+0x4e4>)
 8007610:	fba3 1302 	umull	r1, r3, r3, r2
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	2164      	movs	r1, #100	; 0x64
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	3332      	adds	r3, #50	; 0x32
 8007622:	4a34      	ldr	r2, [pc, #208]	; (80076f4 <UART_SetConfig+0x4e4>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800762e:	441c      	add	r4, r3
 8007630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007634:	2200      	movs	r2, #0
 8007636:	673b      	str	r3, [r7, #112]	; 0x70
 8007638:	677a      	str	r2, [r7, #116]	; 0x74
 800763a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800763e:	4642      	mov	r2, r8
 8007640:	464b      	mov	r3, r9
 8007642:	1891      	adds	r1, r2, r2
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	415b      	adcs	r3, r3
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800764e:	4641      	mov	r1, r8
 8007650:	1851      	adds	r1, r2, r1
 8007652:	6039      	str	r1, [r7, #0]
 8007654:	4649      	mov	r1, r9
 8007656:	414b      	adcs	r3, r1
 8007658:	607b      	str	r3, [r7, #4]
 800765a:	f04f 0200 	mov.w	r2, #0
 800765e:	f04f 0300 	mov.w	r3, #0
 8007662:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007666:	4659      	mov	r1, fp
 8007668:	00cb      	lsls	r3, r1, #3
 800766a:	4651      	mov	r1, sl
 800766c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007670:	4651      	mov	r1, sl
 8007672:	00ca      	lsls	r2, r1, #3
 8007674:	4610      	mov	r0, r2
 8007676:	4619      	mov	r1, r3
 8007678:	4603      	mov	r3, r0
 800767a:	4642      	mov	r2, r8
 800767c:	189b      	adds	r3, r3, r2
 800767e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007680:	464b      	mov	r3, r9
 8007682:	460a      	mov	r2, r1
 8007684:	eb42 0303 	adc.w	r3, r2, r3
 8007688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	663b      	str	r3, [r7, #96]	; 0x60
 8007694:	667a      	str	r2, [r7, #100]	; 0x64
 8007696:	f04f 0200 	mov.w	r2, #0
 800769a:	f04f 0300 	mov.w	r3, #0
 800769e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076a2:	4649      	mov	r1, r9
 80076a4:	008b      	lsls	r3, r1, #2
 80076a6:	4641      	mov	r1, r8
 80076a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ac:	4641      	mov	r1, r8
 80076ae:	008a      	lsls	r2, r1, #2
 80076b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076b4:	f7f9 f8be 	bl	8000834 <__aeabi_uldivmod>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <UART_SetConfig+0x4e4>)
 80076be:	fba3 1302 	umull	r1, r3, r3, r2
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	2164      	movs	r1, #100	; 0x64
 80076c6:	fb01 f303 	mul.w	r3, r1, r3
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	3332      	adds	r3, #50	; 0x32
 80076d0:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <UART_SetConfig+0x4e4>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	f003 020f 	and.w	r2, r3, #15
 80076dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4422      	add	r2, r4
 80076e4:	609a      	str	r2, [r3, #8]
}
 80076e6:	bf00      	nop
 80076e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076ec:	46bd      	mov	sp, r7
 80076ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076f2:	bf00      	nop
 80076f4:	51eb851f 	.word	0x51eb851f

080076f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076f8:	b084      	sub	sp, #16
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	f107 001c 	add.w	r0, r7, #28
 8007706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	2b01      	cmp	r3, #1
 800770e:	d122      	bne.n	8007756 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773a:	2b01      	cmp	r3, #1
 800773c:	d105      	bne.n	800774a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 faa2 	bl	8007c94 <USB_CoreReset>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
 8007754:	e01a      	b.n	800778c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa96 	bl	8007c94 <USB_CoreReset>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800776c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	639a      	str	r2, [r3, #56]	; 0x38
 800777e:	e005      	b.n	800778c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	2b01      	cmp	r3, #1
 8007790:	d10b      	bne.n	80077aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f043 0206 	orr.w	r2, r3, #6
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f043 0220 	orr.w	r2, r3, #32
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077b6:	b004      	add	sp, #16
 80077b8:	4770      	bx	lr

080077ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f023 0201 	bic.w	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d115      	bne.n	800782a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800780a:	2001      	movs	r0, #1
 800780c:	f7fd fad0 	bl	8004db0 <HAL_Delay>
      ms++;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3301      	adds	r3, #1
 8007814:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa2e 	bl	8007c78 <USB_GetMode>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d01e      	beq.n	8007860 <USB_SetCurrentMode+0x84>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b31      	cmp	r3, #49	; 0x31
 8007826:	d9f0      	bls.n	800780a <USB_SetCurrentMode+0x2e>
 8007828:	e01a      	b.n	8007860 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d115      	bne.n	800785c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800783c:	2001      	movs	r0, #1
 800783e:	f7fd fab7 	bl	8004db0 <HAL_Delay>
      ms++;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3301      	adds	r3, #1
 8007846:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa15 	bl	8007c78 <USB_GetMode>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <USB_SetCurrentMode+0x84>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b31      	cmp	r3, #49	; 0x31
 8007858:	d9f0      	bls.n	800783c <USB_SetCurrentMode+0x60>
 800785a:	e001      	b.n	8007860 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e005      	b.n	800786c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b32      	cmp	r3, #50	; 0x32
 8007864:	d101      	bne.n	800786a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007874:	b084      	sub	sp, #16
 8007876:	b580      	push	{r7, lr}
 8007878:	b086      	sub	sp, #24
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	e009      	b.n	80078a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	3340      	adds	r3, #64	; 0x40
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	2200      	movs	r2, #0
 80078a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	3301      	adds	r3, #1
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	2b0e      	cmp	r3, #14
 80078ac:	d9f2      	bls.n	8007894 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d11c      	bne.n	80078ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078c2:	f043 0302 	orr.w	r3, r3, #2
 80078c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38
 80078ec:	e00b      	b.n	8007906 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800790c:	461a      	mov	r2, r3
 800790e:	2300      	movs	r3, #0
 8007910:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007918:	4619      	mov	r1, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	461a      	mov	r2, r3
 8007922:	680b      	ldr	r3, [r1, #0]
 8007924:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	2b01      	cmp	r3, #1
 800792a:	d10c      	bne.n	8007946 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007932:	2100      	movs	r1, #0
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f965 	bl	8007c04 <USB_SetDevSpeed>
 800793a:	e008      	b.n	800794e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800793c:	2101      	movs	r1, #1
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f960 	bl	8007c04 <USB_SetDevSpeed>
 8007944:	e003      	b.n	800794e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007946:	2103      	movs	r1, #3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f95b 	bl	8007c04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800794e:	2110      	movs	r1, #16
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f8f3 	bl	8007b3c <USB_FlushTxFifo>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f91f 	bl	8007ba4 <USB_FlushRxFifo>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	461a      	mov	r2, r3
 8007978:	2300      	movs	r3, #0
 800797a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	461a      	mov	r2, r3
 8007984:	2300      	movs	r3, #0
 8007986:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	461a      	mov	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	e043      	b.n	8007a22 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b0:	d118      	bne.n	80079e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c4:	461a      	mov	r2, r3
 80079c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	e013      	b.n	80079f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079da:	461a      	mov	r2, r3
 80079dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	e008      	b.n	80079f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f0:	461a      	mov	r2, r3
 80079f2:	2300      	movs	r3, #0
 80079f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a02:	461a      	mov	r2, r3
 8007a04:	2300      	movs	r3, #0
 8007a06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	461a      	mov	r2, r3
 8007a16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d3b7      	bcc.n	800799a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	e043      	b.n	8007ab8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a46:	d118      	bne.n	8007a7a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e013      	b.n	8007a8c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a70:	461a      	mov	r2, r3
 8007a72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e008      	b.n	8007a8c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a86:	461a      	mov	r2, r3
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a98:	461a      	mov	r2, r3
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	613b      	str	r3, [r7, #16]
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d3b7      	bcc.n	8007a30 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ae0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d105      	bne.n	8007af4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	f043 0210 	orr.w	r2, r3, #16
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <USB_DevInit+0x2c4>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	f043 0208 	orr.w	r2, r3, #8
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d107      	bne.n	8007b28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b20:	f043 0304 	orr.w	r3, r3, #4
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b34:	b004      	add	sp, #16
 8007b36:	4770      	bx	lr
 8007b38:	803c3800 	.word	0x803c3800

08007b3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <USB_FlushTxFifo+0x64>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d901      	bls.n	8007b5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e01b      	b.n	8007b94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	daf2      	bge.n	8007b4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	019b      	lsls	r3, r3, #6
 8007b6c:	f043 0220 	orr.w	r2, r3, #32
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3301      	adds	r3, #1
 8007b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4a08      	ldr	r2, [pc, #32]	; (8007ba0 <USB_FlushTxFifo+0x64>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e006      	b.n	8007b94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0320 	and.w	r3, r3, #32
 8007b8e:	2b20      	cmp	r3, #32
 8007b90:	d0f0      	beq.n	8007b74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	00030d40 	.word	0x00030d40

08007ba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4a11      	ldr	r2, [pc, #68]	; (8007c00 <USB_FlushRxFifo+0x5c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d901      	bls.n	8007bc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e018      	b.n	8007bf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	daf2      	bge.n	8007bb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2210      	movs	r2, #16
 8007bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <USB_FlushRxFifo+0x5c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d901      	bls.n	8007be6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e006      	b.n	8007bf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d0f0      	beq.n	8007bd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	00030d40 	.word	0x00030d40

08007c04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	68f9      	ldr	r1, [r7, #12]
 8007c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c24:	4313      	orrs	r3, r2
 8007c26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c50:	f023 0303 	bic.w	r3, r3, #3
 8007c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c64:	f043 0302 	orr.w	r3, r3, #2
 8007c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	f003 0301 	and.w	r3, r3, #1
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <USB_CoreReset+0x64>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d901      	bls.n	8007cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e01b      	b.n	8007cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	daf2      	bge.n	8007ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f043 0201 	orr.w	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <USB_CoreReset+0x64>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d901      	bls.n	8007cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e006      	b.n	8007cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d0f0      	beq.n	8007cca <USB_CoreReset+0x36>

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	00030d40 	.word	0x00030d40

08007cfc <__libc_init_array>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	4d0d      	ldr	r5, [pc, #52]	; (8007d34 <__libc_init_array+0x38>)
 8007d00:	4c0d      	ldr	r4, [pc, #52]	; (8007d38 <__libc_init_array+0x3c>)
 8007d02:	1b64      	subs	r4, r4, r5
 8007d04:	10a4      	asrs	r4, r4, #2
 8007d06:	2600      	movs	r6, #0
 8007d08:	42a6      	cmp	r6, r4
 8007d0a:	d109      	bne.n	8007d20 <__libc_init_array+0x24>
 8007d0c:	4d0b      	ldr	r5, [pc, #44]	; (8007d3c <__libc_init_array+0x40>)
 8007d0e:	4c0c      	ldr	r4, [pc, #48]	; (8007d40 <__libc_init_array+0x44>)
 8007d10:	f000 f820 	bl	8007d54 <_init>
 8007d14:	1b64      	subs	r4, r4, r5
 8007d16:	10a4      	asrs	r4, r4, #2
 8007d18:	2600      	movs	r6, #0
 8007d1a:	42a6      	cmp	r6, r4
 8007d1c:	d105      	bne.n	8007d2a <__libc_init_array+0x2e>
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d24:	4798      	blx	r3
 8007d26:	3601      	adds	r6, #1
 8007d28:	e7ee      	b.n	8007d08 <__libc_init_array+0xc>
 8007d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2e:	4798      	blx	r3
 8007d30:	3601      	adds	r6, #1
 8007d32:	e7f2      	b.n	8007d1a <__libc_init_array+0x1e>
 8007d34:	08007d9c 	.word	0x08007d9c
 8007d38:	08007d9c 	.word	0x08007d9c
 8007d3c:	08007d9c 	.word	0x08007d9c
 8007d40:	08007da0 	.word	0x08007da0

08007d44 <memset>:
 8007d44:	4402      	add	r2, r0
 8007d46:	4603      	mov	r3, r0
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d100      	bne.n	8007d4e <memset+0xa>
 8007d4c:	4770      	bx	lr
 8007d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d52:	e7f9      	b.n	8007d48 <memset+0x4>

08007d54 <_init>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr

08007d60 <_fini>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr
